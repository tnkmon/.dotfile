{"version":3,"file":"background.js","mappings":"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BACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,UAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cACA,qBACA,uBACA,gBACA,gBACA,UAGc,GAAAC,cAA0B,CACxC,MACA,MACA,OACA,SACA,SACA,WACA,WACA,MACA,MACA,OACA,MACA,OACA,UACA,YACA,gBACA,gBACA,SACA,aACA,oBACA,MACA,OAGc,GAAAC,oBAAgC,CAC9C,UACA,YACA,aACA,WACA,WAKc,GAAAC,UAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,GAAAC,cAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/C,GAAAC,aAAe,CAAC,OAAQ,OAAQ,OAAQ,KAAM,OAAQ,QAGjE,MAAMC,IACK,GAAAC,mBAA+B,CAC7C,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,mBAA+B,CAAC,OAAQ,YAAa,aAErD,GAAAC,wBAAoC,CAAC,YAAa,aAElD,GAAAC,gBAA4B,CAAC,mBAAoB,SAAU,SAE3D,GAAAC,oBAAgC,CAE9C,SACA,aACA,aACA,UAEA,WAGc,GAAAC,qBAAiC,CAC/C,SACA,cACA,kBACA,iBACA,WACA,YAGc,GAAAC,mBAA+B,CAE7C,SACA,YACA,SACA,UACA,cACA,WACA,SAEA,WACA,gBAGc,GAAAC,gBAA4B,CAAC,SAAU,iBAEvC,GAAAC,kBAA8B,CAC5C,UACA,iBACA,OACA,SACA,eACA,eACA,YACA,aAGc,GAAAC,uBAAmC,CACjD,eACA,eACA,YACA,aAGc,GAAAC,mBAA+B,CAC7C,YACA,iBACA,SACA,YAGc,GAAAC,mBAA+B,CAC7C,YACA,iBACA,SACA,YAGc,GAAAC,mBAA+B,CAC7C,YACA,iBACA,SACA,YAGc,GAAAC,qBAAiC,CAC/C,SACA,MACA,OACA,WACA,cACA,YACA,cACA,iBACA,eACA,sBACA,oBAGc,GAAAC,eAA2B,CACzC,OACA,OACA,kBACA,eACA,gBAGc,GAAAC,gBAA4B,CAC1C,QACA,WACA,WACA,kBACA,gBACA,oBAGc,GAAAC,kBAA8B,CAC5C,UACA,eACA,eACA,kBACA,uBACA,wBAGc,GAAAC,gBAA4B,CAC1C,QACA,SACA,eACA,MACA,YACA,gBAGc,GAAAC,mBAA+B,CAAC,YAAa,UAAW,eAExD,GAAAC,kBAA8B,CAC5C,UACA,eACA,eACA,qBAGc,GAAAC,aAAyC,CACvDC,YAAa,KACb,gBAAiB,KACjBC,QAAS,KACTC,QAAS,KACT,iBAAkB,KAClBC,QAAS,KACTC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZ,sBAAuB,KACvBC,UAAW,KACXC,QAAS,KACTC,MAAO,KACPC,UAAW,KACXC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,QAAS,KACTC,OAAQ,KACRC,QAAS,KACT,yBAA0B,KAC1BC,SAAU,KACV,gBAAiB,KACjBC,OAAQ,KACR,iCAAkC,KAClC,oBAAqB,KACrBC,SAAU,KACV,eAAgB,KAChBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,OAAQ,KACR,aAAc,KACd,iBAAkB,KAClB,2BAA4B,KAC5BC,KAAM,KACNC,MAAO,KACPC,MAAO,KACP,mBAAoB,KACpB,0BAA2B,KAC3BC,SAAU,KACVC,QAAS,KACTC,MAAO,KACP,6BAA8B,KAC9B,eAAgB,KAChB,aAAc,KACd,gBAAiB,KACjBC,QAAS,KACTC,KAAM,KACNC,OAAQ,KACR,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACV,qBAAsB,KACtBC,QAAS,KACTC,MAAO,KACP,cAAe,KACf,oBAAqB,KACrBC,QAAS,KACTC,QAAS,KACTC,SAAU,KACV,mBAAoB,KACpB,gBAAiB,KACjBC,KAAM,KACNC,QAAS,KACTC,OAAQ,KACR,gBAAiB,KACjB,mBAAoB,KACpB,8BAA+B,KAC/BC,MAAO,KACPC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,UAAW,KACXC,OAAQ,KACRC,UAAW,KACXC,QAAS,KACTC,WAAY,KACZC,KAAM,KACNC,UAAW,KACXC,SAAU,KACVC,OAAQ,KACR,gBAAiB,KACjBC,OAAQ,KACRC,MAAO,KACP,kCAAmC,KACnC,gCAAiC,KACjCC,SAAU,KACV,YAAa,KACbC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,UAAW,KACX,4BAA6B,KAC7BC,KAAM,KACNC,QAAS,KACT,cAAe,KACfC,OAAQ,KACRC,MAAO,KACPC,QAAS,KACTC,MAAO,KACPC,OAAQ,KACRC,OAAQ,KACRC,WAAY,KACZC,MAAO,KACPC,SAAU,KACV,oBAAqB,KACrB,cAAe,KACf,wCAAyC,KACzC,cAAe,KACfC,OAAQ,KACRC,WAAY,KACZ,mCAAoC,KACpCC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,QAAS,KACT,yBAA0B,KAC1BC,cAAe,KACfC,UAAW,KACXC,WAAY,KACZC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZC,OAAQ,KACRC,SAAU,KACVC,SAAU,KACVC,KAAM,KACNC,MAAO,KACP,mBAAoB,KACpBC,WAAY,KACZC,WAAY,KACZC,UAAW,KACXC,QAAS,KACTC,OAAQ,KACR,kCAAmC,KACnCC,QAAS,KACTC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,MAAO,KACPC,YAAa,KACb,uBAAwB,KACxB,gBAAiB,KACjB,cAAe,KACfC,UAAW,KACXC,MAAO,KACPC,QAAS,KACTC,KAAM,KACN,iBAAkB,KAClB,2BAA4B,KAC5BC,OAAQ,KACRC,KAAM,KACNC,SAAU,KACVC,MAAO,KACP,kCAAmC,KACnCC,OAAQ,KACR,mBAAoB,KACpBC,SAAU,KACVC,KAAM,KACNC,YAAa,KACbC,SAAU,KACVC,OAAQ,KACRC,SAAU,KACV,cAAe,KACfC,MAAO,KACPC,QAAS,KACTC,QAAS,KACT,qBAAsB,KACtBC,OAAQ,KACR,mBAAoB,KACpB,eAAgB,KAChB,wBAAyB,KACzB,cAAe,KACf,eAAgB,KAChB,4BAA6B,KAC7B,+BAAgC,KAChCC,MAAO,KACP,aAAc,KACd,wBAAyB,KACzB,eAAgB,KAChBC,QAAS,KACTC,OAAQ,KACRC,WAAY,KACZ,eAAgB,KAChBC,UAAW,KACXC,SAAU,KACVC,SAAU,KACV,kBAAmB,KACnBC,QAAS,KACT,eAAgB,KAChB,kCAAmC,KACnCC,MAAO,KACP,YAAa,KACbC,MAAO,KACPC,SAAU,KACV,yBAA0B,KAC1BC,UAAW,KACXC,OAAQ,KACRC,YAAa,KACb,uBAAwB,KACxBC,OAAQ,KACRC,WAAY,KACZC,SAAU,KACVC,SAAU,KACV,cAAe,KACfC,KAAM,KACNC,QAAS,KACTC,MAAO,KACP,sBAAuB,KACvBC,QAAS,KACTC,OAAQ,KACRC,aAAc,KACd,2BAA4B,KAC5BC,OAAQ,KACRC,OAAQ,KACRC,QAAS,KACT,uBAAwB,KACxB,iBAAkB,KAClB,gBAAiB,KACjB,iCAAkC,KAClCC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,UAAW,KACXC,QAAS,KACT,0BAA2B,KAC3B,uBAAwB,KACxB,oBAAqB,KACrB,iBAAkB,KAClBC,MAAO,KACPC,OAAQ,KACRC,SAAU,MAGI,GAAAC,UAAsC,CACpDC,QAAS,KACTC,OAAQ,KACR,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,WAAY,KACZC,SAAU,KACVC,YAAa,KACbC,SAAU,KACV,uBAAwB,KACxB,iCAAkC,KAClCC,QAAS,KACT/H,QAAS,KACTQ,KAAM,KACNwH,OAAQ,KACRC,MAAO,KACPC,SAAU,KACVC,QAAS,KACTC,KAAM,KACNC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,MAAO,KACP,mBAAoB,KACpBC,SAAU,KACVC,cAAe,KACfC,SAAU,KACVC,UAAW,KACXC,YAAa,KACbC,SAAU,KACVC,QAAS,KACTC,SAAU,KACVC,OAAQ,KACR,gBAAiB,KACjB,aAAc,KACd,aAAc,KACd,WAAY,KACZ,iBAAkB,KAClB,eAAgB,KAChB,2BAA4B,KAC5BC,KAAM,KACNC,SAAU,KACVC,OAAQ,KACR7E,MAAO,KACP8E,aAAc,KACd,cAAe,KACf,eAAgB,KAChB,iBAAkB,KAClB,eAAgB,KAChBC,UAAW,KACXC,MAAO,KACPC,KAAM,KACNC,QAAS,KACT,iBAAkB,KAClBC,SAAU,KACVC,WAAY,KACZ,gBAAiB,KACjBC,UAAW,KACXC,QAAS,MAGK,GAAAC,aAAyC,CACvDC,QAAS,KACT,mBAAoB,KACpBC,SAAU,KACV,gBAAiB,KACjB,4BAA6B,KAC7B,cAAe,KACfC,QAAS,KACT,uBAAwB,KACxBC,OAAQ,KACRC,aAAc,M,2SCxsBH,MAAMC,GACnBj0F,YACU4lD,EACAthB,EACA4vD,EACAC,EACA9vD,GAJA,KAAAuhB,cAAAA,EACA,KAAAthB,aAAAA,EACA,KAAA4vD,YAAAA,EACA,KAAAC,aAAAA,EACA,KAAA9vD,WAAAA,EAGV+vD,2BAA2BC,GACzB,MAAMC,EAAkB,GAElBC,EAAiBr0F,KAAKs0F,mBAAmBH,GAAa,GAAM,GAAM,GAAO,GAC/E,GAA8B,IAA1BE,EAAerxF,OACjB,OAAOoxF,EAGT,IAAK,MAAMG,KAAWJ,EAAYK,MAAO,CAEvC,IAAKL,EAAYK,MAAMh/E,eAAe++E,GACpC,SAGF,MAAME,EAAqBJ,EAAensF,QAAQwsF,GAAOH,IAAYG,EAAGC,OACxE,GAAIF,EAAmBzxF,OAAS,EAAG,CACjC,IAAI4xF,EAAK50F,KAAK60F,kBAAkBV,EAAaM,EAAmB,IAAI,GAAO,GAAO,GACxE,MAANG,IAEFA,EAAK50F,KAAK60F,kBAAkBV,EAAaM,EAAmB,IAAI,GAAM,GAAM,IAE9EL,EAASr+E,KAAK,CACZ4+E,KAAMR,EAAYK,MAAMD,GACxB7lF,SAAU+lF,EAAmB,GAC7BrmF,SAAUwmF,EACVE,UAAWL,KAKjB,OAAOL,EAGHW,WAAWn6B,G,0CACf,IAAIo6B,EAA+B,KACnC,MAAM7V,QAAYn/E,KAAKi1F,eACvB,KAAK9V,GAAQvkB,EAAQ1mB,QAAW0mB,EAAQu5B,aAAgBv5B,EAAQu5B,YAAYnxF,QAC1E,MAAM,IAAI/D,MAAM,yBAGlB,MAAMi2F,QAAyBl1F,KAAKokC,aAAa+wD,sBACjD,IAAIC,GAAc,EAsDlB,GArDAx6B,EAAQu5B,YAAYltF,SAASouF,IAE3B,GAAIA,EAAGlW,IAAI//E,KAAO+/E,EAAI//E,IAAMi2F,EAAGlW,IAAIr5E,MAAQq5E,EAAIr5E,IAC7C,OAGF,MAAMwvF,EAAat1F,KAAKu1F,mBAAmBF,EAAGpjF,QAAS,CACrDujF,qBAAsB56B,EAAQ46B,uBAAwB,EACtDC,gBAAiB76B,EAAQ66B,kBAAmB,EAC5CC,kBAAmB96B,EAAQ86B,oBAAqB,EAChDC,gBAAiB/6B,EAAQ+6B,kBAAmB,EAC5CzhD,OAAQ0mB,EAAQ1mB,SAGbohD,GAAeA,EAAW7R,QAAW6R,EAAW7R,OAAOzgF,SAK5DsyF,EAAW5R,WAAWkS,yBAA2B,GAEjDR,GAAc,EACTx6B,EAAQi7B,cACX71F,KAAK0lD,cAActL,mBAAmBwgB,EAAQ1mB,OAAO90C,IAGvDq/E,GAAWY,eACTF,EACA,CACEC,QAAS,WACTkW,WAAYA,EACZxvF,IAAKq5E,EAAIr5E,KAEX,CAAEgwF,QAAST,EAAGS,UAIdl7B,EAAQ1mB,OAAOtqC,OAASnK,EAAW6rC,QACnC0pD,GACCp6B,EAAQ1mB,OAAOrkC,MAAMjB,OACpBsmF,GAAqBt6B,EAAQ1mB,OAAOxkC,uBAKxCslF,EAAch1F,KAAKokC,aAAa2xD,yBAAyBh3F,MAAMkf,GACxDA,EAGE,KAFEje,KAAKg0F,YAAYvgB,QAAQ7Y,EAAQ1mB,OAAOrkC,MAAMjB,aAMvDwmF,EAEF,OADAp1F,KAAKi0F,aAAaluC,QAAQoB,GAAU6uC,wBAAyBp7B,EAAQ1mB,OAAO90C,IACzD,MAAf41F,QACWA,EAEN,KAGT,MAAM,IAAI/1F,MAAM,yBAIdg3F,oBAAoB9B,EAAkB+B,G,kDAC1C,MAAM/W,QAAYn/E,KAAKi1F,eACvB,IAAK9V,IAAQA,EAAIr5E,IACf,OAGF,IAAIouC,EACJ,GAAIgiD,EACFhiD,QAAel0C,KAAK0lD,cAAcxL,oBAAoBilC,EAAIr5E,SACrD,CACL,MAAMqwF,QAA2Bn2F,KAAK0lD,cAAczL,sBAAsBklC,EAAIr5E,KAAK,GAUnF,GALEouC,EAHAiiD,GACA/pF,KAAK09C,MAAMzV,WAAsD,QAA1C,EAA4B,QAA5B,EAAA8hD,EAAmBzlD,iBAAS,eAAEyD,oBAAY,eAAEE,WAAY,IAEtE8hD,QAEMn2F,KAAK0lD,cAAc3L,kBAAkBolC,EAAIr5E,KAAK,GAGjD,MAAVouC,EACF,OAAO,KAIX,GAAIA,EAAO7jC,WAAa7Q,EAAmB8Q,KACzC,OAGF,MAAM8lF,QAAiBp2F,KAAK+0F,WAAW,CACrC7gD,OAAQA,EACRigD,YAAaA,EACb0B,cAAeK,EACfV,sBAAuBU,EACvBT,iBAAkBS,EAClBR,mBAAoBQ,EACpBP,gBAAiBO,IAQnB,OAJIA,GACFl2F,KAAK0lD,cAAcvL,0BAA0BglC,EAAIr5E,KAG5CswF,KAKKnB,e,0CACZ,MAAM9V,QAAYV,GAAW4X,0BAC7B,IAAKlX,EACH,MAAM,IAAIlgF,MAAM,iBAGlB,OAAOkgF,KAGDoW,mBAAmBpB,EAAkCv5B,GAC3D,IAAKu5B,IAAgBv5B,EAAQ1mB,OAC3B,OAAO,KAGT,IAAIohD,EAAa,IAAI/R,GAAe4Q,EAAY3Q,cAChD,MAAM8S,EAAgD,GAChDtmF,EAAS4qD,EAAQ1mB,OAAOlkC,OAE9B,GAAIA,GAAUA,EAAOhN,OAAQ,CAC3B,MAAMuzF,EAAuB,GAE7BvmF,EAAO/I,SAASgJ,IACVjQ,KAAKw2F,SAASvmF,EAAEhO,OAClBs0F,EAAWxgF,KAAK9F,EAAEhO,KAAKoF,kBAI3B8sF,EAAYnkF,OAAO/I,SAAS4rC,IAE1B,GAAIyjD,EAAa9gF,eAAeq9B,EAAM4jD,MACpC,OAGF,IAAK5jD,EAAM6jD,UAA8B,SAAlB7jD,EAAM8jD,QAC3B,OAGF,MAAMC,EAAgB52F,KAAK62F,uBAAuBhkD,EAAO0jD,GACzD,GAAIK,GAAiB,EAAG,CACtB,MAAME,EAA2B9mF,EAAO4mF,GACxC,IAAI/zD,EACAi0D,EAAcltF,OAASygC,GAAU0sD,OAEnCl0D,EAAM+3B,EAAQ1mB,OAAOrD,iBAAiBimD,EAAc3pF,WAEpD01B,EAAMi0D,EAAc5pF,MACT,MAAP21B,GAAei0D,EAAcltF,OAASygC,GAAUqN,UAClD7U,EAAM,UAIVyzD,EAAazjD,EAAM4jD,MAAQ5jD,EAC3B7yC,KAAKg3F,WAAW1B,EAAYziD,EAAOhQ,OAKzC,OAAQ+3B,EAAQ1mB,OAAOtqC,MACrB,KAAKnK,EAAW6rC,MACdgqD,EAAat1F,KAAKi3F,wBAAwB3B,EAAYnB,EAAamC,EAAc17B,GACjF,MACF,KAAKn7D,EAAW+rC,KACd8pD,EAAat1F,KAAKk3F,uBAAuB5B,EAAYnB,EAAamC,EAAc17B,GAChF,MACF,KAAKn7D,EAAWgsC,SACd6pD,EAAat1F,KAAKm3F,2BAChB7B,EACAnB,EACAmC,EACA17B,GAEF,MACF,QACE,OAAO,KAGX,OAAO06B,EAGD2B,wBACN3B,EACAnB,EACAmC,EACA17B,GAEA,IAAKA,EAAQ1mB,OAAOrkC,MAClB,OAAO,KAGT,MAAMilF,EAA6B,GAC7BsC,EAA6B,GACnC,IAAI1C,EAAoB,KACpBtmF,EAA0B,KAC9B,MAAMyB,EAAQ+qD,EAAQ1mB,OAAOrkC,MAE7B,IAAKA,EAAMnB,UAA+B,KAAnBmB,EAAMnB,SAG3B,OADA4mF,EAAat1F,KAAKq3F,sBAAsBf,EAAchB,GAIxD,IAAIjB,EAAiBr0F,KAAKs0F,mBACxBH,GACA,GACA,EACAv5B,EAAQ66B,gBACR76B,EAAQ+6B,iBAELtB,EAAerxF,QAAW43D,EAAQ86B,oBAErCrB,EAAiBr0F,KAAKs0F,mBACpBH,GACA,GACA,EACAv5B,EAAQ66B,gBACR76B,EAAQ+6B,kBAIZ,IAAK,MAAMpB,KAAWJ,EAAYK,MAAO,CAEvC,IAAKL,EAAYK,MAAMh/E,eAAe++E,GACpC,SAGF,MAAM+C,EAAyC,GAC/CjD,EAAeptF,SAASswF,IAClBhD,IAAYgD,EAAU5C,MACxB2C,EAAsBvhF,KAAKwhF,MAI/BlD,EAAeptF,SAASswF,IACtB7C,EAAK6C,EACLzC,EAAU/+E,KAAK2+E,GAEX7kF,EAAMzB,WACRA,EAAWpO,KAAK60F,kBAAkBV,EAAaO,GAAI,GAAO,GAAO,GAE5DtmF,GAAawsD,EAAQ86B,oBAExBtnF,EAAWpO,KAAK60F,kBAAkBV,EAAaO,GAAI,GAAM,GAAM,IAG7DtmF,GACFgpF,EAAUrhF,KAAK3H,OA6DvB,OAvDIimF,EAAerxF,SAAW8xF,EAAU9xF,SAItC0xF,EAAKL,EAAe,GACpBS,EAAU/+E,KAAK2+E,GAEX7kF,EAAMzB,UAAYsmF,EAAG8C,cAAgB,IACvCppF,EAAWpO,KAAK60F,kBAAkBV,EAAaO,GAAI,GAAO,GAAO,GAE5DtmF,GAAawsD,EAAQ86B,oBAExBtnF,EAAWpO,KAAK60F,kBAAkBV,EAAaO,GAAI,GAAM,GAAM,IAG7DtmF,GACFgpF,EAAUrhF,KAAK3H,KAKhBimF,EAAerxF,QAAW43D,EAAQ46B,sBAErCrB,EAAYnkF,OAAO/I,SAASgJ,IAExBA,EAAEymF,WACU,SAAXzmF,EAAErG,MAA8B,UAAXqG,EAAErG,MAA+B,QAAXqG,EAAErG,OAC9C5J,KAAKy3F,kBAAkBxnF,EAAG2zE,GAAkBC,qBAE5CuT,EAAUrhF,KAAK9F,MAKrBmnF,EAAUnwF,SAAS8H,IAEbunF,EAAa9gF,eAAezG,EAAE0nF,QAIlCH,EAAavnF,EAAE0nF,MAAQ1nF,EACvB/O,KAAKg3F,WAAW1B,EAAYvmF,EAAGc,EAAMzB,cAGvC0mF,EAAU7tF,SAAS0gB,IAEb2uE,EAAa9gF,eAAemS,EAAE8uE,QAIlCH,EAAa3uE,EAAE8uE,MAAQ9uE,EACvB3nB,KAAKg3F,WAAW1B,EAAY3tE,EAAG9X,EAAMnB,cAGvC4mF,EAAat1F,KAAKq3F,sBAAsBf,EAAchB,GAIhD4B,uBACN5B,EACAnB,EACAmC,EACA17B,GAEA,IAAKA,EAAQ1mB,OAAOpkC,KAClB,OAAO,KAGT,MAAM4nF,EAA8C,GAEpDvD,EAAYnkF,OAAO/I,SAASgJ,IAC1B,IAAIjQ,KAAK23F,oBAAoB1nF,KAIzBjQ,KAAK43F,eAAe3nF,EAAErG,KAAMg6E,GAAkBG,uBAIlD,IAAK,IAAI9gF,EAAI,EAAGA,EAAI+gF,GAA4BC,eAAejhF,OAAQC,IAAK,CAC1E,MAAM40F,EAAO7T,GAA4BC,eAAehhF,GAExD,GAAKgN,EAAEuF,eAAeqiF,IAAU5nF,EAAE4nF,IAAU5nF,EAAEymF,SAA9C,CAMA,IACGgB,EAAW9qF,gBACZ5M,KAAK83F,aACH7nF,EAAE4nF,GACF7T,GAA4BG,qBAC5BH,GAA4BI,2BAE9B,CACAsT,EAAW9qF,eAAiBqD,EAC5B,MACK,IACJynF,EAAW5qF,QACZ9M,KAAK83F,aACH7nF,EAAE4nF,GACF7T,GAA4BK,qBAC5BL,GAA4BM,2BAE9B,CACAoT,EAAW5qF,OAASmD,EACpB,MACK,IACJynF,EAAWloD,KACZxvC,KAAK83F,aACH7nF,EAAE4nF,GACF7T,GAA4BO,qBAC5BP,GAA4BQ,2BAE9B,CACAkT,EAAWloD,IAAMv/B,EACjB,MACK,IACJynF,EAAW3qF,UACZ/M,KAAK83F,aAAa7nF,EAAE4nF,GAAO7T,GAA4BS,uBACvD,CACAiT,EAAW3qF,SAAWkD,EACtB,MACK,IACJynF,EAAW1qF,SACZhN,KAAK83F,aAAa7nF,EAAE4nF,GAAO7T,GAA4BU,sBACvD,CACAgT,EAAW1qF,QAAUiD,EACrB,MACK,IACJynF,EAAWx4F,MACZc,KAAK83F,aAAa7nF,EAAE4nF,GAAO7T,GAA4BW,eACvD,CACA+S,EAAWx4F,KAAO+Q,EAClB,MACK,IACJynF,EAAW7qF,OACZ7M,KAAK83F,aAAa7nF,EAAE4nF,GAAO7T,GAA4BY,qBACvD,CACA8S,EAAW7qF,MAAQoD,EACnB,YAKN,MAAMH,EAAO8qD,EAAQ1mB,OAAOpkC,KAM5B,GALA9P,KAAK+3F,iBAAiBzC,EAAYxlF,EAAM4nF,EAAYpB,EAAc,kBAClEt2F,KAAK+3F,iBAAiBzC,EAAYxlF,EAAM4nF,EAAYpB,EAAc,UAClEt2F,KAAK+3F,iBAAiBzC,EAAYxlF,EAAM4nF,EAAYpB,EAAc,QAClEt2F,KAAK+3F,iBAAiBzC,EAAYxlF,EAAM4nF,EAAYpB,EAAc,SAE9DoB,EAAW3qF,UAAY/M,KAAKw2F,SAAS1mF,EAAK/C,UAAW,CACvD,IAAIA,EAAmB+C,EAAK/C,SAE5B,GAAI2qF,EAAW3qF,SAASirF,YAAcN,EAAW3qF,SAASirF,WAAWp9B,QAAS,CAC5E,IAAIiD,EAAgB,KACpB,MAAMo6B,EAAYP,EAAW3qF,SAASirF,WAAWp9B,QAejD,GAdyB,KAArBq9B,EAAUj1F,OACZ66D,EAAQx6D,SAASyM,EAAK/C,SAAU,MAAQ,EACV,KAArBkrF,EAAUj1F,SAQjB66D,EANmB,MAAnBo6B,EAAU,GAAG,IACO,KAApBA,EAAU,GAAG,IACQ,MAApBA,EAAU,IAAI,IAAmC,KAArBA,EAAU,IAAI,GAInC50F,SAASyM,EAAK/C,SAAU,MAFxB1J,SAASyM,EAAK/C,SAAU,MAAQ,GAM/B,MAAT8wD,EAAe,CACjB,MAAMq6B,EAASD,EAAUp6B,GACrBq6B,EAAOl1F,OAAS,IAClB+J,EAAWmrF,EAAO,UAIrBl4F,KAAKm4F,kBAAkBT,EAAW3qF,SAAU,OACT,IAAlC2qF,EAAW3qF,SAASqrF,WACF,IAApBrrF,EAAS/J,SAET+J,EAAW,IAAMA,GAGnBupF,EAAaoB,EAAW3qF,SAAS0pF,MAAQiB,EAAW3qF,SACpD/M,KAAKg3F,WAAW1B,EAAYoC,EAAW3qF,SAAUA,GAGnD,GAAI2qF,EAAW1qF,SAAWhN,KAAKw2F,SAAS1mF,EAAK9C,SAAU,CACrD,IAAIA,EAAkB8C,EAAK9C,QAC3B,GAAI0qF,EAAW1qF,QAAQgrF,YAAcN,EAAW1qF,QAAQgrF,WAAWp9B,QACjE,IAAK,IAAI33D,EAAI,EAAGA,EAAIy0F,EAAW1qF,QAAQgrF,WAAWp9B,QAAQ53D,OAAQC,IAAK,CACrE,MAAMiiB,EAAsBwyE,EAAW1qF,QAAQgrF,WAAWp9B,QAAQ33D,GAClE,GAAIiiB,EAAE,KAAOpV,EAAK9C,SAAWkY,EAAE,KAAOpV,EAAK9C,QAAS,CAClDA,EAAUkY,EAAE,GACZ,MAEF,GACkB,IAAhBA,EAAE,GAAGliB,QACmB,IAAxB8M,EAAK9C,QAAQhK,QACbkiB,EAAE,KAAOpV,EAAK9C,QAAQs3D,UAAU,GAChC,CACAt3D,EAAUkY,EAAE,GACZ,MAEF,MAAMmzE,EAAanzE,EAAE,GAAG7e,QAAQ,KAChC,GAAIgyF,GAAc,GAAKnzE,EAAE,GAAGliB,OAASq1F,EAAa,EAAG,CACnD,MAAMx1D,EAAM3d,EAAE,GAAGo/C,UAAU+zB,EAAa,GACxC,GAAW,MAAPx1D,GAA8B,KAAfA,EAAI38B,QAAiB28B,IAAQ/yB,EAAK9C,QAAS,CAC5DA,EAAUkY,EAAE,GACZ,aAKNllB,KAAKm4F,kBAAkBT,EAAW1qF,QAAS,SACV,IAAjC0qF,EAAW1qF,QAAQorF,UAEI,IAAnBprF,EAAQhK,SACVgK,EAAU,KAAOA,IAGnBhN,KAAKm4F,kBAAkBT,EAAW1qF,QAAS,OACV,IAAjC0qF,EAAW1qF,QAAQorF,YAEI,IAAnBprF,EAAQhK,SACVgK,EAAUA,EAAQ1J,OAAO,IAI7BgzF,EAAaoB,EAAW1qF,QAAQypF,MAAQiB,EAAW1qF,QACnDhN,KAAKg3F,WAAW1B,EAAYoC,EAAW1qF,QAASA,GAGlD,GAAI0qF,EAAWloD,KAAOxvC,KAAKw2F,SAAS1mF,EAAK/C,WAAa/M,KAAKw2F,SAAS1mF,EAAK9C,SAAU,CACjF,MAAMsrF,GAAa,IAAMxoF,EAAK/C,UAAUhI,OAAO,GAE/C,IAAIwzF,EAAmBzoF,EAAK9C,QACxBwrF,EAAmB,KACC,IAApBD,EAASv1F,QACXw1F,EAAWD,EACXA,EAAW,KAAOA,GACW,IAApBA,EAASv1F,SAClBw1F,EAAWD,EAASj1F,OAAO,EAAG,IAGhC,IAAIksC,EAAc,KAClB,IAAK,IAAIvsC,EAAI,EAAGA,EAAI+gF,GAA4Ba,UAAU7hF,SAEtDhD,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Ba,UAAU5hF,GACpC,IACA+gF,GAA4Bc,cAAc7hF,KAElC,MAAZu1F,EAEAhpD,EAAM8oD,EAAY,IAAME,EAExBx4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Ba,UAAU5hF,GACpC,IACA+gF,GAA4Be,aAAa9hF,IAG7CusC,EAAM8oD,EAAY,IAAMC,EAExBv4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Bc,cAAc7hF,GACxC,IACA+gF,GAA4Ba,UAAU5hF,KAE9B,MAAZu1F,EAEAhpD,EAAMgpD,EAAW,IAAMF,EAEvBt4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Be,aAAa9hF,GACvC,IACA+gF,GAA4Ba,UAAU5hF,IAG1CusC,EAAM+oD,EAAW,IAAMD,EAEvBt4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Ba,UAAU5hF,GACpC,IACA+gF,GAA4Bc,cAAc7hF,KAElC,MAAZu1F,EAEAhpD,EAAM8oD,EAAY,IAAME,EAExBx4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Ba,UAAU5hF,GACpC,IACA+gF,GAA4Be,aAAa9hF,IAG7CusC,EAAM8oD,EAAY,IAAMC,EAExBv4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Bc,cAAc7hF,GACxC,IACA+gF,GAA4Ba,UAAU5hF,KAE9B,MAAZu1F,EAEAhpD,EAAMgpD,EAAW,IAAMF,EAEvBt4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Be,aAAa9hF,GACvC,IACA+gF,GAA4Ba,UAAU5hF,IAG1CusC,EAAM+oD,EAAW,IAAMD,EAEvBt4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Bc,cAAc7hF,GAAK+gF,GAA4Ba,UAAU5hF,KAE3E,MAAZu1F,EAEAhpD,EAAMgpD,EAAWF,EAEjBt4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Be,aAAa9hF,GAAK+gF,GAA4Ba,UAAU5hF,IAGtFusC,EAAM+oD,EAAWD,EAEjBt4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Ba,UAAU5hF,GAAK+gF,GAA4Bc,cAAc7hF,KAE3E,MAAZu1F,EAEAhpD,EAAM8oD,EAAYE,EAElBx4F,KAAKm4F,kBACHT,EAAWloD,IACXw0C,GAA4Ba,UAAU5hF,GAAK+gF,GAA4Be,aAAa9hF,MAGtFusC,EAAM8oD,EAAYC,GAGT,MAAP/oD,GA7G4DvsC,KAkHvD,MAAPusC,IACFA,EAAM+oD,EAAW,IAAMD,GAGzBt4F,KAAKy4F,0BAA0BnD,EAAY9lD,EAAKkoD,EAAWloD,IAAK8mD,GAGlE,OAAOhB,EAGD6C,kBAAkBtlD,EAAY6lD,GACpC,IAAK7lD,EACH,OAAO,EAGT,IAAI8lD,GAAc,EAYlB,OAXA3U,GAA4BE,uBAAuBj9E,SAAS4wF,IAE1D,GAAIc,IAAgB9lD,EAAMr9B,eAAeqiF,KAAUhlD,EAAMglD,GACvD,OAGF,IAAIh1D,EAAMgQ,EAAMglD,GAChBh1D,EAAMA,EAAIx+B,QAAQ,KAAM,IAAIgD,cAC5BsxF,EAAc91D,EAAIx8B,QAAQqyF,IAAgB,KAGrCC,EAGDxB,2BACN7B,EACAnB,EACAmC,EACA17B,GAEA,IAAKA,EAAQ1mB,OAAOrzC,SAClB,OAAO,KAGT,MAAM62F,EAA8C,GAEpDvD,EAAYnkF,OAAO/I,SAASgJ,IAC1B,IAAIjQ,KAAK23F,oBAAoB1nF,KAIzBjQ,KAAK43F,eAAe3nF,EAAErG,KAAMg6E,GAAkBG,uBAIlD,IAAK,IAAI9gF,EAAI,EAAGA,EAAI+hF,GAA0BC,mBAAmBjiF,OAAQC,IAAK,CAC5E,MAAM40F,EAAO7S,GAA0BC,mBAAmBhiF,GAE1D,GAAKgN,EAAEuF,eAAeqiF,IAAU5nF,EAAE4nF,IAAU5nF,EAAEymF,SAA9C,CAMA,IACGgB,EAAWz1F,MACZjC,KAAK83F,aACH7nF,EAAE4nF,GACF7S,GAA0BE,mBAC1BF,GAA0BG,yBAE5B,CACAuS,EAAWz1F,KAAOgO,EAClB,MACK,IACJynF,EAAWpqF,WACZtN,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BK,qBACrD,CACAqS,EAAWpqF,UAAY2C,EACvB,MACK,IACJynF,EAAWnqF,YACZvN,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BM,sBACrD,CACAoS,EAAWnqF,WAAa0C,EACxB,MACK,IACJynF,EAAWlqF,UACZxN,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BO,oBACrD,CACAmS,EAAWlqF,SAAWyC,EACtB,MACK,IACJynF,EAAWrqF,OACZrN,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BI,iBACrD,CACAsS,EAAWrqF,MAAQ4C,EACnB,MACK,IACJynF,EAAWzpF,OACZjO,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BQ,iBACrD,CACAkS,EAAWzpF,MAAQgC,EACnB,MACK,IACJynF,EAAW3nD,SACZ/vC,KAAK83F,aACH7nF,EAAE4nF,GACF7S,GAA0BS,kBAC1BT,GAA0BU,wBAE5B,CACAgS,EAAW3nD,QAAU9/B,EACrB,MACK,IACJynF,EAAWjqF,UACZzN,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BW,oBACrD,CACA+R,EAAWjqF,SAAWwC,EACtB,MACK,IACJynF,EAAWhqF,UACZ1N,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BY,oBACrD,CACA8R,EAAWhqF,SAAWuC,EACtB,MACK,IACJynF,EAAW/pF,UACZ3N,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0Ba,oBACrD,CACA6R,EAAW/pF,SAAWsC,EACtB,MACK,IACJynF,EAAW5pF,YACZ9N,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0Bc,sBACrD,CACA4R,EAAW5pF,WAAamC,EACxB,MACK,IACJynF,EAAW9pF,MACZ5N,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0Be,gBACrD,CACA2R,EAAW9pF,KAAOqC,EAClB,MACK,IACJynF,EAAW7pF,OACZ7N,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BgB,iBACrD,CACA0R,EAAW7pF,MAAQoC,EACnB,MACK,IACJynF,EAAW3pF,SACZ/N,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BiB,mBACrD,CACAyR,EAAW3pF,QAAUkC,EACrB,MACK,IACJynF,EAAWxpF,OACZlO,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BkB,iBACrD,CACAwR,EAAWxpF,MAAQ+B,EACnB,MACK,IACJynF,EAAWtpF,UACZpO,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BmB,oBACrD,CACAuR,EAAWtpF,SAAW6B,EACtB,MACK,IACJynF,EAAW1pF,SACZhO,KAAK83F,aAAa7nF,EAAE4nF,GAAO7S,GAA0BoB,mBACrD,CACAsR,EAAW1pF,QAAUiC,EACrB,YAKN,MAAMpP,EAAW+5D,EAAQ1mB,OAAOrzC,SAChCb,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,SACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,aACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,cACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,YACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,YACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,YACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,YACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,QACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,cACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,WACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,SACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,SACtEt2F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,YAEtE,IAAIsC,GAAc,EAClB,GAAIlB,EAAW7pF,OAAShN,EAASgN,OAAShN,EAASgN,MAAM7K,OAAS,EAAG,CACnE,MAAM61F,EAAah4F,EAASgN,MAAMxG,cAC5ByxF,EACJ9T,GAA0BiM,UAAU4H,IACpC7T,GAA0ByO,aAAaoF,GACrCC,IACFF,GAAc,EACd54F,KAAKy4F,0BAA0BnD,EAAYwD,EAAUpB,EAAW7pF,MAAOyoF,IAItEsC,GACH54F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,SAGxE,IAAIyC,GAAgB,EACpB,GAAIrB,EAAW3pF,SAAWlN,EAASkN,SAAWlN,EAASkN,QAAQ/K,OAAS,EAAG,CACzE,MAAMg2F,EAAen4F,EAASkN,QAAQ1G,cAChC4xF,EAAajU,GAA0BqB,aAAa2S,GACtDC,IACFF,GAAgB,EAChB/4F,KAAKy4F,0BAA0BnD,EAAY2D,EAAYvB,EAAW3pF,QAASuoF,IAQ/E,GAJKyC,GACH/4F,KAAK+3F,iBAAiBzC,EAAYz0F,EAAU62F,EAAYpB,EAAc,WAGpEoB,EAAWz1F,OAASpB,EAASyM,WAAazM,EAAS2M,UAAW,CAChE,IAAI0rF,EAAW,GACXl5F,KAAKw2F,SAAS31F,EAASyM,aACzB4rF,EAAWr4F,EAASyM,WAElBtN,KAAKw2F,SAAS31F,EAAS0M,cACR,KAAb2rF,IACFA,GAAY,KAEdA,GAAYr4F,EAAS0M,YAEnBvN,KAAKw2F,SAAS31F,EAAS2M,YACR,KAAb0rF,IACFA,GAAY,KAEdA,GAAYr4F,EAAS2M,UAGvBxN,KAAKy4F,0BAA0BnD,EAAY4D,EAAUxB,EAAWz1F,KAAMq0F,GAGxE,GAAIoB,EAAW3nD,SAAW/vC,KAAKw2F,SAAS31F,EAAS4M,UAAW,CAC1D,IAAIsiC,EAAU,GACV/vC,KAAKw2F,SAAS31F,EAAS4M,YACzBsiC,EAAUlvC,EAAS4M,UAEjBzN,KAAKw2F,SAAS31F,EAAS6M,YACT,KAAZqiC,IACFA,GAAW,MAEbA,GAAWlvC,EAAS6M,UAElB1N,KAAKw2F,SAAS31F,EAAS8M,YACT,KAAZoiC,IACFA,GAAW,MAEbA,GAAWlvC,EAAS8M,UAGtB3N,KAAKy4F,0BAA0BnD,EAAYvlD,EAAS2nD,EAAW3nD,QAASumD,GAG1E,OAAOhB,EAGDsC,eAAehuF,EAAcuvF,GACnC,OAAOA,EAAc9yF,QAAQuD,IAAS,EAGhCkuF,aAAa5qF,EAAe0tD,EAAmBw+B,GACrDlsF,EAAQA,EACLhH,OACAmB,cACAhD,QAAQ,iBAAkB,IAC7B,IAAK,IAAIpB,EAAI,EAAGA,EAAI23D,EAAQ53D,OAAQC,IAAK,CACvC,IAAIi1F,EAASt9B,EAAQ33D,GACrB,MAAMo2F,EAAwC,MAAnBD,GAA2BA,EAAgB/yF,QAAQ6xF,IAAW,EAEzF,GADAA,EAASA,EAAO7wF,cAAchD,QAAQ,KAAM,IACxC6I,IAAUgrF,GAAWmB,GAAsBnsF,EAAM7G,QAAQ6xF,IAAW,EACtE,OAAO,EAIX,OAAO,EAGDH,iBACNzC,EACAgE,EACA5B,EACApB,EACAiD,EACAC,GAEAA,EAAYA,GAAaD,EACzBv5F,KAAKy4F,0BACHnD,EACAgE,EAAWC,GACX7B,EAAW8B,GACXlD,GAIImC,0BACNnD,EACAmE,EACA5mD,EACAyjD,GAEA,IAAIoD,GAAS,EACb,GAAI15F,KAAKw2F,SAASiD,IAAc5mD,EAC9B,GAAmB,eAAfA,EAAMjpC,MAAyBipC,EAAMmlD,YAAcnlD,EAAMmlD,WAAWp9B,QACtE,IAAK,IAAI33D,EAAI,EAAGA,EAAI4vC,EAAMmlD,WAAWp9B,QAAQ53D,OAAQC,IAAK,CACxD,MAAMi1F,EAASrlD,EAAMmlD,WAAWp9B,QAAQ33D,GACxC,IAAK,IAAI+6D,EAAI,EAAGA,EAAIk6B,EAAOl1F,OAAQg7D,IACjC,GAAIh+D,KAAKw2F,SAAS0B,EAAOl6B,KAAOk6B,EAAOl6B,GAAG32D,gBAAkBoyF,EAAUpyF,cAAe,CACnFqyF,GAAS,EACLxB,EAAOl1F,OAAS,IAClBy2F,EAAYvB,EAAO,IAErB,MAIJ,GAAIwB,EACF,WAIJA,GAAS,EAITA,IACFpD,EAAazjD,EAAM4jD,MAAQ5jD,EAC3B7yC,KAAKg3F,WAAW1B,EAAYziD,EAAO4mD,IAI/BnF,mBACNH,EACAwF,EACAC,EACAC,EACAlE,GAEA,MAAMjyF,EAAuB,GAmD7B,OAlDAywF,EAAYnkF,OAAO/I,SAASgJ,IAC1B,GAAIjQ,KAAK23F,oBAAoB1nF,GAC3B,OAGF,MAAM6pF,EAAwB,aAAX7pF,EAAErG,KACfmwF,EAAuB7sF,IAC3B,GAAa,MAATA,EACF,OAAO,EAIT,MAAM8sF,EAAe9sF,EAAM7F,cAAchD,QAAQ,WAAY,IAE7D,QAAI21F,EAAa3zF,QAAQ,YAAc,KAInCu9E,GAAkBE,wBAAwB1zC,MAAMntC,GAAM+2F,EAAa3zF,QAAQpD,IAAM,KAsBpFgN,EAAEgO,WACF27E,GAAkB3pF,EAAEgqF,YACpBH,GAjBc,SAAX7pF,EAAErG,OAGFmwF,EAAoB9pF,EAAEiqF,SAGtBH,EAAoB9pF,EAAEkqF,WAGtBJ,EAAoB9pF,EAAEmqF,iBASzBT,IAAe1pF,EAAEymF,UAChBmD,GAA0B,MAAX5pF,EAAE/C,OAAoC,KAAnB+C,EAAE/C,MAAMhH,SAC3CyvF,GAA0C,iBAAvB1lF,EAAEoqF,kBAEtB32F,EAAIqS,KAAK9F,MAGNvM,EAGDmxF,kBACNV,EACAmG,EACAX,EACAC,EACAW,GAEA,IAAIC,EAA+B,KACnC,IAAK,IAAIv3F,EAAI,EAAGA,EAAIkxF,EAAYnkF,OAAOhN,OAAQC,IAAK,CAClD,MAAMgN,EAAIkkF,EAAYnkF,OAAO/M,GAC7B,IAAIjD,KAAK23F,oBAAoB1nF,GAA7B,CAIA,GAAIA,EAAEunF,eAAiB8C,EAAc9C,cACnC,MAGF,IACGvnF,EAAEgO,WACF27E,IAAkB3pF,EAAEgqF,YACpBM,GAAetqF,EAAE0kF,OAAS2F,EAAc3F,QACxCgF,GAAe1pF,EAAEymF,YACN,SAAXzmF,EAAErG,MAA8B,UAAXqG,EAAErG,MAA+B,QAAXqG,EAAErG,QAE9C4wF,EAAgBvqF,EAEZjQ,KAAK62F,uBAAuB5mF,EAAG2zE,GAAkBC,qBAAuB,GAE1E,OAKN,OAAO2W,EAGD3D,uBAAuBhkD,EAAsB4nD,GACnD,IAAK,IAAIx3F,EAAI,EAAGA,EAAIw3F,EAAMz3F,OAAQC,IAAK,CACrC,GAAIw3F,EAAMx3F,GAAGoD,QAAQ,MAAQ,EAAG,CAC9B,GAAIrG,KAAK06F,2BAA2B7nD,EAAO,SAAU4nD,EAAMx3F,GAAI,MAC7D,OAAOA,EAET,GAAIjD,KAAK06F,2BAA2B7nD,EAAO,WAAY4nD,EAAMx3F,GAAI,QAC/D,OAAOA,EAET,GAAIjD,KAAK06F,2BAA2B7nD,EAAO,YAAa4nD,EAAMx3F,GAAI,SAChE,OAAOA,EAET,GAAIjD,KAAK06F,2BAA2B7nD,EAAO,aAAc4nD,EAAMx3F,GAAI,SACjE,OAAOA,EAET,GAAIjD,KAAK06F,2BAA2B7nD,EAAO,cAAe4nD,EAAMx3F,GAAI,eAClE,OAAOA,EAIX,GAAIjD,KAAK26F,qBAAqB9nD,EAAO,SAAU4nD,EAAMx3F,IACnD,OAAOA,EAET,GAAIjD,KAAK26F,qBAAqB9nD,EAAO,WAAY4nD,EAAMx3F,IACrD,OAAOA,EAET,GAAIjD,KAAK26F,qBAAqB9nD,EAAO,YAAa4nD,EAAMx3F,IACtD,OAAOA,EAET,GAAIjD,KAAK26F,qBAAqB9nD,EAAO,aAAc4nD,EAAMx3F,IACvD,OAAOA,EAET,GAAIjD,KAAK26F,qBAAqB9nD,EAAO,cAAe4nD,EAAMx3F,IACxD,OAAOA,EAIX,OAAQ,EAGFy3F,2BACN7nD,EACA+nD,EACA34F,EACA2T,EACAilF,EAAY,KAEZ,GAAyC,IAArC54F,EAAKoE,QAAQuP,EAASilF,GAAkB,CAC1C,MAAMC,EAAW74F,EAAKoE,QAAQw0F,GACxBh4D,EAAM5gC,EAAKqiE,UAAUw2B,EAAW,GACtC,OAAc,MAAPj4D,GAAe7iC,KAAK26F,qBAAqB9nD,EAAO+nD,EAAU/3D,GAEnE,OAAO,EAGD83D,qBAAqB9nD,EAAY+nD,EAAkB34F,GACzD,IAAI84F,EAAWloD,EAAM+nD,GACrB,IAAK56F,KAAKw2F,SAASuE,GACjB,OAAO,EAIT,GADAA,EAAWA,EAAS70F,OAAO7B,QAAQ,kBAAmB,IAClDpC,EAAKkE,WAAW,UAClB,IACE,MAAM60F,EAAa/4F,EAAK+E,MAAM,IAAK,GACnC,GAA0B,IAAtBg0F,EAAWh4F,OAAc,CAE3B,OADc,IAAI2C,OAAOq1F,EAAW,GAAI,KAC3Bp1F,KAAKm1F,IAEpB,MAAO/7F,GACPgB,KAAKmkC,WAAW1iB,MAAMziB,QAEnB,GAAIiD,EAAKkE,WAAW,QAAS,CAClC,MAAM80F,EAAWh5F,EAAK+E,MAAM,IAAK,GACjC,GAAwB,IAApBi0F,EAASj4F,OAAc,CACzB,MAAMk4F,EAAUD,EAAS,GAAGj0F,MAAM,KAClC,IAAK,IAAI/D,EAAI,EAAGA,EAAIi4F,EAAQl4F,OAAQC,IAAK,CACvC,MAAM4/B,EAAMq4D,EAAQj4F,GACpB,GAAW,MAAP4/B,GAAeA,EAAI38B,OAAOmB,gBAAkB0zF,EAAS1zF,cACvD,OAAO,EAGX,OAAO,GAIX,OAAO0zF,EAAS1zF,gBAAkBpF,EAG5Bw1F,kBAAkB5kD,EAAsB4nD,GAC9C,SAAIz6F,KAAKw2F,SAAS3jD,EAAMqnD,UAAWl6F,KAAKm7F,WAAWV,EAAO5nD,EAAMqnD,cAG5Dl6F,KAAKw2F,SAAS3jD,EAAMsnD,YAAan6F,KAAKm7F,WAAWV,EAAO5nD,EAAMsnD,gBAG9Dn6F,KAAKw2F,SAAS3jD,EAAM,gBAAiB7yC,KAAKm7F,WAAWV,EAAO5nD,EAAM,oBAGlE7yC,KAAKw2F,SAAS3jD,EAAMunD,eAAgBp6F,KAAKm7F,WAAWV,EAAO5nD,EAAMunD,mBAGjEp6F,KAAKw2F,SAAS3jD,EAAM,iBAAkB7yC,KAAKm7F,WAAWV,EAAO5nD,EAAM,qBAGnE7yC,KAAKw2F,SAAS3jD,EAAM,gBAAiB7yC,KAAKm7F,WAAWV,EAAO5nD,EAAM,mBAGlE7yC,KAAKw2F,SAAS3jD,EAAM,iBAAkB7yC,KAAKm7F,WAAWV,EAAO5nD,EAAM,qBAOjEsoD,WAAWvgC,EAAmB1tD,GACpC,GAAe,MAAX0tD,GAAsC,IAAnBA,EAAQ53D,QAAyB,MAATkK,GAA2B,KAAVA,EAC9D,OAAO,EAGTA,EAAQA,EACL7I,QAAQ,kBAAmB,IAC3B6B,OACAmB,cAEH,IAAK,IAAIpE,EAAI,EAAGA,EAAI23D,EAAQ53D,OAAQC,IAClC,GAAIiK,EAAM7G,QAAQu0D,EAAQ33D,KAAO,EAC/B,OAAO,EAIX,OAAO,EAGDuzF,SAAS/zF,GACf,OAAOA,GAAe,KAARA,EAGR40F,sBACNf,EACAhB,GAEA,IAAI8F,EAA2B,KAC3BC,EAAmC,KAEvC,IAAK,MAAM5E,KAAQH,EAEbA,EAAa9gF,eAAeihF,IAASH,EAAaG,GAAMC,WAC1D0E,EAAY9E,EAAaG,GAEO,aAA5BH,EAAaG,GAAM7sF,OACrByxF,EAAoB/E,EAAaG,KAYvC,OANI4E,EACF/F,EAAW7R,OAAO1tE,KAAK,CAAC,gBAAiBslF,EAAkB5E,OAClD2E,GACT9F,EAAW7R,OAAO1tE,KAAK,CAAC,gBAAiBqlF,EAAU3E,OAG9CnB,EAGD0B,WAAW1B,EAA4BziD,EAAsB3lC,GAC/D2lC,EAAMulD,WAAalrF,GAASA,EAAMlK,OAAS6vC,EAAMulD,YACnDlrF,EAAQA,EAAM5J,OAAO,EAAG4J,EAAMlK,SAEV,SAAlB6vC,EAAM8jD,UACRrB,EAAW7R,OAAO1tE,KAAK,CAAC,gBAAiB88B,EAAM4jD,OAC/CnB,EAAW7R,OAAO1tE,KAAK,CAAC,gBAAiB88B,EAAM4jD,QAEjDnB,EAAW7R,OAAO1tE,KAAK,CAAC,eAAgB88B,EAAM4jD,KAAMvpF,IAG9CyqF,oBAAoB9kD,GAC1B,MAAyB,SAAlBA,EAAM8jD,S,gBCryCV,MAAM2E,GACXx7F,YAAmB6D,GAAA,KAAAA,OAAAA,G,2SCKd,MAAe43F,GAGpB,gBAAgB5uF,GACd,OAAQA,EAAK/C,MACX,IAAK,eACH,OAAO,IAAI4xF,GAAyB7uF,EAAKJ,KAE3C,IAAK,WACH,OAAO,IAAIkvF,GAAiC9uF,EAAKJ,IAAKI,EAAKuJ,YAE7D,QACE,OAAO,OAKR,MAAMslF,GACX17F,YAAoByM,GAAA,KAAAA,IAAAA,EAEdkgC,QAAQxI,G,0CACZ,MAAMwK,QAAiBxK,EAAcw5C,WAAWz9E,KAAKuM,KACrD,OAAO,IAAIshC,GAAmBY,MAGhCitD,SACE,MAAO,CACL9xF,KAAM,eACN2C,IAAKvM,KAAKuM,MAKT,MAAMkvF,GACX37F,YAAoByM,EAAqB2J,GAArB,KAAA3J,IAAAA,EAAqB,KAAA2J,WAAAA,EAEnCu2B,QAAQxI,G,0CACZ,MAAM03D,QAAoB13D,EAAc23D,eAAe57F,KAAKkW,YACtDu4B,QAAiBxK,EAAcyK,eAAe,IAAI9C,GAAU5rC,KAAKuM,KAAMovF,GAC7E,OAAO,IAAI9tD,GAAmBY,MAGhCitD,SACE,MAAO,CACL9xF,KAAM,WACN2C,IAAKvM,KAAKuM,IACV2J,WAAYlW,KAAKkW,a,kuBC3BhB,MAAM2lF,GACX/7F,YACUmhC,EACA66D,EACEC,EACA53D,EACAC,GAJF,KAAAnD,sBAAAA,EACA,KAAA66D,eAAAA,EACE,KAAAC,oBAAAA,EACA,KAAA53D,WAAAA,EACA,KAAAC,aAAAA,EAGN8C,OAAO36B,EAAyB0J,G,gDAC9BjW,KAAKokC,aAAa43D,mBAAmBzvF,EAAK,CAAE0J,OAAQA,UACpDjW,KAAKi8F,SAAS1vF,EAAK0J,MAGrBkxB,WAAW8jC,G,gDACTjrE,KAAKokC,aAAa+C,WAAW8jC,MAG/BnlC,UAAUgI,G,0CACA,MAAVA,UAIE9tC,KAAKokC,aAAa83D,+BAA+B,YACjDl8F,KAAKokC,aAAa+3D,+BAA+BruD,OAGnD/H,iBAAiBq2D,G,0CACA,MAAjBA,UAIEp8F,KAAKokC,aAAai4D,uBAAuB,YACzCr8F,KAAKokC,aAAak4D,uBAAuBF,OAG3C3qB,WACJ8qB,EAAsC,GACtCC,EAAsD,I,0CAEtD,MAAMC,EAAmE,GAkBzE,OAhBAF,EAAKt1F,SAAS04D,IACZ88B,EAAc98B,EAAIvgE,IAAM,CACtBwK,KAAM,eACN2C,IAAKozD,EAAIpzD,QAIbiwF,EAAav1F,SAAS04D,IACpB88B,EAAc98B,EAAIvgE,IAAM,CACtBwK,KAAM,WACNsM,WAAYypD,EAAIzpD,WAChB3J,IAAKozD,EAAIpzD,cAIPvM,KAAKokC,aAAas4D,6BAA6B,YACxC18F,KAAKokC,aAAau4D,6BAA6BF,MAGxDjrB,gBAAgB9sD,G,0CACpB,MAAM8e,EAAoB,GAM1B,OALA9e,EAAUzd,SAAS8D,IACjBy4B,EAAaz4B,EAAS3L,IAAM2L,EAASwB,aAGjCvM,KAAKokC,aAAaw4D,yBAAyB,YACpC58F,KAAKokC,aAAay4D,yBAAyBr5D,MAGpDkG,OAAOqlC,EAA8B94D,G,0CACzC,MAAM6mF,QAAoB98F,KAAKokC,aAAa24D,mBAAmB,CAAE9mF,OAAQA,IAEzE,GAAmB,MAAf6mF,EACF,OAAOA,EAGT/tB,IAAAA,EAAchtC,GAAiByH,MAC/B,MAAMwzD,QAAqBh9F,KAAKi9F,kBAAkBluB,EAAW94D,GAO7D,OALoB,MAAhB+mF,GAEFh9F,KAAKknC,OAAO81D,EAAc/mF,GAGrB+mF,KAGHC,kBACJluB,EACA94D,G,0CAEA,MAAM1J,QAAYvM,KAAKk9F,uBAAuBnuB,EAAW94D,GACzD,GAAW,MAAP1J,EAAa,CACf,MAAMywF,EAAe,IAAInvD,GAAmBjsC,EAAMuB,eAAeoJ,GAAK5I,QAEtE,aAAY3D,KAAKm9F,YAAYH,IAMtBA,GALLh9F,KAAKmkC,WAAWwd,QAAQ,6CAClB3hD,KAAKo9F,oBAAoBnnF,GACxB,MAKX,OAAO,QAGHonF,a,0CACJ,aAAar9F,KAAKokC,aAAai5D,gBAG3B1lB,wBAAwBtwC,EAAwB96B,G,0CACpD,MAAM+wF,QAAsBt9F,KAAKq9F,aACjC,GAAsB,MAAlBh2D,GAA2C,MAAjBi2D,EAAuB,CACnD,MAAMC,QAAqBv9F,KAAKunC,aAC9BF,EACA96B,EACA85B,GAAYmB,oBAEd,GAAoB,MAAhB+1D,GAAwBD,IAAkBC,EAC5C,OAAO,EAIT,MAAMC,QAAsBx9F,KAAKunC,aAC/BF,EACA96B,EACA85B,GAAYo3D,qBAEd,GAAqB,MAAjBD,GAAyBF,IAAkBE,EAE7C,aADMx9F,KAAKmnC,WAAWo2D,IACf,EAIX,OAAO,KAITG,UAAUnxF,EAA0B,MAClC,OAAOvM,KAAK29F,gBAAgBpxF,GAGxBqxF,e,0CACJ,MAAMC,QAA0B79F,KAAKokC,aAAaw5D,eAClD,GAAyB,MAArBC,EACF,OAAOA,EAGT,MAAMhmF,QAAmB7X,KAAK89F,gBAC9B,GAAkB,MAAdjmF,EACF,OAAO,KAGT,MAAMoE,QAAkBjc,KAAKihC,sBAAsBy8C,oBAAoB7lE,GAEvE,aADM7X,KAAKokC,aAAa25D,aAAa9hF,GAC9BA,KAGH6hF,gB,0CACJ,MAAME,QAA4Bh+F,KAAKokC,aAAa65D,yBACpD,GAA2B,MAAvBD,EACF,OAAOA,EAGT,MAAM5B,QAAsBp8F,KAAKokC,aAAa85D,yBAC9C,GAAqB,MAAjB9B,EACF,OAAO,KAGT,MAAMvkF,QAAmB7X,KAAK0uC,eAAe,IAAI9C,GAAUwwD,GAAgB,MAE3E,aADMp8F,KAAKokC,aAAai4D,uBAAuBxkF,GACxCA,KAGHsmF,eAAeloF,EAAgBgG,G,0CAInC,GAHiB,MAAbA,IACFA,QAAkBjc,KAAK49F,gBAEP,OAAd3hF,EACF,MAAM,IAAIhd,MAAM,4BAElB,MAAMm/F,QAAuBp+F,KAAKihC,sBAAsBI,KAAKplB,EAAW,UAClEoiF,QAAwBr+F,KAAKihC,sBAAsBs6C,WACvD6iB,EACAnoF,EACA,GACA,UAEF,OAAOjW,KAAKs+F,WAAWD,MAInBE,a,0CACJ,MAAM34D,EAA0C,IAAI7+B,IAC9Cy3F,QAAkCx+F,KAAKokC,aAAaq6D,+BAC1D,GAAiC,MAA7BD,GAAqCA,EAA0BhyF,KAAO,EACxE,OAAOgyF,EAGT,MAAM/B,QAAsBz8F,KAAKokC,aAAas6D,+BAC9C,GAAqB,MAAjBjC,EACF,OAAO,KAGT,IAAIv1D,GAAS,EAEb,IAAK,MAAMgB,KAASngC,OAAO5I,KAAKs9F,GAAgB,CAC9C,GAAI72D,EAAO0N,IAAIpL,GACb,SAGF,MAAMy2D,EAAYpD,GAA6BqD,SAASnC,EAAcv0D,IAChE22D,QAAkBF,EAAUlyD,QAAQzsC,MAC1C4lC,EAAOx+B,IAAI8gC,EAAO22D,GAElB33D,GAAS,EAOX,OAJIA,UACIlnC,KAAKokC,aAAas4D,6BAA6B92D,IAGhDA,KAGHiH,UAAU3E,G,0CACd,GAAa,MAATA,EACF,OAAO,KAGT,MAAM42D,QAAgB9+F,KAAKu+F,aAC3B,OAAe,MAAXO,GAAoBA,EAAQxrD,IAAIpL,GAI7B42D,EAAQz+D,IAAI6H,GAHV,QAOL62D,kB,0CACJ,MAAMv7D,EAAgD,IAAIz8B,IACpDi4F,QAA8Bh/F,KAAKokC,aAAa66D,2BACtD,GAA6B,MAAzBD,GAAiCA,EAAsBxyF,KAAO,EAChE,OAAOwyF,EAGT,MAAMn0B,QAAwB7qE,KAAKokC,aAAa86D,2BAChD,GAAuB,MAAnBr0B,EACF,OAAO,KAGT,IAAI3jC,GAAS,EAEb,IAAK,MAAMgB,KAAS2iC,EAAiB,CAEnC,IAAKA,EAAgBr1D,eAAe0yB,GAClC,SAGF,MAAMuG,QAAiBzuC,KAAKy9E,WAAW5S,EAAgB3iC,IACvD1E,EAAap8B,IAAI8gC,EAAO,IAAI2F,GAAmBY,IAC/CvH,GAAS,EAOX,OAJIA,UACIlnC,KAAKokC,aAAaw4D,yBAAyBp5D,IAG5CA,KAGHo4D,eAAe1lF,G,0CACnB,GAAkB,MAAdA,EACF,OAAO,KAGT,MAAMstB,QAAqBxjC,KAAK++F,kBAChC,OAAoB,MAAhBv7D,GAAyBA,EAAa8P,IAAIp9B,GAIvCstB,EAAanD,IAAInqB,GAHf,QAMLqiC,S,0CACJ,aACSv4C,KAAK2pC,0BACL3pC,KAAKupC,aAAaxH,GAAiByH,eACnCxpC,KAAKupC,aAAaxH,GAAiBo9D,eAIxCx1D,eAAe1zB,G,0CACnB,OAA2E,aAA7DjW,KAAKokC,aAAa24D,mBAAmB,CAAE9mF,OAAQA,QAGzDszB,aAAawlC,EAA6B94D,G,0CAC9C,OAAQ84D,GACN,KAAKhtC,GAAiByH,KACpB,OAA+E,aAAjExpC,KAAKokC,aAAag7D,uBAAuB,CAAEnpF,OAAQA,KACnE,KAAK8rB,GAAiBo9D,UACpB,OAAqF,WAAvEn/F,KAAKokC,aAAai7D,4BAA4B,CAAEppF,OAAQA,KACxE,QACE,OAAO,MAIPqpF,Y,0CACJ,OAAqE,aAAvDt/F,KAAKokC,aAAam7D,qCAG5BC,SAASC,GAAqB,EAAMxpF,G,gDAClCjW,KAAKokC,aAAa43D,mBAAmB,KAAM,CAAE/lF,OAAQA,UACrDjW,KAAKokC,aAAas7D,gBAAgB,KAAM,CAAEzpF,OAAQA,IACpDwpF,UACIz/F,KAAKo9F,oBAAoBnnF,OAI7B0pF,eAAe5wB,G,0CACnBA,IAAchtC,GAAiByH,WACrBxpC,KAAKokC,aAAaw7D,uBAAuB,YACzC5/F,KAAKokC,aAAay7D,4BAA4B,SAGpDC,aAAa7pF,G,0CACjB,aAAajW,KAAKokC,aAAa+C,WAAW,KAAM,CAAElxB,OAAQA,OAGtD8pF,YAAYC,EAAsB/pF,G,gDAChCjW,KAAKokC,aAAa83D,+BAA+B,KAAM,CAAEjmF,OAAQA,IAClE+pF,UACGhgG,KAAKokC,aAAa+3D,+BAA+B,KAAM,CAAElmF,OAAQA,QAIrEgqF,aAAaD,EAAsB/pF,G,0CACvC,MAAMiqF,EAA+B,CACnClgG,KAAKokC,aAAai4D,uBAAuB,KAAM,CAAEpmF,OAAQA,IACzDjW,KAAKokC,aAAa25D,aAAa,KAAM,CAAE9nF,OAAQA,KAKjD,OAHK+pF,GACHE,EAAYnqF,KAAK/V,KAAKokC,aAAak4D,uBAAuB,KAAM,CAAErmF,OAAQA,KAErEpX,QAAQ+uC,IAAIsyD,MAGfC,aAAaH,EAAsB/pF,G,gDACjCjW,KAAKokC,aAAas4D,6BAA6B,KAAM,CAAEzmF,OAAQA,IAChE+pF,UACGhgG,KAAKokC,aAAau4D,6BAA6B,KAAM,CAAE1mF,OAAQA,QAInEmqF,kBAAkBJ,EAAsB/pF,G,gDACtCjW,KAAKokC,aAAaw4D,yBAAyB,KAAM,CAAE3mF,OAAQA,IAC5D+pF,UACGhgG,KAAKokC,aAAay4D,yBAAyB,KAAM,CAAE5mF,OAAQA,QAI/DoqF,qBAAqBpqF,G,0CACzB,aAAajW,KAAKokC,aAAak8D,yBAAyB,KAAM,CAAErqF,OAAQA,OAGpEsqF,UAAUtqF,G,gDACRjW,KAAKw/F,UAAS,EAAMvpF,SACpBjW,KAAK8/F,aAAa7pF,SAClBjW,KAAKmgG,cAAa,EAAOlqF,SACzBjW,KAAKogG,mBAAkB,EAAOnqF,SAC9BjW,KAAK+/F,aAAY,EAAO9pF,SACxBjW,KAAKigG,cAAa,EAAOhqF,SACzBjW,KAAKqgG,qBAAqBpqF,MAG5BuqF,Y,0CACJ,MAAMj0F,QAAYvM,KAAK0pC,eAEjB1pC,KAAKknC,OAAO36B,MAGdw9B,QACJr7B,EACAu6C,EACAz0C,EACAC,G,0CAEA,IAAIlI,EAAmB,KACvB,GAAW,MAAPiI,GAAeA,IAAQgyC,GAAQC,cAQjC,MAAM,IAAIxnD,MAAM,gBAPhB,GAAqB,MAAjBwV,EACFA,EAAgB,SACX,GAAIA,EAAgB,IACzB,MAAM,IAAIxV,MAAM,qCAMpB,OAJEsN,QAAYvM,KAAKihC,sBAAsB2kC,OAAOl3D,EAAUu6C,EAAM,SAAUx0C,GAInE,IAAIo5B,GAAmBthC,MAG1Bk0F,eACJC,EACAz3C,EACAz0C,EACAC,EACAksF,EAA4B,M,0CAE5B,GAAsB,MAAlBA,EAAwB,CAC1B,MAAMC,QAAwB5gG,KAAKokC,aAAay8D,2BAChD,GAAuB,MAAnBD,EACF,MAAM,IAAI3hG,MAAM,+BAElB0hG,EAAiB,IAAI/0D,GAAUg1D,GAEjC,MAAME,QAAe9gG,KAAKkpD,WAAWw3C,EAAKz3C,EAAMz0C,EAAKC,GAC/CssF,QAAe/gG,KAAK0uC,eAAeiyD,EAAgBG,GACzD,OAAO,IAAIjzD,GAAmBkzD,MAG1BC,e,0CACJ,MAAMC,QAAiBjhG,KAAKihC,sBAAsByiB,YAAY,IACxDznC,QAAkBjc,KAAK49F,eAE7B,MAAO,OADmB59F,KAAKu9E,WAAW0jB,EAAUhlF,GAC/B,IAAI4xB,GAAmBozD,OAGxC96D,YAAY55B,G,0CAChB,MAAM8xE,QAAgBr+E,KAAKihC,sBAAsBi9C,mBAAmB,MAGpE,MAAO,CAFWt8E,EAAMuC,gBAAgBk6E,EAAQ,UACvBr+E,KAAKq2C,QAAQgoC,EAAQ,GAAI9xE,OAI9C28C,WACJw3C,EACAz3C,EACAz0C,EACAC,G,0CAEA,MAAMqsF,QAAe9gG,KAAK+pC,QAAQ22D,EAAKz3C,EAAMz0C,EAAKC,GAClD,aAAazU,KAAKkhG,WAAWJ,MAGzBz7B,YAAY87B,G,0CAChB,MAAMC,QAAgBphG,KAAKihC,sBAAsBk6C,KAC/CgmB,EACA,iBACA,OACA,GACA,UAEF,OAAO,IAAItzD,GAAmBuzD,MAG1B75D,aACJ74B,EACAnC,EACA80F,G,0CAKA,GAHW,MAAP90F,IACFA,QAAYvM,KAAK0pC,UAEH,MAAZh7B,GAA2B,MAAPnC,EACtB,MAAM,IAAItN,MAAM,uBAGlB,MAAMy7E,EAAa2mB,IAAgBh7D,GAAYmB,mBAAqB,EAAI,EAClEnG,QAAarhC,KAAKihC,sBAAsB2kC,OAAOr5D,EAAIA,IAAKmC,EAAU,SAAUgsE,GAClF,OAAO94E,EAAMuC,gBAAgBk9B,MAGzB+a,WAAW7vC,G,0CACf,MAAM+0F,QAAethG,KAAKuhG,oBAAoBh1F,GACxCuhC,QAAe9tC,KAAKihC,sBAAsByiB,YAAY,IAC5D,OAAO1jD,KAAKwhG,YAAYF,EAAQxzD,MAG5B2zD,aACJl1F,EACAuhC,G,0CAKA,OAHc,MAAVA,IACFA,QAAe9tC,KAAK09F,aAEf19F,KAAKwhG,YAAYj1F,EAAKuhC,EAAOvhC,QAQhC8pC,QAAQwM,EAAkCt2C,G,0CAG9C,OAFAA,QAAYvM,KAAKuhG,oBAAoBh1F,SAExBvM,KAAK87F,eAAezlD,QAAQwM,EAAYt2C,MAGjD+vC,eAAeuG,EAAyBt2C,G,0CAC5C,MAAMm1F,QAAiB1hG,KAAKgjD,WAAWH,EAAYt2C,GACnD,IAAIo1F,EAAS,EACO,MAAhBD,EAAS31D,MACX41D,EAASD,EAAS31D,IAAIjoC,YAGxB,MAAM89F,EAAW,IAAIl/F,WAAW,EAAIg/F,EAAS51D,GAAGhoC,WAAa69F,EAASD,EAAS/0F,KAAK7I,YAQpF,OAPA89F,EAASx6F,IAAI,CAACs6F,EAASn1F,IAAIy/B,UAC3B41D,EAASx6F,IAAI,IAAI1E,WAAWg/F,EAAS51D,IAAK,GACtB,MAAhB41D,EAAS31D,KACX61D,EAASx6F,IAAI,IAAI1E,WAAWg/F,EAAS31D,KAAM,EAAI21D,EAAS51D,GAAGhoC,YAG7D89F,EAASx6F,IAAI,IAAI1E,WAAWg/F,EAAS/0F,MAAO,EAAI+0F,EAAS51D,GAAGhoC,WAAa69F,GAClE,IAAIrG,GAAesG,EAASj+F,WAG/B45E,WAAW5wE,EAAmBsP,G,0CAIlC,GAHiB,MAAbA,IACFA,QAAkBjc,KAAK49F,gBAER,MAAb3hF,EACF,MAAM,IAAIhd,MAAM,2BAGlB,MAAM2iG,QAAiB5hG,KAAKihC,sBAAsBs8C,WAAW5wE,EAAMsP,EAAW,QAC9E,OAAO,IAAI2vB,GAAUrB,GAAeiC,qBAAsB5qC,EAAMuC,gBAAgBy9F,OAG5EnkB,WAAWikB,EAAkBG,G,0CACjC,MAAM31D,EAAew1D,EAAS16F,MAAM,KACpC,IACImlC,EADAH,EAA0B,KAG9B,GAA4B,IAAxBE,EAAalpC,OACfgpC,EAAUzB,GAAegC,uBACzBJ,EAAY,CAACD,EAAa,SACrB,GAA4B,IAAxBA,EAAalpC,OACtB,IACEgpC,EAAU3oC,SAAS6oC,EAAa,GAAI,MACpCC,EAAYD,EAAa,GAAGllC,MAAM,KAClC,MAAOhI,GACPgB,KAAKmkC,WAAW1iB,MAAMziB,GAI1B,OAAQgtC,GACN,KAAKzB,GAAegC,uBACpB,KAAKhC,GAAeiC,qBACpB,KAAKjC,GAAeu3D,kCACpB,KAAKv3D,GAAew3D,gCAClB,MACF,QACE,MAAM,IAAI9iG,MAAM,wBAGpB,GAAiB,MAAbktC,GAAqBA,EAAUnpC,QAAU,EAC3C,MAAM,IAAI/D,MAAM,0BAGlB,MAAM0N,EAAO/K,EAAMuB,eAAegpC,EAAU,IAAIxoC,OAC1CkU,EAAagqF,MAAAA,EAAAA,QAA0B7hG,KAAK89F,gBAClD,GAAkB,MAAdjmF,EACF,MAAM,IAAI5Y,MAAM,mBAGlB,IAAI00E,EAAyB,OAC7B,OAAQ3nC,GACN,KAAKzB,GAAegC,uBACpB,KAAKhC,GAAeu3D,kCAClBnuB,EAAM,SACN,MACF,KAAKppC,GAAeiC,qBACpB,KAAKjC,GAAew3D,gCAClB,MACF,QACE,MAAM,IAAI9iG,MAAM,wBAGpB,OAAOe,KAAKihC,sBAAsBw8C,WAAW9wE,EAAMkL,EAAY87D,MAG3DjlC,eAAeuU,EAAsB12C,G,0CACzC,MAAMu/B,EAAKlqC,EAAMuB,eAAe8/C,EAAUnX,IAAInoC,OACxCgJ,EAAO/K,EAAMuB,eAAe8/C,EAAUt2C,MAAMhJ,OAC5CooC,EAAMkX,EAAUlX,IAAMnqC,EAAMuB,eAAe8/C,EAAUlX,KAAKpoC,OAAS,KACnEy5E,QAAiBp9E,KAAKgiG,kBAAkB/+C,EAAUhX,eAAgBt/B,EAAMm/B,EAAIC,EAAKx/B,GACvF,OAAgB,MAAZ6wE,EACK,KAGFA,KAGHtwC,cAAcmW,EAAsB12C,G,0CAGxC,OAFAA,QAAYvM,KAAKuhG,oBAAoBh1F,GACrCA,QAAYvM,KAAKiiG,iBAAiBh/C,EAAUhX,eAAgB1/B,SAC/CvM,KAAK87F,eAAehvD,cAAcmW,EAAW12C,MAGtDuyC,iBAAiBojD,EAAqB31F,G,0CAC1C,GAAc,MAAV21F,EACF,MAAM,IAAIjjG,MAAM,cAGlB,MAAM2iG,EAAW,IAAIl/F,WAAWw/F,GAC1Bl2D,EAAU41D,EAAS,GACzB,IAAIO,EAAsB,KACtBC,EAAsB,KACtBC,EAAuB,KAE3B,OAAQr2D,GACN,KAAKzB,GAAe6B,yBACpB,KAAK7B,GAAe+B,yBAClB,GAAIs1D,EAAS5+F,QAAU,GAErB,OAAO,KAGTo/F,EAAUR,EAAS78F,MAAM,EAAG,IAC5Bs9F,EAAWT,EAAS78F,MAAM,GAAI,IAC9Bo9F,EAAUP,EAAS78F,MAAM,IACzB,MACF,KAAKwlC,GAAe8B,cAClB,GAAIu1D,EAAS5+F,QAAU,GAErB,OAAO,KAGTo/F,EAAUR,EAAS78F,MAAM,EAAG,IAC5Bo9F,EAAUP,EAAS78F,MAAM,IACzB,MACF,QACE,OAAO,KAGX,aAAa/E,KAAKgiG,kBAChBh2D,EACAm2D,EAAQx+F,OACRy+F,EAAQz+F,OACI,MAAZ0+F,EAAmBA,EAAS1+F,OAAS,KACrC4I,MAMEivD,aAAa1F,EAAa7hB,G,0CAC9B,IAAIquD,EAAO,EACX,MAAMC,EAAQtuD,EAAM6hB,EAAM,EACpB0sC,EAAa/8F,KAAK8mD,KAAK9mD,KAAKg9F,KAAKF,IACvC,GAAIC,EAAa,GACf,MAAM,IAAIvjG,MAAM,mDAGlB,MAAMyjG,EAAcj9F,KAAK8mD,KAAKi2C,EAAa,GACrCG,EAAOl9F,KAAKwvE,IAAI,EAAGutB,GAAc,EAIjCI,EAAY,IAAIlgG,iBAAiB1C,KAAKihC,sBAAsByiB,YAAYg/C,IAE9E,IAAI/6E,EAAwB,GAAnB+6E,EAAc,GACvB,IAAK,IAAIz/F,EAAI,EAAGA,EAAIy/F,EAAaz/F,IAC/Bq/F,GAAQM,EAAU3/F,GAAKwC,KAAKwvE,IAAI,EAAGttD,GACnCA,GAAK,EAMP,OAFA26E,GAAcK,EAEVL,GAAQC,EAEHviG,KAAKw7D,aAAa1F,EAAK7hB,GAIzB6hB,EAAMwsC,KAGTnF,YAAY5wF,G,0CAChB,IACE,MAAM6vF,QAAsBp8F,KAAKokC,aAAa85D,yBACxCpwD,QAAe9tC,KAAK29F,gBAAgBpxF,GAC1C,GAAqB,MAAjB6vF,GAAmC,MAAVtuD,EAC3B,OAAO,EAGT,MAAMj2B,QAAmB7X,KAAK0uC,eAAe,IAAI9C,GAAUwwD,GAAgBtuD,SACrE9tC,KAAKihC,sBAAsBy8C,oBAAoB7lE,GACrD,MAAO7Y,GACP,OAAO,EAGT,OAAO,KAIOi9F,SAAS1vF,EAAyB0J,G,iDACtCjW,KAAK6iG,eAAe9gE,GAAiByH,KAAMvzB,UAC7CjW,KAAKokC,aAAaw7D,uBAAuBrzF,EAAIyhC,OAAQ,CAAE/3B,OAAQA,WACtDjW,KAAK6iG,eAAe9gE,GAAiBo9D,UAAWlpF,UACzDjW,KAAKokC,aAAay7D,4BAA4BtzF,EAAIyhC,OAAQ,CAAE/3B,OAAQA,WAEpEjW,KAAKokC,aAAaw7D,uBAAuB,KAAM,CAAE3pF,OAAQA,UACzDjW,KAAKokC,aAAay7D,4BAA4B,KAAM,CAAE5pF,OAAQA,QAIxD4sF,eAAe9zB,EAA6B94D,G,0CAC1D,IAAI4sF,GAAiB,EACrB,GAAI9zB,IAAchtC,GAAiByH,KAAM,CAEvCq5D,EAAiC,aADN7iG,KAAKokC,aAAa0+D,gBAAgB,CAAE7sF,OAAQA,UAElE,GAAI84D,IAAchtC,GAAiBo9D,UAAW,CAEnD0D,SAD8B7iG,KAAKokC,aAAa2+D,mBAAmB,CAAE9sF,OAAQA,MACzCjW,KAAK+7F,oBAAoBiH,wBAE/D,OAAOH,KAGO3F,uBAAuBnuB,EAA6B94D,G,0CAClE,OAAO84D,IAAchtC,GAAiByH,WAC5BxpC,KAAKokC,aAAag7D,uBAAuB,CAAEnpF,OAAQA,UACnDjW,KAAKokC,aAAa6+D,4BAA4B,CAAEhtF,OAAQA,OAOtD+sC,WAAWr2C,EAAmBJ,G,0CAC1C,MAAMtE,EAAM,IAAIy6C,GAKhB,GAJAz6C,EAAIsE,UAAYvM,KAAKuhG,oBAAoBh1F,GACzCtE,EAAI6jC,SAAW9rC,KAAKihC,sBAAsByiB,YAAY,IACtDz7C,EAAI0E,WAAa3M,KAAKihC,sBAAsB+hB,WAAWr2C,EAAM1E,EAAI6jC,GAAI7jC,EAAIsE,IAAIuhC,QAEvD,MAAlB7lC,EAAIsE,IAAIwhC,OAAgB,CAC1B,MAAMuV,EAAU,IAAI5gD,WAAWuF,EAAI6jC,GAAGhoC,WAAamE,EAAI0E,KAAK7I,YAC5Dw/C,EAAQl8C,IAAI,IAAI1E,WAAWuF,EAAI6jC,IAAK,GACpCwX,EAAQl8C,IAAI,IAAI1E,WAAWuF,EAAI0E,MAAO1E,EAAI6jC,GAAGhoC,YAC7CmE,EAAI8jC,UAAY/rC,KAAKihC,sBAAsB0iB,KAAKL,EAAQ3/C,OAAQsE,EAAIsE,IAAIwhC,OAAQ,UAGlF,OAAO9lC,KAGK+5F,kBACZh2D,EACAr/B,EACAm/B,EACAC,EACAx/B,G,0CAEA,MAAM22F,QAAkBljG,KAAKuhG,oBAAoBh1F,GAC3C+0F,QAAethG,KAAKiiG,iBAAiBj2D,EAASk3D,GAEpD,GAAqB,MAAjB5B,EAAOvzD,QAAyB,MAAPhC,EAC3B,OAAO,KAGT,GAAIu1D,EAAOt1D,UAAYA,EACrB,OAAO,KAGT,GAAqB,MAAjBs1D,EAAOvzD,QAAyB,MAAPhC,EAAa,CACxC,MAAMuX,EAAU,IAAI5gD,WAAWopC,EAAGhoC,WAAa6I,EAAK7I,YACpDw/C,EAAQl8C,IAAI,IAAI1E,WAAWopC,GAAK,GAChCwX,EAAQl8C,IAAI,IAAI1E,WAAWiK,GAAOm/B,EAAGhoC,YACrC,MAAMs/C,QAAoBpjD,KAAKihC,sBAAsB0iB,KACnDL,EAAQ3/C,OACR29F,EAAOvzD,OACP,UAEF,GAAoB,OAAhBqV,EACF,OAAO,KAIT,WADwBpjD,KAAKihC,sBAAsBt5B,QAAQokC,EAAKqX,IAG9D,OADApjD,KAAKmkC,WAAW1iB,MAAM,eACf,KAIX,aAAazhB,KAAKihC,sBAAsBq8C,WAAW3wE,EAAMm/B,EAAIw1D,EAAOxzD,WAGxDyzD,oBAAoBh1F,G,0CAChC,GAAW,MAAPA,EACF,OAAOA,EAGT,MAAMuhC,QAAe9tC,KAAK09F,YAC1B,OAAc,MAAV5vD,EACKA,QAGI9tC,KAAK0pC,YAGNu4D,iBACZj2D,EACAz/B,G,0CAEA,GACEy/B,IAAYzB,GAAe6B,0BAC3B7/B,EAAIy/B,UAAYzB,GAAe8B,cAC/B,CAEA,IAAI82D,QAAkBnjG,KAAKokC,aAAag/D,kBAKxC,OAJiB,MAAbD,IACFA,EAAY,IAAIt1D,GAAmBthC,EAAIA,IAAKg+B,GAAe6B,gCACrDpsC,KAAKokC,aAAas7D,gBAAgByD,IAEnCA,EAGT,OAAO52F,KAGK20F,WAAW30F,G,0CACvB,MAAM82F,EAAS,IAAI3gG,WAAW,IACxBorC,QAAe9tC,KAAKihC,sBAAsBs6C,WAAWhvE,EAAIA,IAAK,MAAO,GAAI,UACzEwhC,QAAe/tC,KAAKihC,sBAAsBs6C,WAAWhvE,EAAIA,IAAK,MAAO,GAAI,UAG/E,OAFA82F,EAAOj8F,IAAI,IAAI1E,WAAWorC,IAC1Bu1D,EAAOj8F,IAAI,IAAI1E,WAAWqrC,GAAS,IAC5B,IAAIF,GAAmBw1D,EAAO1/F,WAGzB26F,WAAWj9D,EAAmBiiE,EAAiB,I,0CAC3D,MAAMC,EAAiB99F,KAAKs8C,IAAIgX,GAAgB/1D,QAAUyC,KAAKs8C,IAAI,GACnE,IAAIwY,EAAW90D,KAAK8mD,KAAK+2C,EAAiBC,GAE1C,MAAMC,EAAU9+F,MAAM9B,KAAK,IAAIF,WAAW2+B,IAE1C,GAAIk5B,EAAWgpC,EAD2B,EAAjBC,EAAQxgG,OAE/B,MAAM,IAAI/D,MAAM,gDAGlB,MAAMwkG,EAAmB,GACzB,IAAIC,EAAa,aAAiBF,EAAS,KAC3C,KAAOjpC,KAAY,CACjB,MAAMopC,EAAYD,EAAWE,IAAI7qC,GAAgB/1D,QACjD0gG,EAAaA,EAAWG,OAAO9qC,GAAgB/1D,QAC/CygG,EAAO1tF,KAAKgjD,GAAgB4qC,IAE9B,OAAOF,KAGKjC,YACZj1F,EACAuhC,G,0CAEA,IAAIg2D,EAAuB,KAC3B,GAA2B,KAAvBv3F,EAAIA,IAAIzI,WAAmB,CAC7B,MAAMu/F,QAAerjG,KAAKkhG,WAAW30F,GACrCu3F,QAAkB9jG,KAAKq2C,QAAQvI,EAAQu1D,OAClC,IAA2B,KAAvB92F,EAAIA,IAAIzI,WAGjB,MAAM,IAAI7E,MAAM,qBAFhB6kG,QAAkB9jG,KAAKq2C,QAAQvI,EAAQvhC,GAIzC,MAAO,CAAC,IAAIshC,GAAmBC,GAASg2D,MAG5B1G,oBAAoBnnF,G,gDAC1BjW,KAAKokC,aAAaw7D,uBAAuB,KAAM,CAAE3pF,OAAQA,UACzDjW,KAAKokC,aAAay7D,4BAA4B,KAAM,CAAE5pF,OAAQA,OAGxD0nF,gBAAgBpxF,EAA0B,M,0CACtD,MAAMuwF,QAAoB98F,KAAKokC,aAAa2/D,iCAC5C,GAAmB,MAAfjH,EACF,OAAOA,EAGT,MAAMhvD,QAAe9tC,KAAKokC,aAAam7D,iCACvC,GAAc,MAAVzxD,EACF,OAAO,KAMT,GAHW,MAAPvhC,IACFA,QAAYvM,KAAK0pC,UAER,MAAPn9B,EACF,OAAO,KAGT,IAAIy3F,EACJ,MAAMC,EAAe,IAAIr4D,GAAUkC,GACnC,GAAIm2D,EAAah4D,iBAAmB1B,GAAe8B,cACjD23D,QAAkBhkG,KAAK0uC,eAAeu1D,EAAc13F,OAC/C,IAAI03F,EAAah4D,iBAAmB1B,GAAe+B,yBAIxD,MAAM,IAAIrtC,MAAM,4BAJkE,CAClF,MAAMokG,QAAerjG,KAAKkhG,WAAW30F,GACrCy3F,QAAkBhkG,KAAK0uC,eAAeu1D,EAAcZ,IAItD,GAAiB,MAAbW,EACF,OAAO,KAET,MAAME,EAAqB,IAAIr2D,GAAmBm2D,GAElD,aADMhkG,KAAKokC,aAAa83D,+BAA+BgI,GAChDA,MA9vBT,IADC15D,IAAc,IAAM,c,mDACNqD,K,gEAsDf,IADCrD,IAAc,IAAM,e,uHAgDrB,IADCA,IAAc,IAAM,oB,uaCtQhB,MAAM25D,WAA6BtI,GACxBqB,uBAAuBnuB,G,4IACrC,MAAkB,cAAdA,SACI/uE,KAAK+7F,oBAAoBqI,wBACH,QAApB,QAAMpkG,KAAK0pC,gBAAS,eAAEsE,cAGnB,EAAMkvD,uBAAsB,UAACnuB,O,ICVlCs1B,G,uSCEG,MAAeC,GAGtBjkE,IAAO9zB,G,0CACX,OAAO,IAAI1N,SAASC,IAClBkB,KAAKukG,iBAAiBlkE,IAAI9zB,GAAMtE,IACnB,MAAPA,GAA2B,MAAZA,EAAIsE,GAIvBzN,EAAQ,MAHNA,EAAQmJ,EAAIsE,aAQd+mC,IAAI/mC,G,0CACR,OAAgC,aAAlBvM,KAAKqgC,IAAI9zB,OAGnBw0B,KAAKx0B,EAAatE,G,0CACtB,GAAW,MAAPA,EAEF,OAAO,IAAIpJ,SAAeC,IACxBkB,KAAKukG,iBAAiBryC,OAAO3lD,GAAK,KAChCzN,UAKFmJ,aAAeqtC,MACjBrtC,EAAMvD,MAAM9B,KAAKqF,IAGnB,MAAMu8F,EAAW,CAAE,CAACj4F,GAAMtE,GAC1B,OAAO,IAAIpJ,SAAeC,IACxBkB,KAAKukG,iBAAiBn9F,IAAIo9F,GAAU,KAClC1lG,aAKAozD,OAAO3lD,G,0CACX,OAAO,IAAI1N,SAAeC,IACxBkB,KAAKukG,iBAAiBryC,OAAO3lD,GAAK,KAChCzN,cC5CO,MAAM2lG,WAAmCH,GAAxD,c,oBACY,KAAAC,iBAAwB1lB,OAAO6lB,QAAQC,OCDpC,MAAMC,GACnBh4E,KAAKi4E,EAAoBC,EAAW,IAClC,MAAM9vF,EAAUjN,OAAOC,OAAO,GAAI,CAAEo3E,QAASylB,GAAcC,GAC3DjmB,OAAOU,QAAQD,YAAYtqE,ICHhB,MAAM+vF,GACnBn4E,KAAKi4E,EAAoBC,EAAW,IAClC,MAAM9vF,EAAUjN,OAAOC,OAAO,GAAI,CAAEo3E,QAASylB,GAAcC,GAC1DvjG,OAAeyjG,kCAAkChwF,KJLtD,SAAYqvF,GACV,YACA,oBACA,oBACA,kBACA,YACA,iCANF,CAAYA,KAAAA,GAAU,K,2SKStB,MAAMY,GAA0B,IAEjB,MAAMC,GAQnBplG,YACUokC,EACAE,EACA+gE,EACAC,GAHA,KAAAlhE,iBAAAA,EACA,KAAAE,aAAAA,EACA,KAAA+gE,uBAAAA,EACA,KAAAC,kBAAAA,EAXF,KAAAC,mBAAqB,IAAIt+F,IACzB,KAAAu+F,uBAAyB,IAAIv+F,IAI7B,KAAAw+F,YAA0B,KASlC17F,YACE,OAAI7J,KAAKulG,eAKuC,IAA9C38F,UAAUC,UAAUxC,QAAQ,eACgB,IAA5CuC,UAAUC,UAAUxC,QAAQ,WAE5BrG,KAAKulG,YAAc3lG,EAAW4lG,iBAE1BjkG,OAAekkG,KAASA,IAAIC,QAC7BnkG,OAAewH,OAClBH,UAAUC,UAAUxC,QAAQ,UAAY,EAExCrG,KAAKulG,YAAc3lG,EAAW+lG,gBACqB,IAA1C/8F,UAAUC,UAAUxC,QAAQ,SACrCrG,KAAKulG,YAAc3lG,EAAWgmG,eACyB,IAA9Ch9F,UAAUC,UAAUxC,QAAQ,aACrCrG,KAAKulG,YAAc3lG,EAAWimG,iBACpBtkG,OAAes9E,SAAuD,IAA7Cj2E,UAAUC,UAAUxC,QAAQ,YAC/DrG,KAAKulG,YAAc3lG,EAAWkmG,iBACwB,IAA7Cl9F,UAAUC,UAAUxC,QAAQ,cACrCrG,KAAKulG,YAAc3lG,EAAWmmG,kBArBvB/lG,KAAKulG,YA2BhBz7F,kBAEE,OADelK,EAAWI,KAAK6J,aAAaxC,cAC9BhD,QAAQ,YAAa,IAGrConB,gBACE,OAAO44E,GAAW2B,QAGpBC,YACE,OAAOjmG,KAAK6J,cAAgBjK,EAAW4lG,iBAGzCU,WACE,OAAOlmG,KAAK6J,cAAgBjK,EAAWkmG,gBAGzCK,SACE,OAAOnmG,KAAK6J,cAAgBjK,EAAWgmG,cAGzCQ,UACE,OAAOpmG,KAAK6J,cAAgBjK,EAAW+lG,eAGzCU,YACE,OAAOrmG,KAAK6J,cAAgBjK,EAAWimG,iBAGzCS,WACE,OAAOtmG,KAAK6J,cAAgBjK,EAAWmmG,gBAGzCQ,OACE,OAAO,EAGTC,gBACE,OAAO,EAGHC,a,0CACJ,SAAUhoB,GAAWioB,cACnB,OAAO,EAGT,GAAI1mG,KAAKsmG,WACP,OAAO,EAGT,MAAMK,EAAc3mG,KAAK4mG,kBAGzB,GADiB,MAAfD,GAAuB9nB,OAAOh1B,UAAUk2B,SAAS,CAAEn2E,KAAM+8F,IAAe3jG,OAAS,EAEjF,OAAO,EAIT,OADgB67E,OAAOh1B,UAAUk2B,SAAS,CAAEn2E,KAAM,QAAS5G,OAAS,KAItE6jG,cACE,OAAO,KAGTv2D,UAAU9hC,EAAaosD,GACrB6jB,GAAWqoB,aAAat4F,EAAKosD,IAAqC,IAA1BA,EAAQolB,eAGlDniD,wBACE,OAAOh/B,QAAQC,QAAQ2/E,GAAW5gD,yBAGpC04C,iBAAiB7tE,GACf,MAAsC,oBAAxBq+F,oBAGhBzwB,cACE,OAAO,EAGT0wB,UACEp9F,EACAyD,EACA+Y,EACAw0C,GAEA56D,KAAKkkC,iBAAiBtX,KAAK,YAAa,CACtCxG,KAAMA,EACN/Y,MAAOA,EACPzD,KAAMA,EACNgxD,QAASA,IAIbqsC,WACEp7E,EACAxe,EACA65F,EACAC,EACAv9F,EACAw9F,GAAa,GAEb,MAAMC,EAAW5hG,KAAKswD,MAAMtwD,KAAKC,SAAW0C,OAAOq5E,kBAUnD,OATAzhF,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCxG,KAAMghF,EAAa,KAAOv7E,EAC1By7E,KAAMF,EAAav7E,EAAO,KAC1Bxe,MAAOA,EACP65F,YAAaA,EACbC,WAAYA,EACZv9F,KAAMA,EACNy9F,SAAUA,IAEL,IAAIxoG,SAAkBC,IAC3BkB,KAAKqlG,mBAAmBj+F,IAAIigG,EAAU,CAAEvoG,QAASA,EAAS4S,KAAM,IAAItF,UAIxE8gB,QACE,OAAO,EAGTgR,aACE,OAAO,EAGTi1C,gBAAgB/sD,EAAcw0C,GAC5B,IAAIlyD,EAAMnH,OACNgmG,EAAMhmG,OAAO6H,SACbwxD,IAAYA,EAAQr5D,QAAUq5D,EAAQlyD,MACxCA,EAAMkyD,EAAQr5D,QAAUq5D,EAAQlyD,IAChC6+F,EAAM7+F,EAAIU,UACDwxD,GAAWA,EAAQ2sC,MAC5BA,EAAM3sC,EAAQ2sC,KAEhB,MAAMn0B,IAAWxY,KAAYA,EAAQwY,SAC/Bo0B,EAAkB5sC,GAAWA,EAAQ4sC,QAAU5sC,EAAQ4sC,QAAU,KAEvE,GAAIxnG,KAAKsmG,WACPhlB,GAAUmmB,iBAAiB,kBAAmBrhF,GAAMrnB,MAAK,KAClDq0E,GAA2C,MAA/BpzE,KAAKmlG,wBACpBnlG,KAAKmlG,uBAAuB/+E,EAAMohF,WAGjC,GACLxnG,KAAKimG,aACJv9F,EAAYE,UAAU8+F,WACtBh/F,EAAYE,UAAU8+F,UAAUC,UAEhCj/F,EAAYE,UAAU8+F,UAAUC,UAAUvhF,GAAMrnB,MAAK,KAC/Cq0E,GAA2C,MAA/BpzE,KAAKmlG,wBACpBnlG,KAAKmlG,uBAAuB/+E,EAAMohF,WAGjC,GAAK9+F,EAAYk/F,eAAkBl/F,EAAYk/F,cAAcC,QAEjEn/F,EAAYk/F,cAAcC,QAAQ,OAAQzhF,GACtCgtD,GAA2C,MAA/BpzE,KAAKmlG,wBACpBnlG,KAAKmlG,uBAAuB/+E,EAAMohF,QAE/B,GAAID,EAAIO,uBAAyBP,EAAIO,sBAAsB,QAAS,CACrE9nG,KAAKkmG,YAAuB,KAAT9/E,IACrBA,EAAO,MAGT,MAAM2hF,EAAWR,EAAIl+F,cAAc,YACnC0+F,EAASC,YAAsB,MAAR5hF,GAAyB,KAATA,EAAc,IAAMA,EAE3D2hF,EAASE,MAAMC,SAAW,QAC1BX,EAAI17E,KAAKs8E,YAAYJ,GACrBA,EAASK,SAET,IAEMb,EAAIc,YAAY,UAAYj1B,GAA2C,MAA/BpzE,KAAKmlG,wBAC/CnlG,KAAKmlG,uBAAuB/+E,EAAMohF,GAEpC,MAAOxoG,GAEP8iD,QAAQE,KAAK,4BAA6BhjD,G,QAE1CuoG,EAAI17E,KAAKy8E,YAAYP,KAKrB70B,kBAAkBtY,G,0CACtB,IAAIlyD,EAAMnH,OACNgmG,EAAMhmG,OAAO6H,SAQjB,GAPIwxD,IAAYA,EAAQr5D,QAAUq5D,EAAQlyD,MACxCA,EAAMkyD,EAAQr5D,QAAUq5D,EAAQlyD,IAChC6+F,EAAM7+F,EAAIU,UACDwxD,GAAWA,EAAQ2sC,MAC5BA,EAAM3sC,EAAQ2sC,KAGZvnG,KAAKsmG,WACP,aAAahlB,GAAUmmB,iBAAiB,qBACnC,GACLznG,KAAKimG,aACJv9F,EAAYE,UAAU8+F,WACtBh/F,EAAYE,UAAU8+F,UAAUa,SAEjC,aAAc7/F,EAAYE,UAAU8+F,UAAUa,WACzC,GAAIhB,EAAIO,uBAAyBP,EAAIO,sBAAsB,SAAU,CAC1E,MAAMC,EAAWR,EAAIl+F,cAAc,YAEnC0+F,EAASE,MAAMC,SAAW,QAC1BX,EAAI17E,KAAKs8E,YAAYJ,GACrBA,EAASS,QACT,IAEE,GAAIjB,EAAIc,YAAY,SAClB,OAAON,EAAS76F,MAElB,MAAOlO,GAEP8iD,QAAQE,KAAK,8BAA+BhjD,G,QAE5CuoG,EAAI17E,KAAKy8E,YAAYP,IAGzB,OAAO,QAGTU,qBAAqBpB,EAAkBqB,GACrC,GAAI1oG,KAAKqlG,mBAAmB/xD,IAAI+zD,GAAW,CACtBrnG,KAAKqlG,mBAAmBhlE,IAAIgnE,GACpCvoG,QAAQ4pG,GACnB1oG,KAAKqlG,mBAAmBziE,OAAOykE,GAIjCrnG,KAAKqlG,mBAAmBp+F,SAAQ,CAAC47B,EAAKt2B,MACxB,IAAIH,MAAOkuC,UAAYzX,EAAInxB,KAAK4oC,UAClC2qD,IACRjlG,KAAKqlG,mBAAmBziE,OAAOr2B,MAK/Bo8F,6BACJtB,EACAuB,EACAl6F,G,0CAEA,IAAIk3B,GAAS,EACb,GAAI5lC,KAAKslG,uBAAuBhyD,IAAI+zD,GAAW,CAC7C,MAAMwB,EAAa7oG,KAAKslG,uBAAuBjlE,IAAIgnE,UACzCwB,EAAWC,WAAWF,EAAUl6F,MACxC1O,KAAKslG,uBAAuB1iE,OAAOykE,GACnCzhE,GAAS,GAYb,OAPA5lC,KAAKslG,uBAAuBr+F,SAAQ,CAAC47B,EAAKt2B,MAC5B,IAAIH,MAAOkuC,UAAYzX,EAAInxB,KAAK4oC,UAClC2qD,IACRjlG,KAAKslG,uBAAuB1iE,OAAOr2B,MAIhCq5B,KAGHmjE,oB,0CAEJ,MAAwB,mBADGtqB,GAAW2C,mBACrB4nB,MAIbhpG,KAAKimG,aACA5iG,gBAAgBo8E,QAAQF,QAAQ0pB,kBAAkBx7C,QAAQzmD,MAAM,KAAK,GAAI,KAAO,OAM3Fo9F,wBACE,OAAOpkG,KAAKolG,oBAGdwB,kBACE,OAAKrlG,OAAes9E,OAAOqqB,eAAiBlpG,KAAKimG,YACxC,UACEjmG,KAAKomG,WAA4B,oBAARX,KAAuBA,IAAIyD,cACtD,gBAGF,KAGTlG,wBACE,OAAO,G,kmBC3VI,MAAMmG,WCEd,MAqELrpG,YACYspG,EACAC,EACAC,GAFA,KAAAF,eAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAC,eAAAA,EAvEJ,KAAAC,QAAU,IAAIC,GAAA,EAAsB,GAC5C,KAAA5nC,QAA8B5hE,KAAKupG,QAAQn6C,eAE3C,KAAAq6C,4BAAwC,CAAC,MAGzC,KAAAC,YAAc,IAAI3iG,IAAoB,CACpC,CAAC,KAAM,aACP,CAAC,KAAM,gBACP,CAAC,KAAM,cACP,CAAC,KAAM,aACP,CAAC,KAAM,SACP,CAAC,KAAM,kBACP,CAAC,KAAM,UACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,WACP,CAAC,KAAM,YACP,CAAC,KAAM,WACP,CAAC,QAAS,qBACV,CAAC,QAAS,mBACV,CAAC,KAAM,aACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,SACP,CAAC,KAAM,SACP,CAAC,MAAO,mBACR,CAAC,KAAM,YACP,CAAC,KAAM,SACP,CAAC,KAAM,UACP,CAAC,KAAM,YACP,CAAC,KAAM,UACP,CAAC,KAAM,oBACP,CAAC,KAAM,YACP,CAAC,KAAM,OACP,CAAC,KAAM,WACP,CAAC,KAAM,8BACP,CAAC,KAAM,SACP,CAAC,KAAM,OACP,CAAC,KAAM,kBACP,CAAC,KAAM,aACP,CAAC,KAAM,cACP,CAAC,KAAM,UACP,CAAC,KAAM,kBACP,CAAC,KAAM,cACP,CAAC,KAAM,iBACP,CAAC,KAAM,UACP,CAAC,QAAS,uBACV,CAAC,QAAS,aACV,CAAC,KAAM,UACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,cACP,CAAC,KAAM,gCACP,CAAC,KAAM,UACP,CAAC,KAAM,WACP,CAAC,KAAM,OACP,CAAC,KAAM,UACP,CAAC,KAAM,cACP,CAAC,KAAM,cACP,CAAC,QAAS,YACV,CAAC,QAAS,YAIF,KAAA4iG,gBAAuB,GACvB,KAAAC,eAAsB,GAO9B5pG,KAAKopG,eAAiBA,EAAe/kG,QAAQ,IAAK,KAG9CmF,KAAKq4D,G,0CACT,GAAI7hE,KAAK6B,OACP,MAAM,IAAI5C,MAAM,6BAElB,GAAwC,MAApCe,KAAKypG,6BAAmF,IAA5CzpG,KAAKypG,4BAA4BzmG,OAC/E,MAAM,IAAI/D,MAAM,wCAGlBe,KAAK6B,QAAS,EACd7B,KAAK6pG,kBAA8B,MAAVhoC,EAAiBA,EAAS7hE,KAAKopG,eACxDppG,KAAKupG,QAAQlkD,KAAKrlD,KAAK6pG,mBAEvB,IACE7pG,KAAK0H,SAAW,IAAIoiG,KAAKC,SAAS/pG,KAAK6pG,kBAAmB,CACxDG,SAAS,EACTC,YAAa,SAEf,SACAjqG,KAAK0H,SAAW,MAGwD,IAAtE1H,KAAKypG,4BAA4BpjG,QAAQrG,KAAK6pG,qBAChD7pG,KAAK6pG,kBAAoB7pG,KAAK6pG,kBAAkB9kG,MAAM,EAAG,IAEiB,IAAtE/E,KAAKypG,4BAA4BpjG,QAAQrG,KAAK6pG,qBAChD7pG,KAAK6pG,kBAAoB7pG,KAAKypG,4BAA4B,KAIjC,MAAzBzpG,KAAKqpG,yBACDrpG,KAAKkqG,aAAalqG,KAAK6pG,kBAAmB7pG,KAAK4pG,gBACjD5pG,KAAK6pG,oBAAsB7pG,KAAKypG,4BAA4B,WACxDzpG,KAAKkqG,aAAalqG,KAAKypG,4BAA4B,GAAIzpG,KAAK2pG,sBAKxEz4F,EAAE9R,EAAY+qG,EAAaC,EAAaC,GACtC,OAAOrqG,KAAKsqG,UAAUlrG,EAAI+qG,EAAIC,EAAIC,GAGpCC,UAAUlrG,EAAY+qG,EAAaC,EAAaC,GAC9C,IAAIzkE,EAuBJ,OApBEA,EADE5lC,KAAK4pG,eAAep0F,eAAepW,IAAOY,KAAK4pG,eAAexqG,GACvDY,KAAK4pG,eAAexqG,GAEpBY,KAAK2pG,gBAAgBn0F,eAAepW,IAAOY,KAAK2pG,gBAAgBvqG,GAChEY,KAAK2pG,gBAAgBvqG,GAErB,GAGI,KAAXwmC,IACQ,MAANukE,IACFvkE,EAASA,EAAO5+B,MAAM,UAAUhC,KAAKmlG,IAE7B,MAANC,IACFxkE,EAASA,EAAO5+B,MAAM,UAAUhC,KAAKolG,IAE7B,MAANC,IACFzkE,EAASA,EAAO5+B,MAAM,UAAUhC,KAAKqlG,KAIlCzkE,EAGKskE,aAAaroC,EAAgB0oC,G,0CACzC,MAAMC,EAAkB3oC,EAAOx9D,QAAQ,IAAK,KACtComG,QAAgBzqG,KAAKspG,eAAekB,GAC1C,IAAK,MAAMjjG,KAAQkjG,EAEjB,GAAKA,EAAQj1F,eAAejO,KAG5BgjG,EAAYhjG,GAAQkjG,EAAQljG,GAAMyN,QAE9By1F,EAAQljG,GAAMmjG,cAChB,IAAK,MAAMC,KAAaF,EAAQljG,GAAMmjG,aAAc,CAClD,IACGD,EAAQljG,GAAMmjG,aAAal1F,eAAem1F,KAC1CF,EAAQljG,GAAMmjG,aAAaC,GAAWC,QAEvC,SAGF,MAAMC,EAAe,MAAQF,EAAUniG,cAAgB,MACvD,IAAIsiG,EAAiBL,EAAQljG,GAAMmjG,aAAaC,GAAWC,QACpC,OAAnBE,GAA8C,OAAnBA,GAA8C,OAAnBA,IACxDA,EAAiB,MAAQA,EAAiB,MAE5CP,EAAYhjG,GAAQgjG,EAAYhjG,GAAMlD,QACpC,IAAIsB,OAAOklG,EAAc,KACzBC,SD5KVhrG,YAAYspG,GACV99F,MAAM89F,EAAgB,MAAaoB,GAA4B,mCAE7D,MAAMjkF,QAAamF,MAAM1rB,KAAKqpG,iBAAmBmB,EAAkB,kBACnE,aAAajkF,EAAK8F,YAIpBrsB,KAAKypG,4BAA8B,CACjC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,SAIJv4F,EAAE9R,EAAY+qG,EAAaC,EAAaC,GACtC,OAAOrqG,KAAKsqG,UAAUlrG,EAAI+qG,EAAIC,EAAIC,GAGpCC,UAAUlrG,EAAY+qG,EAAaC,EAAaC,GAC9C,GAA6B,MAAzBrqG,KAAKqpG,iBAA0B,CACjC,MAAMqB,EAAyB,GAW/B,OAVU,MAANP,GACFO,EAAa30F,KAAKo0F,GAEV,MAANC,GACFM,EAAa30F,KAAKq0F,GAEV,MAANC,GACFK,EAAa30F,KAAKs0F,GAGhBK,EAAa1nG,OACR67E,OAAO8B,KAAKoqB,WAAW3rG,EAAIsrG,GAE3B7rB,OAAO8B,KAAKoqB,WAAW3rG,GAIlC,OAAOkM,MAAMg/F,UAAUlrG,EAAI+qG,EAAIC,EAAIC,I,2SEtFhC,MAAMW,GACXlrG,YAAoBmhC,GAAA,KAAAA,sBAAAA,EAEdgqE,iBAAiBC,EAAW,I,0CAChC,MAAM/J,QAAoBnhG,KAAKihC,sBAAsByiB,YAAYwnD,GAC3D3+F,QAAYvM,KAAKihC,sBAAsBk6C,KAC3CgmB,EACA,sBACA,YACA,GACA,UAEF,OAAO,IAAItzD,GAAmBthC,OCfnB,MAAM4+F,WAAoC7G,GAAzD,c,oBACY,KAAAC,iBAAyB1lB,OAAO6lB,QAAgB0G,S,2SCM5D,MAAM,GACI,qBADJ,GAEQ,UAGP,MAAMC,WCZN,QDiBLvrG,YACUg8F,EACAwP,GAERhgG,QAHQ,KAAAwwF,eAAAA,EACA,KAAAwP,qBAAAA,EANF,KAAAr/E,MAAQ,IAAIllB,IACZ,KAAAwkG,aAAe,IAAI9G,GACnB,KAAA+G,eAAiB,IAAIL,GASvB9qE,IAAO9zB,G,0CACX,GAAIvM,KAAKisB,MAAMqnB,IAAI/mC,GACjB,OAAOvM,KAAKisB,MAAMoU,IAAI9zB,GAGxB,MAAM6+F,QAAgBprG,KAAKyrG,sBAAsBzrG,KAAK0rG,oBACtD,OAAe,MAAXN,GAAoBrjG,OAAO5I,KAAKisG,GAASx0C,SAASrqD,IAItDvM,KAAKisB,MAAM7kB,IAAImF,EAAK6+F,EAAQ7+F,IACrBvM,KAAKisB,MAAMoU,IAAI9zB,IAJb,QAOL+mC,IAAI/mC,G,0CACR,OAAgC,aAAlBvM,KAAKqgC,IAAI9zB,OAGnBw0B,KAAKx0B,EAAatE,G,gDACX,MAAPA,EACFjI,KAAKisB,MAAM2W,OAAOr2B,GAElBvM,KAAKisB,MAAM7kB,IAAImF,EAAKtE,GAGtB,MAAM0jG,QAAsB3rG,KAAK0rG,mBAC3BE,EAA0D,QAA1C,QAAM5rG,KAAKyrG,gBAAgBE,UAAe,QAAI,GACpEC,EAAar/F,GAAOtE,QACdjI,KAAK6rG,gBAAgBD,EAAcD,MAGrCz5C,OAAO3lD,G,gDACLvM,KAAK+gC,KAAKx0B,EAAK,SAGjBk/F,gBAAgB39D,G,0CACpB,MAAM62D,QAAc3kG,KAAKurG,aAAalrE,IAAY,IAElD,GAAa,MAATskE,EACF,OAAO,KAGT,MAAMmH,QAAoB9rG,KAAK87F,eAAehvD,cAAc,IAAIlB,GAAU+4D,GAAQ72D,GAClF,OAAmB,MAAfg+D,SAEI9rG,KAAK+rG,iBAAiB,YACtB/rG,KAAKurG,aAAar5C,OAAO,IACxB,MAEFj1B,KAAKgqC,MAAM6kC,MAGdD,gBAAgBT,EAAc7+F,G,0CAClC,MAAMy/F,EAAc/uE,KAAKC,UAAUkuE,GAC7Ba,QAAmBjsG,KAAK87F,eAAezlD,QAAQ21D,EAAaz/F,GAElE,GAAkB,MAAd0/F,EACF,aAAajsG,KAAKurG,aAAar5C,OAAO,UAElClyD,KAAKurG,aAAaxqE,KAAK,GAAiBkrE,EAAW7lE,oBAGrDslE,mB,0CACJ,IAAIQ,QAAmBlsG,KAAKwrG,eAAenrE,IAAI,IAK/C,OAJiB,MAAb6rE,GAAsD,GAAjCnkG,OAAO5I,KAAK+sG,GAAWlpG,SAC9CkpG,QAAkBlsG,KAAKsrG,qBAAqBL,yBACtCjrG,KAAK+rG,iBAAiBG,IAEvBr+D,GAAmBs+D,aACxBpkG,OAAO9H,OAAO4tC,GAAmBlpC,UAAWoD,OAAOqkG,0BAA0BF,QAI3EH,iBAAiBM,G,0CACR,MAATA,QACIrsG,KAAKwrG,eAAet5C,OAAO,UAE3BlyD,KAAKwrG,eAAezqE,KAAK,GAAasrE,OEvGlD,IAAYC,IAAZ,SAAYA,GACV,cACA,cACA,kBAHF,CAAYA,KAAAA,GAAe,KCGpB,MAAMC,GAUXzsG,YAAY8tE,GANZ,KAAA4+B,SAA2C,GAG3C,KAAAt/B,sBAAkC,GAClC,KAAA4B,gBAAgD,GAG9C9uE,KAAK4tE,QAAUA,G,kuBCsBnB,MAAM,GACG,QADH,GAEI,SAFJ,GAGmB,wBAHnB,GAIU,eAJV,GAKiB,sBALjB,GAMa,kBAGb,GACK,kBADL,GAEU,uBAFV,GAGO,aAGN,MAAM,GAcX9tE,YACYygC,EACA8rC,EACAogC,EACAtoE,EACAuoE,EACApgC,EACAqgC,GAA2B,GAN3B,KAAApsE,eAAAA,EACA,KAAA8rC,qBAAAA,EACA,KAAAogC,qBAAAA,EACA,KAAAtoE,WAAAA,EACA,KAAAuoE,sBAAAA,EACA,KAAApgC,aAAAA,EACA,KAAAqgC,gBAAAA,EAhBZ,KAAAH,SAAW,IAAIt9C,GAAA,EAAgD,IAC/D,KAAAjL,cAAgB,IAAIiL,GAAA,EAAwB,MAC5C,KAAAG,sBAAwB,IAAIH,GAAA,GAAyB,GAE7C,KAAA09C,eAAgB,EAChB,KAAAC,oBAAqB,EAErB,KAAAC,iBAAmB,IAAI/lG,IAY7B/G,KAAKikD,cAAcC,WAAiBjuC,GAAW,mCAC/B,MAAVA,GAA2D,GAAzCjW,KAAKqvD,sBAAsBI,aAE5B,MAAVx5C,GACTjW,KAAKqvD,sBAAsBhK,MAAK,GAMlCrlD,KAAKqvD,sBAAsBhK,KAA0C,aAA9BrlD,KAAK+8F,6BAI1CvzF,O,0CACAxJ,KAAK4sG,uBAIC5sG,KAAK0sG,sBAAsBngC,0BAC7BvsE,KAAK0sG,sBAAsB//B,iBAG7B3sE,KAAK6N,QAAQ9O,MAAY8O,GAAU,mCAC1B,MAATA,QACI7N,KAAK+sG,SAAS,IAAIR,GAA8BvsG,KAAKgtG,kBAE3DhtG,KAAK6sG,oBAAqB,aAGxB7sG,KAAKitG,mBACXjtG,KAAK4sG,eAAgB,MAGjBK,mB,0CACAjtG,KAAK6sG,2BAIH7sG,KAAKktG,aAAmBr/F,GAAU,mC,MACtCA,EAAMq/D,sBACiE,QAApE,QAAMltE,KAAKugC,eAAeF,IAAc,WAA4B,QAAI,GAC3E,IAAK,MAAMp9B,KAAK4K,EAAMq/D,sBACX,MAALjqE,UACIjD,KAAKmtG,oBAAoBt/F,EAAMq/D,sBAAsBjqE,KAG/D,MAAMmqG,QAAyBptG,KAAKugC,eAAeF,IAAY,IAO/D,OANwB,MAApB+sE,IACFv/F,EAAMw/F,aAAeD,SAEjBptG,KAAKstG,eACXttG,KAAKikD,cAAcoB,KAAKx3C,EAAMw/F,cAEvBx/F,WAILs/F,oBAAoBl3F,G,0CACV,MAAVA,UAGEjW,KAAKktG,aAAmBr/F,GAAU,mCACtCA,EAAM2+F,SAASv2F,GAAUjW,KAAKS,gBAC9B,MAAM8sG,QAAoBvtG,KAAKwtG,mBAAmB,CAAEv3F,OAAQA,IAE5D,OADApI,EAAM2+F,SAASv2F,GAAQyR,QAAU6lF,EAAY7lF,QACtC7Z,WAIL03B,WAAW6nC,G,0CACfA,QAAgBptE,KAAKytG,0BAA0BrgC,SACzCptE,KAAKktG,aAAmBr/F,GAAU,mCAItC,OAHAA,EAAMq/D,sBAAsBn3D,KAAKq3D,EAAQ1lD,QAAQzR,cAC3CjW,KAAKugC,eAAeQ,KAAK,GAA4BlzB,EAAMq/D,uBACjEr/D,EAAM2+F,SAASp/B,EAAQ1lD,QAAQzR,QAAUm3D,EAClCv/D,aAEH7N,KAAK0tG,0BAA0BtgC,SAC/BptE,KAAK2tG,eAAc,IAAIvhG,MAAOkuC,UAAW,CAAErkC,OAAQm3D,EAAQ1lD,QAAQzR,eACnEjW,KAAK4tG,cAAcxgC,EAAQ1lD,QAAQzR,QACzCjW,KAAKikD,cAAcoB,KAAK+nB,EAAQ1lD,QAAQzR,WAGpC23F,cAAc33F,G,0CAClBjW,KAAK6tG,wCACC7tG,KAAKktG,aAAmBr/F,GAAU,mCAItC,OAHAA,EAAMw/F,aAAep3F,QACfjW,KAAKugC,eAAeQ,KAAK,GAAmB9qB,GAClDjW,KAAKikD,cAAcoB,KAAKx3C,EAAMw/F,cACvBx/F,aAGH7N,KAAKstG,kBAGPQ,MAAMlzC,G,gDACVA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,gCAC9ChuG,KAAKiuG,sBAAsBrzC,EAAQ3kD,QACrC2kD,EAAQ3kD,UAA+B,QAAnB,QAAMjW,KAAK6N,eAAQ,eAAEw/F,sBACrCrtG,KAAKkuG,kCAGPluG,KAAKmuG,sBAAsBvzC,MAAAA,OAAO,EAAPA,EAAS3kD,QAC1CjW,KAAKouG,wBAAwBxzC,MAAAA,OAAO,EAAPA,EAAS3kD,cAChCjW,KAAKstG,kBAGP7lC,eAAe7M,G,kDAEnB,OADAA,QAAgB56D,KAAKquG,8BAA8BzzC,GACJ,QAAvC,EAA+B,QAAhC,QAAO56D,KAAKsuG,WAAW1zC,UAAS,eAAE/2B,cAAM,eAAEzsB,eAG7CowD,eAAet6D,EAAe0tD,G,0CAClCA,QAAgB56D,KAAKquG,8BAA8BzzC,GACnD,MAAMwS,QAAgBptE,KAAKsuG,WAAW1zC,GACtCwS,EAAQvpC,OAAOzsB,YAAclK,QACvBlN,KAAKuuG,YAAYnhC,EAASxS,MAG5B4zC,qBAAqB5zC,G,kDACzB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAErhG,YAAI,eAAEyhE,qBAGLqgC,qBAAqBvhG,EAAY0tD,G,0CACrC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQzgE,KAAKyhE,kBAAoBlhE,QAC3BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCU,kBAAkB9zC,G,kDACtB,OAEoB,QADjB,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFhmC,sBAAc,YAIhBimC,kBAAkB1hG,EAAgB0tD,G,0CACtC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQjF,eAAiBz7D,QACnBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCrnC,kBAAkB1M,G,kDAEtB,OADAA,QAAgB56D,KAAKquG,8BAA8BzzC,GACH,QAAxC,EAA+B,QAAhC,QAAO56D,KAAKsuG,WAAW1zC,UAAS,eAAElzC,eAAO,eAAEinD,kBAG9ChoC,kBAAkBz5B,EAAe0tD,G,0CACrCA,QAAgB56D,KAAKquG,8BAA8BzzC,GACnD,MAAMwS,QAAgBptE,KAAKsuG,WAAW1zC,GACtCwS,EAAQ1lD,QAAQinD,eAAiBzhE,QAC3BlN,KAAKuuG,YAAYnhC,EAASxS,MAG5B2M,sBAAsB3M,G,kDAE1B,OADAA,QAAgB56D,KAAKquG,8BAA8BzzC,GACN,QAArC,EAA+B,QAAhC,QAAO56D,KAAKsuG,WAAW1zC,UAAS,eAAEz7D,YAAI,eAAEkvE,sBAG3CznC,sBAAsB15B,EAAe0tD,G,0CACzCA,QAAgB56D,KAAKquG,8BAA8BzzC,GACnD,MAAMwS,QAAgBptE,KAAKsuG,WAAW1zC,GACtCwS,EAAQjuE,KAAKkvE,mBAAqBnhE,QAC5BlN,KAAKuuG,YAAYnhC,EAASxS,MAG5Bk0C,2BAA2Bl0C,G,oDAC/B,OAEuC,QADpC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEuoD,+BAAuB,YAInC8gC,2BAA2B7hG,EAAgB0tD,G,0CAC/C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASuoD,wBAA0B/gE,QACrClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCvvD,6BAA6Bwb,G,oDACjC,OAEyC,QADtC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEmjD,iCAAyB,YAIrCmmC,6BAA6B9hG,EAAgB0tD,G,0CACjD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASmjD,0BAA4B37D,QACvClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCM,+BAA+Br0C,G,kDACnC,OAEiC,QAD9B,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtF7lC,mCAA2B,YAI7BomC,+BAA+BhiG,EAAgB0tD,G,0CACnD,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQ9E,4BAA8B57D,QAChClN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCh8B,iCAAiC/X,G,kDACrC,OAEmC,QADhC,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtF5lC,qCAA6B,YAI/BomC,iCAAiCjiG,EAAgB0tD,G,0CACrD,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQ7E,8BAAgC77D,QAClClN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCr8B,mBAAmB1X,G,oDACvB,OAE+B,QAD5B,EACW,QADZ,EAA4F,QAA5F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCAA2B,eACxFtoF,gBAAQ,eAAEwoD,uBAAe,YAI3BjoC,mBAAmB/4B,EAAgB0tD,G,0CACvC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ1nD,SAASwoD,gBAAkBhhE,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCoB,iBAAiBx0C,G,gDACrB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAE3lC,iBAGCqmC,iBAAiBniG,EAAe0tD,G,0CACpC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQ5E,cAAgB97D,QAClBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC5L,mBAAmBnoC,G,oDACvB,OAE+B,QAD5B,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEujD,uBAAe,YAI3BqmC,mBAAmBpiG,EAAgB0tD,G,0CACvC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASujD,gBAAkB/7D,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCxZ,oBAAoBv6B,G,0CACxB,eAAY56D,KAAKqpC,mBAAmBuxB,aAK3B56D,KAAKuvG,wBAAwB30C,YAC7B56D,KAAKwvG,8BAA8B50C,QAIxC20C,wBAAwB30C,G,gDAC5B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C,OAAuB,QAAhB,EAAAvhC,MAAAA,OAAO,EAAPA,EAAS1lD,eAAO,eAAE+d,wBAGrBmsC,wBAAwB1kE,EAAgB0tD,G,0CAC5C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQ+d,qBAAuBv4B,QACjClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCa,8BAA8B50C,G,gDAClC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAG5C,GAAmB,QAAf,EAAAvhC,EAAQ1lD,eAAO,eAAE+nF,2BACnB,OAAO,EAKT,MAAMhrF,QAAsBzkB,KAAKy4D,iBAAiBmC,GAClD,GAAqB,MAAjBn2C,EACF,OAAO,EAGT,IAAK,MAAMrlB,KAAM2I,OAAO5I,KAAKslB,GAAgB,CAC3C,MAAMS,EAAIT,EAAcrlB,GACxB,GAAI8lB,EAAEjK,SAAWiK,EAAErH,kBAAoBqH,EAAEosC,eACvC,OAAO,EAIX,OAAO,KAGHugB,8BAA8B3kE,EAAgB0tD,G,0CAClD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQ+nF,2BAA6BviG,QACvClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC57B,kBAAkBnY,G,oDACtB,OAK6B,QAJ1B,EAIU,QAJX,EAIC,QAJD,QACQ56D,KAAKsuG,WACTtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCAE7C,eAAEhqF,gBAAQ,eAAEwjD,sBAAc,QAAI,QAI7BymC,kBAAkBziG,EAAe0tD,G,0CACrC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASwjD,eAAiBh8D,QAC5BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCE,sBAAsBh1C,G,kDAC1B,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhqF,gBAAQ,eAAEyjD,sBAGT0mC,sBAAsB3iG,EAAiB0tD,G,0CAC3C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASyjD,mBAAqBj8D,QAChClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxC59C,gCAAgC8I,G,kDACpC,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjnF,eAAO,eAAE0hD,gCAGRxX,gCAAgC1kD,EAAgB0tD,G,0CACpD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQ0hD,6BAA+Bl8D,QACzClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxC5R,mBAAmBniC,G,kDACvB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE7uG,YAAI,eAAEmvE,mBAGL0tB,mBAAmB9uF,EAA2B0tD,G,0CAClD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAQ5C,GANA5gC,EAAQjuE,KAAKmvE,gBAAkBphE,QACzBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAGxCpzC,EAAQ3kD,QAAUjW,KAAKikD,cAAcwL,WAAY,CACnD,MAAMqgD,EAAqB,MAAT5iG,EAGdlN,KAAKqvD,sBAAsBI,YAAcqgD,GAC3C9vG,KAAKqvD,sBAAsBhK,KAAKyqD,OAKhC1Q,uBAAuBxkC,G,0CAK3B,OAAuB,OAAnBA,OAJJA,EAAU56D,KAAK+tG,iBACb/tG,KAAK+tG,iBAAiBnzC,EAAS,CAAEmU,UAAW,eACtC/uE,KAAK+vG,qCAEF,EAAPn1C,EAAS3kD,QACJ,WAEIjW,KAAKqsE,qBAAqBhsC,IACrC,GAAGu6B,EAAQ3kD,SAAS,KACpB2kD,MAIEglC,uBAAuB1yF,EAAe0tD,G,0CAKnB,OAAnBA,OAJJA,EAAU56D,KAAK+tG,iBACb/tG,KAAK+tG,iBAAiBnzC,EAAS,CAAEmU,UAAW,eACtC/uE,KAAK+vG,qCAEF,EAAPn1C,EAAS3kD,gBAGPjW,KAAKgwG,qBAAqB,GAAqB9iG,EAAO0tD,OAGxDq1C,sBAAsBr1C,G,0CAE1B,OAAuB,OAAnBA,OADJA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK+vG,qCACzC,EAAPn1C,EAAS3kD,QACJ,WAEIjW,KAAKqsE,qBAAqBhsC,IACrC,GAAGu6B,MAAAA,OAAO,EAAPA,EAAS3kD,SAAS,KACrB2kD,MAIEs1C,sBAAsBhjG,EAAe0tD,G,0CAElB,OAAnBA,OADJA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK+vG,qCACzC,EAAPn1C,EAAS3kD,gBAGPjW,KAAKgwG,qBAAqB,GAAuB9iG,EAAO0tD,OAG1DqoC,4BAA4BroC,G,0CAKhC,OAAuB,OAAnBA,OAJJA,EAAU56D,KAAK+tG,iBACb/tG,KAAK+tG,iBAAiBnzC,EAAS,CAAEmU,UAAW,oBACtC/uE,KAAK+vG,qCAEF,EAAPn1C,EAAS3kD,QACJ,WAEIjW,KAAKqsE,qBAAqBhsC,IACrC,GAAGu6B,EAAQ3kD,SAAS,KACpB2kD,MAIEykC,4BAA4BzkC,G,0CAKhC,OAAuB,OAAnBA,OAJJA,EAAU56D,KAAK+tG,iBACb/tG,KAAK+tG,iBAAiBnzC,EAAS,CAAEmU,UAAW,oBACtC/uE,KAAK+vG,qCAEF,EAAPn1C,EAAS3kD,gBAGAjW,KAAKqsE,qBAAqB/4B,IACrC,GAAGsnB,EAAQ3kD,SAAS,KACpB2kD,OAIEilC,4BAA4B3yF,EAAe0tD,G,0CAKxB,OAAnBA,OAJJA,EAAU56D,KAAK+tG,iBACb/tG,KAAK+tG,iBAAiBnzC,EAAS,CAAEmU,UAAW,oBACtC/uE,KAAK+vG,qCAEF,EAAPn1C,EAAS3kD,gBAGPjW,KAAKgwG,qBAAqB,GAA0B9iG,EAAO0tD,OAG7DgN,gBAAgBhN,G,kDACpB,OAES,QAFD,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAEnqE,cAAM,eAAE5E,gBAGPkxE,gBAAgBjjG,EAAY0tD,G,0CAChC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQvpC,OAAO5E,aAAe/xB,QACxBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxCl4D,oBAAoB8kB,G,oDACxB,OAEgB,QAFR,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAErhG,YAAI,eAAEgI,eAAO,eAAEkoD,aAGd7mB,oBAAoB9oC,EAAqB0tD,G,0CAC7C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQzgE,KAAKgI,QAAQkoD,UAAY3vD,QAC3BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxCntD,wBAAwB+Z,G,oDAC5B,OAEoB,QAFZ,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAErhG,YAAI,eAAEqK,mBAAW,eAAE6lD,aAGlBvc,wBAAwBpzC,EAAyB0tD,G,0CACrD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQzgE,KAAKqK,YAAY6lD,UAAY3vD,QAC/BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxCjK,+BAA+BnpC,G,oDACnC,OAE2B,QAFnB,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE7uG,YAAI,eAAEmkC,0BAAkB,eAAEu5B,aAGzBq/B,+BACJhvF,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQjuE,KAAKmkC,mBAAmBu5B,UAAY3vD,QACtClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxCvP,6BACJ7jC,G,kDAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C,OAAsC,QAA/B,EAAa,QAAb,EAAA5gC,MAAAA,OAAO,EAAPA,EAASjuE,YAAI,eAAEokC,wBAAgB,eAAEs5B,aAGpC6/B,6BACJxvF,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQjuE,KAAKokC,iBAAiBs5B,UAAY3vD,QACpClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxCrxC,sCACJ/B,G,oDAEA,OAEkC,QAF1B,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAErhG,YAAI,eAAEy2B,iCAAyB,eAAEy5B,aAGhCE,sCACJ7vD,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQzgE,KAAKy2B,0BAA0By5B,UAAY3vD,QAC7ClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC37B,yBAAyBzX,G,oDAC7B,OAEyB,QAFjB,EAEG,QAFJ,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAEtoF,gBAAQ,eAAEge,oBAAY,eAAEm5B,aAGvBuzC,yBAAyBljG,EAAkB0tD,G,0CAC/C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ1nD,SAASge,aAAam5B,UAAY3vD,QACpClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC3uC,qBAAqBzE,G,oDACzB,OAEiB,QAFT,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAErhG,YAAI,eAAE6a,gBAAQ,eAAEq1C,aAGfsC,qBAAqBjyD,EAAiB0tD,G,0CAC1C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQzgE,KAAK6a,SAASq1C,UAAY3vD,QAC5BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxC/P,uBAAuBrjC,G,kDAC3B,MAAM/iD,EAEC,QAFa,EAEnB,QAFkB,QACX7X,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE7uG,YAAI,eAAE0Y,WACT,IAAI+tB,EAAS/tB,MAAAA,OAAU,EAAVA,EAAYglD,UAIzB,OAHc,MAAVj3B,GAAqD,OAAnC/tB,MAAAA,OAAU,EAAVA,EAAYw4F,uBAChCzqE,EAAShkC,EAAMu6E,sBAAsBtkE,EAAWw4F,sBAE3CzqE,KAGHy2D,uBAAuBnvF,EAAoB0tD,G,0CAC/C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQjuE,KAAK0Y,WAAWglD,UAAY3vD,EACpCkgE,EAAQjuE,KAAK0Y,WAAWw4F,oBACb,MAATnjG,EAAgB,KAAOtL,EAAM48E,uBAAuBtxE,SAChDlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC/O,yBACJrkC,G,oDAEA,OAEqB,QAFb,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE7uG,YAAI,eAAEqkC,oBAAY,eAAEq5B,aAGnB+/B,yBACJ1vF,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQjuE,KAAKqkC,aAAaq5B,UAAY3vD,QAChClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC9nC,kBAAkBtL,G,oDACtB,OAEc,QAFN,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAErhG,YAAI,eAAE8a,aAAK,eAAEo1C,aAGZ4I,kBAAkBv4D,EAAmB0tD,G,0CACzC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQzgE,KAAK8a,MAAMo1C,UAAY3vD,QACzBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCz0D,mBAAmBqhB,G,kDACvB,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjpF,gBAAQ,eAAE2jD,mBAGTinC,mBAAmBpjG,EAAqB0tD,G,0CAC5C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS2jD,gBAAkBn8D,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC4B,+BAA+B31C,G,oDACnC,OAE2C,QADxC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAE4jD,mCAA2B,YAIvCknC,+BAA+BtjG,EAAgB0tD,G,0CACnD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS4jD,4BAA8Bp8D,QACzClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC8B,+BAA+B71C,G,oDACnC,OAE2C,QADxC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAE6jD,mCAA2B,YAIvCmnC,+BAA+BxjG,EAAgB0tD,G,0CACnD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS6jD,4BAA8Br8D,QACzClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC5Y,uBAAuBn7B,G,oDAC3B,OAEmC,QADhC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAE8jD,2BAAmB,YAI/BmnC,uBAAuBzjG,EAAgB0tD,G,0CAC3C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS8jD,oBAAsBt8D,QACjClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCiC,uBAAuBh2C,G,oDAC3B,OAEmC,QADhC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAE+jD,2BAAmB,YAI/BonC,uBAAuB3jG,EAAgB0tD,G,0CAC3C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS+jD,oBAAsBv8D,QACjClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCmC,sCAAsCl2C,G,oDAC1C,OAEkD,QAD/C,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEgkD,0CAAkC,YAI9CqnC,sCACJ7jG,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASgkD,mCAAqCx8D,QAChDlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCqC,0BAA0Bp2C,G,oDAC9B,OAEsC,QADnC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEikD,8BAAsB,YAIlCsnC,0BAA0B/jG,EAAgB0tD,G,0CAC9C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASikD,uBAAyBz8D,QACpClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCuC,kBAAkBt2C,G,kDACtB,OAKmB,QAJhB,EAIA,QAJD,QACQ56D,KAAKivE,WACTjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCAE7C,eAAE9lC,sBAAc,YAIfunC,kBAAkBjkG,EAAgB0tD,G,0CACtC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5C9hC,EAAQhE,eAAiB18D,QACnBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxC0B,aAAax2C,G,oDACjB,OAEyB,QADtB,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEmkD,iBAAS,YAIrBwnC,aAAankG,EAAgB0tD,G,0CACjC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASmkD,UAAY38D,QACvBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC2C,2BAA2B12C,G,oDAC/B,OAEuC,QADpC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEokD,+BAAuB,YAInCynC,2BAA2BrkG,EAAgB0tD,G,0CAC/C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASokD,wBAA0B58D,QACrClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC6C,gCAAgC52C,G,oDACpC,OAE4C,QADzC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEqkD,oCAA4B,YAIxC0nC,gCAAgCvkG,EAAgB0tD,G,0CACpD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASqkD,6BAA+B78D,QAC1ClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCp9C,SAASqJ,G,kDACb,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAEtmF,eAAO,eAAEzZ,SAGRyjG,SAASxkG,EAAe0tD,G,0CAC5B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ1lD,QAAQzZ,MAAQf,QAClBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxC5lC,iBAAiBxN,G,kDACrB,OAE2B,QADxB,EAAyF,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjnF,QAAQ9C,qBAAa,YAIvB+sD,iBAAiBzkE,EAAgB0tD,G,0CACrC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQ9C,cAAgB1X,QAC1BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCgD,qBAAqB/2C,G,sDACzB,MAAMg3C,EAEK,QAFgB,EAE1B,QAFyB,QAClB5xG,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjpF,gBAAQ,eAAEskD,kBACP6nC,EAEL,QAFyB,QAClB7xG,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAE3kC,kBACH,OAA4C,QAArC,EAAA4nC,MAAAA,EAAAA,EAAqBC,SAAgB,YAGxCC,qBAAqB5kG,EAAgB0tD,G,0CACzC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASskD,kBAAoB98D,QAC/BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAG5C,MAAM/gC,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQ5D,kBAAoB98D,QACtBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCoD,4BAA4Bn3C,G,oDAChC,OAEwC,QADrC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAEukD,gCAAwB,YAIpC+nC,4BAA4B9kG,EAAgB0tD,G,0CAChD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASukD,yBAA2B/8D,QACtClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCsD,mBAAmBr3C,G,kDACvB,OAEsB,QADnB,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFuD,wBAAgB,YAIlBC,mBAAmBjlG,EAAgB0tD,G,0CACvC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQskC,iBAAmBhlG,QACrBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCyD,4BAA4Bx3C,G,kDAChC,OAE8B,QAD3B,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFxkC,gCAAwB,YAI1BkoC,4BAA4BnlG,EAAgB0tD,G,0CAChD,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQzD,yBAA2Bj9D,QAC7BlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC2D,uCAAuC13C,G,kDAC3C,OAEyC,QADtC,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFvkC,2CAAmC,YAIrCmoC,uCACJrlG,EACA0tD,G,0CAEA,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQxD,oCAAsCl9D,QACxClN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC6D,qBAAqB53C,G,kDACzB,OAEuB,QADpB,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFtkC,yBAAiB,YAInBooC,qBAAqBvlG,EAAgB0tD,G,0CACzC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQvD,kBAAoBn9D,QACtBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC+D,mBAAmB93C,G,oDACvB,OAK8B,QAJ3B,EAIU,QAJX,EAIC,QAJD,QACQ56D,KAAKsuG,WACTtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCAE7C,eAAEhqF,gBAAQ,eAAE4kD,uBAAe,YAI1BqoC,mBAAmBzlG,EAAgB0tD,G,0CACvC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAAS4kD,gBAAkBp9D,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCkD,mBAAmBh4C,G,oDACvB,OAK8B,QAJ3B,EAIU,QAJX,EAIC,QAJD,QACQ56D,KAAKsuG,WACTtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCAE7C,eAAEhqF,gBAAQ,eAAEyoD,uBAAe,YAI1B0kC,mBAAmB3lG,EAAgB0tD,G,0CACvC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASyoD,gBAAkBjhE,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCoD,wBAAwBl4C,G,kDAC5B,OAE0B,QADvB,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFnkC,4BAAoB,YAItBuoC,wBAAwB7lG,EAAgB0tD,G,0CAC5C,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQpD,qBAAuBt9D,QACzBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCqE,qBAAqBp4C,G,kDACzB,OAEuB,QADpB,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFlkC,yBAAiB,YAInBwoC,qBAAqB/lG,EAAgB0tD,G,0CACzC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQnD,kBAAoBv9D,QACtBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCuE,cAAct4C,G,kDAClB,OAEgB,QADb,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjkC,kBAAU,YAIZyoC,cAAcjmG,EAAgB0tD,G,0CAClC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQlD,WAAax9D,QACflN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxC32D,oBAAoB4iB,G,oDACxB,OAEgB,QAFR,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,sCACjE,eAAEzmG,YAAI,eAAEgI,eAAO,eAAE20C,aAGdnM,oBACJjwC,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,+BAE5ChmC,EAAQzgE,KAAKgI,QAAQ20C,UAAYp8C,QAC3BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,kCAKxCzyD,wBACJia,G,oDAEA,OAEoB,QAFZ,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,sCACjE,eAAEzmG,YAAI,eAAEqK,mBAAW,eAAEsyC,aAGlBpI,wBACJh0C,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,+BAE5ChmC,EAAQzgE,KAAKqK,YAAYsyC,UAAYp8C,QAC/BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,kCAIxC7T,+BAA+B3kC,G,gDACnC,OAEC,QAFO,QACA56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAExvG,KAAKmkC,mBAAmBgmB,aAGvB6yC,+BAA+BjvF,EAAe0tD,G,0CAClD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQjuE,KAAKmkC,mBAAmBgmB,UAAYp8C,QACtClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxCp/C,oBAAoBqL,G,oDACxB,OAEgB,QAFR,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,sCACjE,eAAEzmG,YAAI,eAAE4a,eAAO,eAAE+hC,aAGdsG,oBACJ1iD,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,+BAE5ChmC,EAAQzgE,KAAK4a,QAAQ+hC,UAAYp8C,QAC3BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,kCAIxC1U,6BACJ9jC,G,kDAEA,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAExvG,YAAI,eAAEokC,iBAAiB+lB,aAGtBqzC,6BACJzvF,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQjuE,KAAKokC,iBAAiB+lB,UAAYp8C,QACpClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxC/xC,sCACJhC,G,oDAEA,OAEkC,QAF1B,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEhiG,YAAI,eAAEy2B,iCAAyB,eAAEkmB,aAGhCiU,sCACJrwD,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQzgE,KAAKy2B,0BAA0BkmB,UAAYp8C,QAC7ClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC9N,yBAAyBjmC,G,oDAC7B,OAEyB,QAFjB,EAEG,QAFJ,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjpF,gBAAQ,eAAEge,oBAAY,eAAE4lB,aAGvBg3C,yBAAyBpzF,EAAe0tD,G,0CAC5C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAASge,aAAa4lB,UAAYp8C,QACpClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxCpvC,qBAAqB3E,G,oDACzB,OAEiB,QAFT,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEhiG,YAAI,eAAE6a,gBAAQ,eAAE8hC,aAGfsW,qBACJ1yD,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQzgE,KAAK6a,SAAS8hC,UAAYp8C,QAC5BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCzQ,uBAAuBtjC,G,kDAC3B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C,OAAgC,QAAzB,EAAa,QAAb,EAAAvhC,MAAAA,OAAO,EAAPA,EAASjuE,YAAI,eAAE0Y,kBAAU,eAAEyxC,aAG9BgzC,uBAAuBpvF,EAAe0tD,G,0CAC1C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQjuE,KAAK0Y,WAAWyxC,UAAYp8C,QAC9BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCzP,yBAAyBtkC,G,oDAC7B,OAEqB,QAFb,EAED,QAFA,EAEN,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAExvG,YAAI,eAAEqkC,oBAAY,eAAE8lB,aAGnBuzC,yBAAyB3vF,EAAY0tD,G,0CACzC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQjuE,KAAKqkC,aAAa8lB,UAAYp8C,QAChClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxC3oC,kBAAkBpL,G,kDACtB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,sCACjE,eAAEzmG,YAAI,eAAE8a,MAAM6hC,aAGX+c,kBACJn5D,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,+BAE5ChmC,EAAQzgE,KAAK8a,MAAM6hC,UAAYp8C,QACzBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,kCAIxCC,YAAYz4C,G,kDAChB,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhoF,eAAO,eAAEojD,YAGRwoC,YAAYpmG,EAAe0tD,G,0CAC/B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1lD,QAAQojD,SAAW59D,QACrBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxC6D,cAAc34C,G,kDAClB,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhoF,eAAO,eAAEqjD,cAGRyoC,cAActmG,EAAe0tD,G,0CACjC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1lD,QAAQqjD,WAAa79D,QACvBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAKxC3qD,mBAAmB6V,G,sDACvB,OAA0C,OAAlB,QAApB,QAAO56D,KAAK6N,eAAQ,eAAEw/F,oBACXrtG,KAAKyzG,yBAAyB74C,IAE7CA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,wBACc,QAA1D,EAAyC,QAA1C,EAAgC,QAAhC,QAAO3uG,KAAKsuG,WAAW1zC,UAAS,eAAEl1C,gBAAQ,eAAEhkB,uBAAe,QAAI,IAAIhB,MAGtE0kD,mBAAmBl4C,EAAwB0tD,G,0CAG/C,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQlsE,gBAAkBwL,QACpBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC11D,qBAAqB2hB,G,kDACzB,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjpF,gBAAQ,eAAE7R,qBAGT8yD,qBAAqBz5D,EAAe0tD,G,0CACxC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS7R,kBAAoB3G,QAC/BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxCvoD,mBAAmBwU,G,kDACvB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEhiG,YAAI,eAAEw5C,mBAGLG,mBAAmBp5C,EAAoB0tD,G,0CAC3C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQzgE,KAAKw5C,gBAAkBj5C,QACzBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCllE,oBAAoBmxB,G,oDACxB,OAE+B,QAD5B,EACU,QADX,EAA4F,QAA5F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCAA2B,eACxFtmF,eAAO,eAAEmnD,wBAAgB,YAI3B6kC,oBAAoBxmG,EAAgB0tD,G,0CACxC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ1lD,QAAQmnD,iBAAmB3hE,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxC2F,sBAAsB/4C,G,oDAC1B,OAEiC,QAD9B,EACU,QADX,EAA4F,QAA5F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCAA2B,eACxFtmF,eAAO,eAAE5P,0BAAkB,YAI7Bg6D,sBAAsB5kE,EAAgB0tD,G,0CAC1C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ1lD,QAAQ5P,mBAAqB5K,QAC/BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxC4F,oBAAoBh5C,G,gDACxB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAE3jC,oBAGC6oC,oBAAoB3mG,EAAe0tD,G,0CACvC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQ5C,iBAAmB99D,QACrBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCtlE,mBAAmBuxB,G,0CACvB,OAA+C,aAAjC56D,KAAKynE,eAAe7M,KAAwD,aAA5B56D,KAAKo4C,UAAUwiB,OAGzEk5C,iBAAiBl5C,G,kDACrB,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjnF,eAAO,eAAEjT,iBAGRs/F,iBAAiB7mG,EAAe0tD,G,0CACpC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQjT,cAAgBvH,QAC1BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCqF,WAAWp5C,G,kDACf,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjnF,eAAO,eAAEie,WAGRsuE,WAAW/mG,EAAgB0tD,G,0CAC/B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQie,QAAUz4B,QACpBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCtR,WAAWziC,G,kDACf,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjnF,eAAO,eAAEujD,WAGR9jC,WAAWj6B,EAAe0tD,G,0CAC9B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQujD,QAAU/9D,QACpBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCl8B,cAAc7X,G,0CAClBA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,wBAEpD,MAAM7/B,QAAwB9uE,KAAKugC,eAAeF,IAChD,GACAu6B,GAGF,OAAuB,MAAnBkU,GAA2B/mE,OAAO5I,KAAK2vE,GAAiB9rE,OAAS,EAC5D,KAGF8rE,EAAgBlU,EAAQ3kD,WAG3B03F,cAAczgG,EAAe0tD,G,gDAEjC,GAAsB,OADtBA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBACxC14F,OACV,OAEF,MAAM64D,EAIF,QAHD,QAAM9uE,KAAKugC,eAAeF,IACzB,GACAu6B,UACA,QAAI,GACRkU,EAAgBlU,EAAQ3kD,QAAU/I,QAC5BlN,KAAKugC,eAAeQ,KAAK,GAAsB+tC,EAAiBlU,MAGlEiV,YAAYjV,G,kDAChB,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,sCACjE,eAAE1rF,eAAO,eAAEwkD,YAGR4D,YAAY5iE,EAAe0tD,G,0CAC/B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,+BAE5ChmC,EAAQ1lD,QAAQwkD,SAAWh/D,QACrBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,kCAKxChQ,gBAAgBxoC,G,kDACpB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAExvG,YAAI,eAAEuvE,gBAGLgxB,gBAAgBxyF,EAA2B0tD,G,0CAC/C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQjuE,KAAKuvE,aAAexhE,QACtBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC12D,aAAa2iB,G,kDACjB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAE/iG,YAAI,eAAE+jC,aAEL6J,aAAartC,EAAe0tD,G,0CAChC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQzgE,KAAK+jC,UAAYxjC,QACnBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCwE,UAAUt5C,G,gDACd,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAE7tC,UAGCsyC,UAAUjnG,EAAe0tD,G,0CAC7B,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5C9hC,EAAQ/L,OAAS30D,QACXlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxC0E,kBAAkBx5C,G,gDACtB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE7iC,kBAGCkpC,kBAAkBnnG,EAAe0tD,G,0CACrC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5CpgC,EAAQzC,eAAiBj+D,QACnBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCsG,6BAA6B15C,G,oDACjC,OAEyC,QADtC,EACW,QADZ,EAA0F,QAA1F,QAAO56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFjpF,gBAAQ,eAAE0lD,iCAAyB,YAIrCmpC,6BAA6BrnG,EAAgB0tD,G,0CACjD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS0lD,0BAA4Bl+D,QACvClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC/zD,gBAAgBggB,G,kDACpB,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjpF,gBAAQ,eAAE2lD,gBAGTxwB,gBAAgB3tC,EAA8B0tD,G,0CAClD,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS2lD,aAAen+D,QAC1BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC6F,0BAA0B55C,G,kDAC9B,OAE4B,QADzB,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtF9gC,8BAAsB,YAIxB4mC,0BAA0BvnG,EAAgB0tD,G,0CAC9C,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQC,uBAAyB3gE,QAC3BlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC+F,8BAA8B95C,G,gDAClC,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAErjC,8BAGCqpC,8BAA8BznG,EAAe0tD,G,0CACjD,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQtC,2BAA6Bp+D,QAC/BlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCiG,eAAeh6C,G,kDACnB,OAEiB,QADd,EAAyF,QAA1F,QAAO56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCAAyB,eACtFpjC,mBAAW,YAIbspC,eAAe3nG,EAAgB0tD,G,0CACnC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQrC,YAAcr+D,QAChBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCmG,0BAA0Bl6C,G,gDAC9B,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE+G,0BAGCC,0BAA0B9nG,EAAY0tD,G,0CAC1C,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5CpgC,EAAQmnC,uBAAyB7nG,QAC3BlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCv1C,iBAAiBmC,G,kDACrB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEhiG,YAAI,eAAE8X,iBAGLk0C,iBACJzrD,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQzgE,KAAK8X,cAAgBvX,QACvBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC7yC,6BAA6BlB,G,kDACjC,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhqF,gBAAQ,eAAE8lD,6BAGTzP,6BAA6B7uD,EAAY0tD,G,0CAC7C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAAS8lD,0BAA4Bt+D,QACvClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCh2B,6BAA6B9e,G,kDACjC,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhqF,gBAAQ,eAAEuvF,6BAGTt7B,6BAA6BzsE,EAAY0tD,G,0CAC7C,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASuvF,0BAA4B/nG,QACvClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCwF,oBAAoBt6C,G,kDACxB,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhqF,gBAAQ,eAAEyvF,oBAGTC,oBAAoBloG,EAAY0tD,G,0CACpC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASyvF,iBAAmBjoG,QAC9BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxC2F,gBAAgBz6C,G,kDACpB,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjpF,gBAAQ,eAAE+lD,gBAGT6pC,gBAAgBpoG,EAAe0tD,G,0CACnC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1nD,SAAS+lD,aAAev+D,QAC1BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAKxCttC,aAAazG,G,kDACjB,OAEO,QAFC,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEhiG,YAAI,eAAE+X,aAGLwhB,aACJh5B,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQzgE,KAAK+X,UAAYxX,QACnBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC/Q,aAAahjC,G,gDACjB,MAAMz7D,EAEL,QAFa,QACNa,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE7uG,KACH,IAAIymC,EAASzmC,MAAAA,OAAI,EAAJA,EAAM8c,UAInB,OAHc,MAAV2pB,GAA+C,OAA7BzmC,MAAAA,OAAI,EAAJA,EAAMo2G,uBAC1B3vE,EAAShkC,EAAMu6E,sBAAsBh9E,EAAKo2G,sBAErC3vE,KAGHm4D,aAAa7wF,EAAoB0tD,G,0CACrC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQjuE,KAAK8c,UAAY/O,EACzBkgE,EAAQjuE,KAAKo2G,oBAA+B,MAATroG,EAAgB,KAAOtL,EAAM48E,uBAAuBtxE,SACjFlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCpvE,gBAAgBg8B,G,kDAEpB,OADAA,QAAgB56D,KAAKquG,8BAA8BzzC,GACJ,QAAvC,EAA+B,QAAhC,QAAO56D,KAAKsuG,WAAW1zC,UAAS,eAAE/2B,cAAM,eAAErsB,gBAG7C2vD,gBAAgBj6D,EAAe0tD,G,0CACnCA,QAAgB56D,KAAKquG,8BAA8BzzC,GACnD,MAAMwS,QAAgBptE,KAAKsuG,WAAW1zC,GACtCwS,EAAQvpC,OAAOrsB,aAAetK,QACxBlN,KAAKuuG,YAAYnhC,EAASxS,MAG5B46C,mBAAmB56C,G,gDACvB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAE1jC,mBAGCypC,mBAAmBvoG,EAAe0tD,G,0CACtC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5C9hC,EAAQ5B,gBAAkB9+D,QACpBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCn+B,iBAAiB3W,G,kDACrB,OAES,QAFD,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAEnqE,cAAM,eAAE5e,iBAGPysD,iBAAiBxkE,EAAe0tD,G,0CACpC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQvpC,OAAO5e,cAAgB/X,QACzBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAIxCnnC,YAAYjM,G,kDAChB,OAEW,QAFH,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,sCACjE,eAAE1tF,gBAAQ,eAAEA,YAGT+gD,YAAYv5D,EAAe0tD,G,0CAC/B,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,+BAE5ChmC,EAAQ1nD,SAASA,SAAWxY,QACtBlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKozG,kCAIxCsC,mBAAmB96C,G,gDACvB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjjC,mBAGCiqC,mBAAmBzoG,EAAe0tD,G,0CACtC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQlC,gBAAkBx+D,QACpBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCiH,oBAAoBh7C,G,gDACxB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAE5hC,6BAGC+nC,6BAA6B3oG,EAAe0tD,G,0CAChD,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5C9hC,EAAQE,0BAA4B5gE,QAC9BlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCoG,YAAYl7C,G,gDAChB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAE/iC,YAGCmqC,YAAY7oG,EAAe0tD,G,0CAC/B,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5C/gC,EAAQhC,SAAW1+D,QACblN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxCqH,SAASp7C,G,gDACb,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEruG,SAGC40G,SAAS/oG,EAAkB0tD,G,0CAC/B,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5C9hC,EAAQvsE,MAAQ6L,QACVlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCvqE,kBAAkBy1B,G,gDACtB,OAEC,QAFO,QACA56D,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAE1kG,kBAGC66B,kBAAkB34B,EAAe0tD,G,0CACrC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5C9hC,EAAQ5iE,eAAiBkC,QACnBlN,KAAK6uG,YACTjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCt3D,UAAUwiB,G,kDACd,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjnF,eAAO,eAAEzR,UAGRs6C,oBAAoBqK,G,kDACxB,OAEU,QAFF,EAEP,QAFM,QACC56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,gCACjE,eAAEjnF,eAAO,eAAEzE,oBAGRqtC,oBAAoBpjD,EAAgB0tD,G,0CACxC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAE5CvhC,EAAQ1lD,QAAQzE,iBAAmB/V,QAC7BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAIxC7L,gBAAgBloC,G,kDAIpB,OADW,QAFkB,EAE5B,QAF2B,QACpB56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhqF,gBAAQ,eAAEqmD,gBAITmqC,gBAAgBhpG,EAAe0tD,G,0CACnC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASqmD,aAAe7+D,QAC1BlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxCyG,sBAAsBv7C,G,oDAC1B,MAAMw7C,EAEK,QAFwB,EAElC,QAFiC,QAC1Bp2G,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAEhqF,gBAAQ,eAAEie,mBACP0yE,EAEL,QAFiC,QAC1Br2G,KAAKivE,WAAWjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,qCACjE,eAAE/rE,mBACH,OAAOyyE,MAAAA,EAAAA,EAA6BC,KAGhCC,sBAAsBppG,EAAe0tD,G,0CACzC,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,8BAE5CtiC,EAAQ1nD,SAASie,mBAAqBz2B,QAChClN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK0vG,iCAIxC6G,kB,gDACJ,OAAmF,QAA3E,SAAMv2G,KAAKivE,iBAAiBjvE,KAAK0vG,8BAA8BluG,oBAAY,QAAI,KAGnFg1G,gBAAgBtpG,G,0CACpB,MAAM0gE,QAAgB5tE,KAAKivE,iBAAiBjvE,KAAK2uG,wBACjD/gC,EAAQpsE,aAAe0L,QACjBlN,KAAK6uG,YAAYjhC,QAAe5tE,KAAK2uG,2BAGvC8H,Y,0CACJ,MAAM7oC,QAAgB5tE,KAAKivE,iBAAiBjvE,KAAK2uG,wBACjD,OAA0B,OAAnB/gC,MAAAA,OAAO,EAAPA,EAASrsE,SAAkBwG,OAAO5I,KAAKyuE,EAAQrsE,QAAQyB,OAAS,EACnE4qE,EAAQrsE,OACR,IAAIJ,KAGJu1G,UAAUxpG,EAAoB0tD,G,0CAClC,MAAMgT,QAAgB5tE,KAAKivE,WACzBjvE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,yBAG5C,OADA/gC,EAAQrsE,OAAS2L,QACJlN,KAAK6uG,YAChBjhC,EACA5tE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,4BAI9B1/B,WAAWrU,G,0CACzB,IAAIgT,EASJ,OARI5tE,KAAK22G,UAAU/7C,EAAQg8C,mBACzBhpC,QAAgB5tE,KAAK62G,wBAGnB72G,KAAK82G,SAAsB,MAAXlpC,IAClBA,QAAgB5tE,KAAK+2G,mBAAmBn8C,IAGnCgT,MAAAA,EAAAA,EAAW5tE,KAAKgtG,mBAGT6B,YAAYjhC,EAAuBhT,G,0CACjD,OAAO56D,KAAK22G,UAAU/7C,EAAQg8C,iBAC1B52G,KAAKg3G,oBAAoBppC,SACnB5tE,KAAKi3G,kBAAkBrpC,EAAShT,MAG5Bi8C,uB,0CACd,aAAc72G,KAAK6N,SAAS+/D,WAGdmpC,mBAAmBn8C,G,0CACjC,aAAa56D,KAAKugC,eAAeF,IAAkB,GAAau6B,MAGlDo8C,oBAAoBppC,G,gDAC5B5tE,KAAKktG,aAAmBr/F,GAAU,mCAEtC,OADAA,EAAM+/D,QAAUA,EACT//D,UAIKopG,kBAAkBrpC,EAAuBhT,G,0CACnDA,EAAQs8C,uBACJl3G,KAAKqsE,qBAAqBtrC,KAAK,GAAa6sC,EAAShT,SAErD56D,KAAKugC,eAAeQ,KAAK,GAAa6sC,EAAShT,MAIzC0zC,WAAW1zC,G,0CACzB,IACE,IAAIwS,EASJ,OARIptE,KAAK22G,UAAU/7C,EAAQg8C,mBACzBxpC,QAAgBptE,KAAKm3G,qBAAqBv8C,IAGxC56D,KAAK82G,QAAQl8C,EAAQg8C,kBAA+B,MAAXxpC,IAC3CA,QAAgBptE,KAAKwtG,mBAAmB5yC,IAGnCwS,EACP,MAAOpuE,GACPgB,KAAKmkC,WAAW1iB,MAAMziB,OAIVm4G,qBAAqBv8C,G,0CACnC,aAAa56D,KAAK6N,QAAQ9O,MAAY8O,GAAU,mCAC9C,OAAsB,MAAlBA,EAAM2+F,SACD,KAEF3+F,EAAM2+F,eAAexsG,KAAKo3G,oBAAoBx8C,YAIzCw8C,oBAAoBx8C,G,0CAClC,aAAa56D,KAAK6N,QAAQ9O,MAAM8O,I,QAC9B,OAA0B,OAAnB+sD,MAAAA,OAAO,EAAPA,EAAS3kD,QAC2B,QAAvC,EAA8B,QAA9B,EAAApI,EAAM2+F,SAAS5xC,EAAQ3kD,eAAO,eAAEyR,eAAO,eAAEzR,OACzCpI,EAAMw/F,mBAIEG,mBAAmB5yC,G,kDACjC,GAAuB,OAAnBA,MAAAA,OAAO,EAAPA,EAAS3kD,SAAwD,OAAlB,QAApB,QAAOjW,KAAK6N,eAAQ,eAAEw/F,cACnD,OAAO,KAGT,GAAIrtG,KAAK2sG,gBAAiB,CACxB,MAAM0K,EAAgBr3G,KAAK8sG,iBAAiBzsE,IAAIu6B,EAAQ3kD,QACxD,GAAqB,MAAjBohG,EACF,OAAOA,EAIX,MAAMjqC,GAAUxS,MAAAA,OAAO,EAAPA,EAASs8C,kBACmD,QAAvE,QAAMl3G,KAAKqsE,qBAAqBhsC,IAAcu6B,EAAQ3kD,OAAQ2kD,UAAS,cACjE56D,KAAKugC,eAAeF,IACzBu6B,EAAQ3kD,OACRjW,KAAK+tG,iBAAiBnzC,EAAS,CAAEj6B,oBAAqB3W,GAAoB4W,eAEtE5gC,KAAKugC,eAAeF,IAAcu6B,EAAQ3kD,OAAQ2kD,GAK5D,OAHI56D,KAAK2sG,iBACP3sG,KAAK8sG,iBAAiB1lG,IAAIwzD,EAAQ3kD,OAAQm3D,GAErCA,KAGCupC,UAAUC,GAClB,OAAOA,IAAoBtK,GAAgBgL,QAAUV,IAAoBtK,GAAgBiL,KAGjFT,QAAQF,GAChB,OAAOA,IAAoBtK,GAAgBkL,MAAQZ,IAAoBtK,GAAgBiL,KAGzEhJ,YACdnhC,EACAxS,EAA0B,CACxBg8C,gBAAiBtK,GAAgBiL,KACjCL,kBAAkB,I,0CAGpB,OAAOl3G,KAAK22G,UAAU/7C,EAAQg8C,uBACpB52G,KAAKy3G,oBAAoBrqC,SACzBptE,KAAK03G,kBAAkBtqC,EAASxS,MAG5B88C,kBAAkBtqC,EAAmBxS,G,0CACnD,MAAMg8C,EAAkBh8C,EAAQs8C,iBAC5Bl3G,KAAKqsE,qBACLrsE,KAAKugC,qBAEHq2E,EAAgB71E,KAAK,GAAG65B,EAAQ3kD,SAAUm3D,EAASxS,GAErD56D,KAAK2sG,iBACP3sG,KAAK8sG,iBAAiBlqE,OAAOg4B,EAAQ3kD,WAIzBwhG,oBAAoBrqC,G,0CACoC,OAAlEptE,KAAKm3G,qBAAqB,CAAElhG,OAAQm3D,EAAQ1lD,QAAQzR,iBAChDjW,KAAKktG,aAAar/F,GACf,IAAIhP,SAASC,IAClB+O,EAAM2+F,SAASp/B,EAAQ1lD,QAAQzR,QAAUm3D,EACzCtuE,EAAQ+O,eAIR7N,KAAKstG,kBAGGI,0BAA0BtgC,G,0CAExC,MAAMuqC,EAAY16E,KAAKgqC,MAAMhqC,KAAKC,UAAUkwC,UACtCptE,KAAK43G,+BAA+BD,SACpC33G,KAAK63G,iCAAiCF,SACtC33G,KAAK83G,gCAAgCH,MAK7BC,+BAA+BxqC,G,0CAC7C,MAAM2qC,QAAsB/3G,KAAKsuG,WAC/BtuG,KAAK+tG,iBACH,CAAE93F,OAAQm3D,EAAQ1lD,QAAQzR,cACpBjW,KAAK0vG,8BAIThuG,EAAkB0rE,EAAQ1nD,SAAShkB,gBACV,OAA3Bq2G,MAAAA,OAAa,EAAbA,EAAeryF,UACjB0nD,EAAQ1nD,SAAWqyF,EAAcryF,gBAClB1lB,KAAKugC,eAAe+S,IAAI,OACvC85B,EAAQ1nD,eAAiB1lB,KAAKugC,eAAeF,IAAqB,UAC5DrgC,KAAKugC,eAAe2xB,OAAO,KAEnCkb,EAAQ1nD,SAAShkB,gBAAkBA,EACS,WAAxC0rE,EAAQ1nD,SAASie,oBAAoE,MAAjCypC,EAAQ1nD,SAASqmD,eACvEqB,EAAQvpC,OAAOzsB,YAAc,KAC7Bg2D,EAAQvpC,OAAOrsB,aAAe,KAC9B41D,EAAQ1lD,QAAQinD,eAAiB,KACjCvB,EAAQjuE,KAAKkvE,mBAAqB,YAE9BruE,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBACH,CAAE93F,OAAQm3D,EAAQ1lD,QAAQzR,cACpBjW,KAAK0vG,iCAKDoI,gCAAgC1qC,G,0CAC9C,MAAM2qC,QAAsB/3G,KAAKsuG,WAC/BtuG,KAAK+tG,iBACH,CAAE93F,OAAQm3D,EAAQ1lD,QAAQzR,cACpBjW,KAAKozG,+BAGgB,OAA3B2E,MAAAA,OAAa,EAAbA,EAAeryF,YACjBqyF,EAAcryF,SAAShkB,gBAAkB0rE,EAAQ1nD,SAAShkB,gBAC1D0rE,EAAQ1nD,SAAWqyF,EAAcryF,gBAE7B1lB,KAAKugC,eAAeQ,KACxBqsC,EAAQ1lD,QAAQzR,OAChBm3D,QACMptE,KAAKozG,oCAEPpzG,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBACH,CAAE93F,OAAQm3D,EAAQ1lD,QAAQzR,cACpBjW,KAAKozG,kCAKDyE,iCAAiCzqC,G,0CAC/C,MAAM2qC,QAAsB/3G,KAAKsuG,WAC/BtuG,KAAK+tG,iBAAiB,CAAE93F,OAAQm3D,EAAQ1lD,QAAQzR,cAAgBjW,KAAK2uG,yBAExC,OAA3BoJ,MAAAA,OAAa,EAAbA,EAAeryF,YACjBqyF,EAAcryF,SAAShkB,gBAAkB0rE,EAAQ1nD,SAAShkB,gBAC1D0rE,EAAQ1nD,SAAWqyF,EAAcryF,gBAE7B1lB,KAAKugC,eAAeQ,KACxBqsC,EAAQ1lD,QAAQzR,OAChBm3D,QACMptE,KAAKozG,oCAEPpzG,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiB,CAAE93F,OAAQm3D,EAAQ1lD,QAAQzR,cAAgBjW,KAAK2uG,4BAKzDrB,e,gDACRttG,KAAKg4G,8BACLh4G,KAAK6N,QAAQ9O,MAAM8O,IACD,MAAlBA,EAAM2+F,UAAoBzkG,OAAO5I,KAAK0O,EAAM2+F,UAAUxpG,OAAS,EACjEhD,KAAKwsG,SAASnnD,KAAK,MAIrBrlD,KAAKwsG,SAASnnD,KAAKx3C,EAAM2+F,gBAInBuB,iBACRkK,EACAC,G,cAEA,OAAwB,MAApBD,EACKC,GAETD,EAAiBhiG,OAAiC,QAAxB,EAAAgiG,MAAAA,OAAgB,EAAhBA,EAAkBhiG,cAAM,QAAIiiG,EAAejiG,OACrEgiG,EAAiBrB,gBACkB,QAAjC,EAAAqB,MAAAA,OAAgB,EAAhBA,EAAkBrB,uBAAe,QAAIsB,EAAetB,gBACtDqB,EAAiBf,iBACmB,QAAlC,EAAAe,MAAAA,OAAgB,EAAhBA,EAAkBf,wBAAgB,QAAIgB,EAAehB,iBACvDe,EAAiBt3E,oBACsB,QAArC,EAAAs3E,MAAAA,OAAgB,EAAhBA,EAAkBt3E,2BAAmB,QAAIu3E,EAAev3E,oBAC1Ds3E,EAAiBlpC,UAAuC,QAA3B,EAAAkpC,MAAAA,OAAgB,EAAhBA,EAAkBlpC,iBAAS,QAAImpC,EAAenpC,UACpEkpC,GAGOjK,yB,0CACd,MAAO,CACL4I,gBAAiBtK,GAAgBgL,OACjCrhG,cAAejW,KAAK6N,SAASw/F,iBAIjBsB,uB,kDACd,MAAO,CACLiI,gBAAiBtK,GAAgBkL,KACjC72E,oBAAqB3W,GAAoBmuF,QACzCliG,OAA0C,QAAjC,EAAmB,QAApB,QAAOjW,KAAK6N,eAAQ,eAAEw/F,oBAAY,cAAWrtG,KAAKo4G,6BAC1DlB,kBAAkB,MAINxH,4B,kDACd,MAAO,CACLkH,gBAAiBtK,GAAgBkL,KACjC72E,oBAAqB3W,GAAoB4W,MACzC3qB,OAA0C,QAAjC,EAAmB,QAApB,QAAOjW,KAAK6N,eAAQ,eAAEw/F,oBAAY,cAAWrtG,KAAKo4G,6BAC1DlB,kBAAkB,MAIN9D,6B,kDACd,MAAO,CACLwD,gBAAiBtK,GAAgBkL,KACjC72E,oBAAqB3W,GAAoBstF,OACzCrhG,OAA0C,QAAjC,EAAmB,QAApB,QAAOjW,KAAK6N,eAAQ,eAAEw/F,oBAAY,cAAWrtG,KAAKo4C,YAC1D8+D,kBAAkB,MAINnH,8B,kDACd,MAAO,CACL6G,gBAAiBtK,GAAgBkL,KACjCN,kBAAkB,EAClBjhG,OAA0C,QAAjC,EAAmB,QAApB,QAAOjW,KAAK6N,eAAQ,eAAEw/F,oBAAY,cAAWrtG,KAAKo4G,iCAI9CA,6B,0CACd,aAAap4G,KAAKugC,eAAeF,IAAY,OAG/Bg4E,8BAA8BpiG,EAAiB,M,gDAC7DA,EAASA,MAAAA,EAAAA,EAA8B,QAAnB,QAAMjW,KAAK6N,eAAQ,eAAEw/F,aACzC,MAAM0K,QAAsB/3G,KAAKsuG,WAC/BtuG,KAAK+tG,iBAAiB,CAAE93F,OAAQA,SAAgBjW,KAAK0vG,oCAEjD1vG,KAAKuuG,YACTvuG,KAAKs4G,aAAaP,GAClB/3G,KAAK+tG,iBAAiB,CAAE93F,OAAQA,SAAgBjW,KAAK0vG,iCAIzC6I,gCAAgCtiG,EAAiB,M,gDAC/DA,EAASA,MAAAA,EAAAA,EAA8B,QAAnB,QAAMjW,KAAK6N,eAAQ,eAAEw/F,aACzC,MAAM0K,QAAsB/3G,KAAKsuG,WAC/BtuG,KAAK+tG,iBAAiB,CAAE93F,OAAQA,SAAgBjW,KAAK2uG,+BAEjD3uG,KAAKuuG,YACTvuG,KAAKs4G,aAAaP,GAClB/3G,KAAK+tG,iBAAiB,CAAE93F,OAAQA,SAAgBjW,KAAK2uG,4BAIzC6J,+BAA+BviG,EAAiB,M,gDAC9DA,EAASA,MAAAA,EAAAA,EAA8B,QAAnB,QAAMjW,KAAK6N,eAAQ,eAAEw/F,mBACnCrtG,KAAK4/F,uBAAuB,KAAM,CAAE3pF,OAAQA,UAC5CjW,KAAK6/F,4BAA4B,KAAM,CAAE5pF,OAAQA,UACjDjW,KAAKkwG,sBAAsB,KAAM,CAAEj6F,OAAQA,OAGnCm4F,wBAAwBn4F,EAAiB,M,gDACjDjW,KAAKktG,aAAmBr/F,GAAU,mCAQtC,OAPAoI,EAASA,MAAAA,EAAAA,EAAUpI,EAAMw/F,oBAClBx/F,EAAM2+F,SAASv2F,GAElBjW,KAAK2sG,iBACP3sG,KAAK8sG,iBAAiBlqE,OAAO3sB,GAGxBpI,UAIKmqG,wB,gDAEd,IAAK,MAAM/hG,KAA8B,QAAnB,QAAMjW,KAAK6N,eAAQ,eAAE2+F,gBAC7BxsG,KAAKqpC,mBAAmB,CAAEpzB,OAAQA,aACtCjW,KAAKouG,wBAAwBn4F,OAM/BqiG,aAAalrC,GACrB,MAAMqrC,EAA+B,CAAE/yF,SAAU0nD,EAAQ1nD,UACzD,OAAO3d,OAAOC,OAAOhI,KAAKS,gBAAiBg4G,GAG7BhL,0BAA0BrgC,G,0CAExC,OADAA,EAAQ1nD,SAAShkB,sBAAwB1B,KAAKyzG,2BACvCrmC,KAGOqmC,yBAAyB74C,G,gDAEvC,OADAA,EAAU56D,KAAK+tG,iBAAiBnzC,QAAe56D,KAAK2uG,wBACG,QAA/C,SAAM3uG,KAAKivE,WAAWrU,IAAUl5D,uBAAe,QAAI,IAAIhB,KAGjDmtG,kC,gDACR7tG,KAAKktG,aAAmBr/F,GAAU,mC,MACtC,MAAMoI,EAASpI,MAAAA,OAAK,EAALA,EAAOw/F,aAKtB,OAJc,MAAVp3F,GAAmD,OAAV,QAAvB,EAAApI,MAAAA,OAAK,EAALA,EAAO2+F,SAASv2F,UAAO,eAAEtJ,QAC7CkB,EAAM2+F,SAASv2F,GAAQtJ,KAAO,IAAIw2B,IAG7Bt1B,UAIDpN,cAAc+I,EAA0B,MAChD,OAAOxJ,KAAKssE,aAAa7rE,cAAc+I,GAG/BwjG,cAAcxjG,EAA8B,MACpD,OAAOxJ,KAAKssE,aAAa9rE,aAAagJ,GAGxBykG,sBAAsBh4F,G,gDAC9BjW,KAAKwnE,eAAe,KAAM,CAAEvxD,OAAQA,UACpCjW,KAAK2tG,cAAc,KAAM,CAAE13F,OAAQA,UACnCjW,KAAKktG,aAAmBr/F,GAAU,mCAKtC,OAJAA,EAAMq/D,sBAAwBr/D,EAAMq/D,sBAAsBhlE,QAAQ9I,GAAOA,IAAO6W,UAE1EjW,KAAKugC,eAAeQ,KAAK,GAA4BlzB,EAAMq/D,uBAE1Dr/D,UAIKsgG,sBAAsBl4F,G,gDAC9BjW,KAAKu4G,gCAAgCtiG,SACrCjW,KAAKq4G,8BAA8BpiG,SACnCjW,KAAKw4G,+BAA+BviG,MAG5Bi4F,2B,gDACd,MAAM1B,EAA+B,QAAnB,QAAMxsG,KAAK6N,eAAQ,eAAE2+F,SACvC,GAAgB,MAAZA,GAAoBzkG,OAAO5I,KAAKqtG,GAAUxpG,OAAS,QAC/ChD,KAAK4tG,cAAc,WAG3B,IAAK,MAAM33F,KAAUu2F,EACnB,GAAc,MAAVv2F,EAAJ,CAGA,SAAUjW,KAAKqpC,mBAAmB,CAAEpzB,OAAQA,IAAW,OAC/CjW,KAAK4tG,cAAc33F,GACzB,YAEIjW,KAAK4tG,cAAc,UAIfS,8BAA8BzzC,G,0CAC1C,MAAM89C,QAAsB14G,KAAKm2G,sBAAsB,CAAElgG,OAAQ2kD,MAAAA,OAAO,EAAPA,EAAS3kD,SACpEqT,QAAgBtpB,KAAK8iG,gBAAgB,CAAE7sF,OAAQ2kD,MAAAA,OAAO,EAAPA,EAAS3kD,SACxDiiG,EACc,WAAlBQ,GAAyC,MAAXpvF,QACpBtpB,KAAKguG,+BACLhuG,KAAK2uG,uBACjB,OAAO3uG,KAAK+tG,iBAAiBnzC,EAASs9C,MAG1BlI,qBAAqBzjG,EAAaW,EAAe0tD,G,0CAC7D,OAAgB,MAAT1tD,QACGlN,KAAKqsE,qBAAqBna,OAAO,GAAG0I,EAAQ3kD,SAAS1J,IAAOquD,SAC5D56D,KAAKqsE,qBAAqBtrC,KAAK,GAAG65B,EAAQ3kD,SAAS1J,IAAOW,EAAO0tD,MAGnE/sD,QACR,OAAO7N,KAAKysG,qBAAqBpsE,IAAmC,IAGxD0sE,SAASl/F,G,gDACf7N,KAAKysG,qBAAqB1rE,KAAK,GAAYlzB,MAGnCq/F,YACdyL,G,gDAEM34G,KAAK6N,QAAQ9O,MAAY8O,GAAU,mCACvC,MAAM+qG,QAAqBD,EAAa9qG,GACxC,GAAoB,MAAhB+qG,EACF,MAAM,IAAI35G,MAAM,iDAGZe,KAAK+sG,SAAS6L,YAKnB,SAASC,GACd/4G,EACAg5G,EAA6B,CAAC71G,GAAMA,IAMpC,MAAO,CAAC4E,EAAao6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAWh1B,MAElC,MAAO,CACLA,MAAO,YAAahN,GAClB,MAAM64G,EAA6B52E,EAAe59B,MAAMvE,KAAME,GAE9D,KAAM64G,aAA0Bl6G,SAC9B,MAAM,IAAII,MACR,kFAAkF8E,OAChFk+B,MAKN,OAAO82E,EAAeh6G,MAAM6mC,GACT,MAAVA,GACLA,EAAO9lC,YAAYmC,OAASnC,EAAY6E,UAAU7E,YAAYmC,KAC5D62G,EAAUlzE,GACVkzE,EACE/wG,OAAO9H,OAAOH,EAAY6E,UAAWoD,OAAOqkG,0BAA0BxmE,UAQtF,SAASozE,GACPC,EACAC,EAAmC,CAACj2G,GAAMA,IAM1C,MAAO,CAAC4E,EAAao6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAWh1B,MAElC,MAAO,CACLA,MAAO,YAAahN,GAClB,MAAM64G,EAAiC52E,EAAe59B,MAAMvE,KAAME,GAElE,KAAM64G,aAA0Bl6G,SAC9B,MAAM,IAAII,MACR,kFAAkF8E,OAChFk+B,MAKN,OAAO82E,EAAeh6G,MAAM6mC,IAC1B,GAAc,MAAVA,EACF,OAAO,KACF,GAAMA,aAAkBlhC,MAO7B,OAAOkhC,EAAOhhC,KAAKY,GACL,MAALA,GACLA,EAAE1F,YAAYmC,OAASg3G,EAAkBt0G,UAAU7E,YAAYmC,KAC7Di3G,EAAgB1zG,GAChB0zG,EACEnxG,OAAO9H,OAAOg5G,EAAkBt0G,UAAWoD,OAAOqkG,0BAA0B5mG,OAXpF,MAAM,IAAIvG,MACR,0EAA0E8E,OACxEk+B,YAmBhB,SAASk3E,GACPC,EACAC,EAAmC,CAACp2G,GAAMA,IAM1C,MAAO,CAAC4E,EAAao6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAWh1B,MAElC,MAAO,CACLA,MAAO,YAAahN,GAClB,MAAM64G,EAAgD52E,EAAe59B,MAAMvE,KAAME,GAEjF,KAAM64G,aAA0Bl6G,SAC9B,MAAM,IAAII,MACR,kFAAkF8E,OAChFk+B,MAKN,OAAO82E,EAAeh6G,MAAM6mC,IAC1B,GAAc,MAAVA,EACF,OAAO,KAEP,IAAK,MAAOr5B,EAAKs2B,KAAQ96B,OAAOonE,QAAQvpC,GACtCA,EAAOr5B,GACE,MAAPs2B,GAAeA,EAAI/iC,YAAYmC,OAASm3G,EAAkBz0G,UAAU7E,YAAYmC,KAC5Eo3G,EAAgBx2E,GAChBw2E,EACEtxG,OAAO9H,OACLm5G,EAAkBz0G,UAClBoD,OAAOqkG,0BAA0BvpE,KAK7C,OAAO+C,QAQnB,SAAS0zE,GACPF,EACAC,EAAmC,CAACp2G,GAAMA,IAM1C,MAAO,CAAC4E,EAAao6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAWh1B,MAElC,MAAO,CACLA,MAAO,YAAahN,GAClB,MAAM64G,EAA+B52E,EAAe59B,MAAMvE,KAAME,GAEhE,KAAM64G,aAA0Bl6G,SAC9B,MAAM,IAAII,MACR,kFAAkF8E,OAChFk+B,MAKN,OAAO82E,EAAeh6G,MAAM6mC,IAC1B,GAAc,MAAVA,EACF,OAAO,KACF,GAAIA,aAAkB7+B,IAC3B,OAAO6+B,EAEP,IAAK,MAAMr5B,KAAOxE,OAAO5I,KAAKymC,GAC5BA,EAAOr5B,GACU,MAAfq5B,EAAOr5B,IACPq5B,EAAOr5B,GAAKzM,YAAYmC,OAASm3G,EAAkBz0G,UAAU7E,YAAYmC,KACrEo3G,EAAgBzzE,EAAOr5B,IACvB8sG,EACEtxG,OAAO9H,OACLm5G,EAAkBz0G,UAClBoD,OAAOqkG,0BAA0BxmE,EAAOr5B,MAIpD,OAAO,IAAIxF,IAAegB,OAAOonE,QAAQvpC,UAr4EnD,IADCizE,GAAchrE,GAAoBA,GAAmBs+D,c,qIAgItD,IADC6M,GAA6BvoE,I,sIAmB9B,IADCuoE,GAA6B74D,I,0IAmB9B,IADC04D,GAAchrE,GAAoBA,GAAmBs+D,c,iJAsBtD,IADCmN,GAAoBzrE,GAAoBA,GAAmBs+D,c,+IAyB5D,IADC6M,GAA6BhgD,I,wJAwB9B,IADC6/C,GAAcjtE,I,2IAmBf,IADCotE,GAA6Bn6C,I,uIA2C9B,IADCy6C,GAAoBzrE,GAAoBA,GAAmBs+D,c,2IAwB5D,IADC6M,GAA6Bh0C,I,oIA4d9B,IADCm0C,GAA6B9tE,I,sIAsB9B,IADC8tE,GAA6Bj5D,I,0IAyC9B,IADCi5D,GAA6B1qD,I,sIA4C9B,IADCuqD,GAA6BhgD,I,wJAyC9B,IADCmgD,GAA6B76C,I,uIAyD9B,IADC66C,GAA6Bv0C,I,oIAwD9B,IADCi0C,GAAcn4G,G,qIAwCf,IADCs4G,GAA6BzzD,I,qIA6K9B,IADCszD,GAAchrE,GAAoBA,GAAmBs+D,c,kIAsQtD,IADCgN,GAA6B7pC,I,i2BCl9DzB,MAAMiqC,WACH,GAGFh0E,WAAW6nC,G,8GAEfA,EAAU,IAAI4U,GAAQ5U,SAChB,EAAM7nC,WAAU,UAAC6nC,MAGnB/jC,mBAAmBuxB,G,8HAGvB,aACS,EAAMvxB,mBAAkB,UAACuxB,KACgC,aAAzD56D,KAAKsuG,iBAAiBtuG,KAAKguG,8BAKhCwL,iCACJ5+C,G,gDAEA,OAEC,QAFO,QACA56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE/rB,aAGCw3B,iCACJvsG,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ6U,UAAY/0E,QACdlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC0L,+BAA+B9+C,G,gDACnC,OAEC,QAFO,QACA56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAEr5F,WAGCglG,+BACJzsG,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQz4D,QAAUzH,QACZlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC4L,6BAA6Bh/C,G,gDACjC,OAEC,QAFO,QACA56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAEphF,QAGCitF,6BACJ3sG,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQxgD,KAAO1f,QACTlN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,8BAKxC8L,iCAAiCl/C,G,gDACrC,OAEC,QAFO,QACA56D,KAAKsuG,WAAWtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,kCACjE,eAAE9rB,YAGC63B,iCACJ7sG,EACA0tD,G,0CAEA,MAAMwS,QAAgBptE,KAAKsuG,WACzBtuG,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,2BAE5C5gC,EAAQ8U,SAAWh1E,QACblN,KAAKuuG,YACTnhC,EACAptE,KAAK+tG,iBAAiBnzC,QAAe56D,KAAKguG,+BAjF9C,IADC6K,GAAch3B,I,mJAwBf,IADCg3B,GAAcj3B,I,iJAsBf,IADCi3B,GAAc/2B,I,+IAsBf,IADC+2B,GAAcj3B,I,mJC3FV,MAAMo4B,GAWXl6G,YAAY0J,GATZ,KAAAywG,oBAAqB,EAGrB,KAAAC,gBAAiB,EAGjB,KAAAC,aAAc,EACd,KAAAC,8BAA+B,EAG7BryG,OAAOC,OAAOhI,KAAMwJ,GAGtB6wG,cACEr6G,KAAKs6G,WAAa,KAClBt6G,KAAKiU,OAAS,KACdjU,KAAKi6G,oBAAqB,EAC1Bj6G,KAAKu6G,qBAAuB,KAC5Bv6G,KAAKk6G,gBAAiB,EACtBl6G,KAAKw6G,iBAAmB,KAG1BC,oBACEz6G,KAAKm6G,aAAc,EACnBn6G,KAAK06G,uBAAyB,KAC9B16G,KAAKq6G,cAGPM,cACE,OAAQzmE,IACN,IAAI0mE,GAAqB,EA+BzB,MA9BoB,cAAhB56G,KAAKiU,QAA0B2mG,IACjCA,EAAqB1mE,EAAO3kC,UAEV,UAAhBvP,KAAKiU,QAAsB2mG,IAC7BA,EAAqB1mE,EAAO0E,WAEP,MAAnB54C,KAAKs6G,YAAsBM,IAC7BA,EAAqB1mE,EAAOtqC,OAAS5J,KAAKs6G,YAExCt6G,KAAKk6G,gBAA2C,MAAzBl6G,KAAKw6G,kBAA4BI,IAC1DA,EAAwC,MAAnB1mE,EAAO7kC,UAE1BrP,KAAKk6G,gBAA2C,MAAzBl6G,KAAKw6G,kBAA4BI,IAC1DA,EAAqB1mE,EAAO7kC,WAAarP,KAAKw6G,kBAE5Cx6G,KAAKi6G,oBAAmD,MAA7Bj6G,KAAKu6G,sBAAgCK,IAClEA,EAC2B,MAAzB1mE,EAAO9kC,iBACkB,MAAxB8kC,EAAOvkC,eAAyD,IAAhCukC,EAAOvkC,cAAc3M,SAEtDhD,KAAKi6G,oBAAmD,MAA7Bj6G,KAAKu6G,sBAAgCK,IAClEA,EAC0B,MAAxB1mE,EAAOvkC,eAAyBukC,EAAOvkC,cAAcinD,SAAS52D,KAAKu6G,uBAEpC,MAA/Bv6G,KAAK06G,wBAAkCE,IACzCA,EAAqB1mE,EAAO9kC,iBAAmBpP,KAAK06G,wBAElD16G,KAAKm6G,aAAeS,IACtBA,EAA+C,OAA1B1mE,EAAO9kC,gBAEvBwrG,I,4BClEN,MAAMC,GAQX/6G,YAAY0J,GACVzB,OAAOC,OAAOhI,KAAMwJ,GALtBsxG,MAAM17G,GACJ,OAAwB,MAAjBY,KAAK+6G,UAAoB/6G,KAAK+6G,SAAS7yG,QAAQjF,GAASA,EAAE7D,KAAOA,IAAI4D,OAAS,GCiBlF,MAAe,ICvBf,MAAe,ICIf,MAAe,ICEf,MAAe,ICJf,MAAe,ICGf,MAAe,I,2SCaf,MAAM,GACXlD,YACYskC,EACAuhB,EACA8C,EACA/C,EACA8pB,EACA9U,GALA,KAAAt2B,aAAAA,EACA,KAAAuhB,oBAAAA,EACA,KAAA8C,cAAAA,EACA,KAAA/C,cAAAA,EACA,KAAA8pB,kBAAAA,EACA,KAAA9U,cAAAA,EAGNsgD,0BAA0BC,G,gDACxBj7G,KAAKokC,aAAayrE,sBAAsBnrG,MAAM9B,KAAKq4G,OAGrDC,4B,0CACJ,OAAO,IAAI5lE,UAAUt1C,KAAKokC,aAAawrE,4BAGnCuL,qB,0CACJ,aAAan7G,KAAK2lD,oBAAoBzN,YAGxCkjE,mBAAmBhsG,GACjB,MAAMisG,EAAwBC,GAAgC,mCAC5D,IAAI/zF,EACJ,GAAsB,MAAlBnY,EAAwB,CAC1B,MAAMuF,QAAgB3U,KAAK0lD,cAAcvN,kBACnCojE,EAAa5mG,EAAQzM,QAAQ3C,GAAMA,EAAE6J,gBAAkBA,IAC7DmY,EAAU+zF,EAAcpzG,QACrB+H,GACCsrG,EAAWrzG,QAAQszG,GAAOA,EAAGnsG,UAAYY,EAAE7Q,KAAI4D,OAAS,GACxD2R,EAAQzM,QAAQ3C,GAAMA,EAAE8J,UAAYY,EAAE7Q,KAAI4D,OAAS,SAGvDukB,EAAU+zF,EAEZ,MAAMG,QAAsBz7G,KAAK07G,oBAAoBn0F,GACrD,OAAO,IAAIszF,GAA4B,CACrCE,SAAUxzF,EACVo0F,WAAYF,OAIhB,OAAOz7G,KAAKyoD,cAAc+B,aAAaoxD,MACrC,EAAAC,GAAA,IAAUt0F,IAAY,EAAA3kB,GAAA,GAAKy4G,EAAe9zF,OAIxCu0F,iBAAiB1sG,G,0CACrB,MAAM2sG,QAA0B/7G,KAAKwvE,kBAAkBr3B,kBACvD,IAAInhC,EAEFA,EADoB,MAAlB5H,EACY2sG,EAAkB7zG,QAAQ3C,GAAMA,EAAE6J,iBAAmBA,IAErD2sG,EAEhB,MAAMC,QAA0Bh8G,KAAKwvE,kBAAkB1uB,aAAa9pC,GACpE,OAAO,IAAI6jG,GAAgC,CACzCE,SAAU/jG,EACV2kG,WAAYK,OAIVC,mC,0CACJ,aAAaj8G,KAAK06D,cAAc+F,oBAAoB3H,GAAWojD,cAG3DC,kC,0CACJ,aAAan8G,KAAK06D,cAAc+F,oBAAoB3H,GAAWsjD,sBAGjDV,oBAAoBn0F,G,0CAClC,MAAMw5B,EAAgC,GAQtC,OAPAx5B,EAAQtgB,SAASgJ,IACf,MAAMosG,EAAa,IAAIl0D,GACvBk0D,EAAWj9G,GAAK6Q,EAAE7Q,GAClBi9G,EAAWlwG,aAAe8D,EAAE9D,aAC5B,MAAMhF,EAAkB,MAAV8I,EAAEhO,KAAegO,EAAEhO,KAAKoC,QAAQ,aAAc,IAAI2C,MAhF7C,KAgFuE,GAC1F04C,GAAaK,eAAegB,EAAO,EAAG55C,EAAOk1G,EAAY,KAjFtC,QAmFdt7D,KAGHu7D,gBAAgBl9G,G,0CACpB,MAAMmoB,QAAgBvnB,KAAK07G,0BACnB,EAAAnxD,GAAA,GAAevqD,KAAKyoD,cAAc+B,eAE1C,OAAO9K,GAAaO,kBAAkB14B,EAASnoB,O,kCAvFtC,IAAkB,oH,yCAAlB,GAAkB,QAAlB,GAAkB,OCXxB,MAAMm9G,WAA2B,GAMtCz8G,YACEskC,EACAuhB,EACA8C,EACA/C,EACA8pB,EACA9U,GAEApvD,MACE84B,EACAuhB,EACA8C,EACA/C,EACA8pB,EACA9U,GAnBJ,KAAA8hD,YAA2B,IAAIxC,GAE/B,KAAAyC,UAAY,YACZ,KAAAC,QAAU,UAkBR18G,KAAKw8G,YAAYrC,aAAc,EAC/Bn6G,KAAKw8G,YAAY9B,uBAAyB,KAG5CiC,iBACE,OAAO38G,KAAKw8G,YAGdI,eAAe10G,GACTA,IAAWlI,KAAKy8G,WAClBz8G,KAAKw8G,YAAYrC,aAAc,EAC/Bn6G,KAAKw8G,YAAY9B,uBAAyB,MACjCxyG,IAAWlI,KAAK08G,SACzB18G,KAAKw8G,YAAYrC,aAAc,EAC/Bn6G,KAAKw8G,YAAY9B,uBAAyB,OAE1C16G,KAAKw8G,YAAYrC,aAAc,EAC/Bn6G,KAAKw8G,YAAY9B,uBAAyBxyG,GAI9C6rC,QACE/zC,KAAK48G,eAAe58G,KAAKy8G,WAG3BI,6BAA6B3oE,GAC3B,IAAKl0C,KAAKw8G,YAAY9B,yBAA2B16G,KAAKw8G,YAAYrC,YAChE,OAAO,EAET,GAAIn6G,KAAKw8G,YAAY9B,wBACnB,GAAIxmE,EAAO9kC,iBAAmBpP,KAAKw8G,YAAY9B,uBAC7C,OAAO,OAEJ,GAAI16G,KAAKw8G,YAAYrC,cACrBjmE,EAAO9kC,eACV,OAAO,EAGX,OAAO,G,slBClEI,MAAM0tG,WCYd,MAGLh9G,YACU4lD,EACA+C,EACA+mB,EACAvrC,EACEt6B,EACFu6B,EACAwR,EACAxrB,EACAwwC,EACAn0B,EACAnC,EACA6C,EACA81E,EAAqD,KACrDC,EAA0E,MAb1E,KAAAt3D,cAAAA,EACA,KAAA+C,cAAAA,EACA,KAAA+mB,kBAAAA,EACA,KAAAvrC,cAAAA,EACE,KAAAt6B,qBAAAA,EACF,KAAAu6B,iBAAAA,EACA,KAAAwR,cAAAA,EACA,KAAAxrB,aAAAA,EACA,KAAAwwC,cAAAA,EACA,KAAAn0B,oBAAAA,EACA,KAAAnC,aAAAA,EACA,KAAA6C,YAAAA,EACA,KAAA81E,eAAAA,EACA,KAAAC,kBAAAA,EAhBF,KAAAn7G,QAAS,EAmBjB2H,KAAKo8C,GACC5lD,KAAK6B,SAIT7B,KAAK6B,QAAS,EACV+jD,GACF5lD,KAAKi9G,cAITA,aACEj9G,KAAKk9G,oBACLp3D,aAAY,IAAM9lD,KAAKk9G,qBAAqB,KAGxCA,oB,0CACJ,WAAUl9G,KAAK2J,qBAAqB88F,cAIpC,IAAK,MAAMxwF,KAAUjW,KAAKokC,aAAaooE,SAAS/8C,WAChC,MAAVx5C,UAAyBjW,KAAKm9G,WAAWlnG,YACrCjW,KAAKo9G,qBAAqBnnG,OAKhConG,KAAKC,GAAgB,EAAOrnG,G,0CAEhC,SADqBjW,KAAKokC,aAAaiF,mBAAmB,CAAEpzB,OAAQA,IACpE,CAIA,SAAUjW,KAAKumC,oBAAoBgqB,sBAAuB,CACxD,MAAMgtD,QAAev9G,KAAKw9G,eAEvBD,EAAO,IAA8D,aAAjDv9G,KAAKokC,aAAaiuC,6BAAwCkrC,EAAO,WAEhEv9G,KAAKy9G,8BACrBz9G,KAAK+oC,OAAO9yB,IAIR,MAAVA,GAAkBA,WAAkBjW,KAAKokC,aAAagU,eACxDp4C,KAAK01C,cAAcO,mBACbj2C,KAAKyoD,cAActS,oBAGrBn2C,KAAKokC,aAAasvE,qBAAoB,EAAM,CAAEz9F,OAAQA,UACtDjW,KAAKokC,aAAa6B,oBAAmB,EAAM,CAAEhwB,OAAQA,UACrDjW,KAAKokC,aAAaw7D,uBAAuB,KAAM,CAAE3pF,OAAQA,UAEzDjW,KAAKikC,cAAcu7D,UAAS,EAAOvpF,SACnCjW,KAAKikC,cAAck8D,cAAa,EAAMlqF,SACtCjW,KAAKikC,cAAcg8D,cAAa,EAAMhqF,SACtCjW,KAAKikC,cAAc87D,aAAY,EAAM9pF,SAErCjW,KAAK0lD,cAAcvP,WAAWlgC,SAC9BjW,KAAKwvE,kBAAkBr5B,WAAWlgC,GAExCjW,KAAKkkC,iBAAiBtX,KAAK,SAAU,CAAE3W,OAAQA,IAEpB,MAAvBjW,KAAK+8G,uBACD/8G,KAAK+8G,eAAe9mG,QAIxB8yB,OAAO9yB,G,0CACmB,MAA1BjW,KAAKg9G,0BACDh9G,KAAKg9G,mBAAkB,EAAO/mG,OAIlCynG,uBAAuBp0F,EAAiBq0F,G,gDACtC39G,KAAKokC,aAAa8xE,gBAAgB5sF,GAIxC,MAAMxe,QAAc9K,KAAKkqB,aAAayT,WAChCnmB,QAAqBxX,KAAKkqB,aAAa0U,kBACvCp0B,QAAiBxK,KAAKkqB,aAAa4U,cACnCzzB,QAAqBrL,KAAKkqB,aAAa6U,kBAEvC6+E,QAAsB59G,KAAKokC,aAAa+xE,wBAC9B,MAAX7sF,GAA+B,IAAZA,GAA6B,WAAXq0F,GAAuBA,IAAWC,UAEpE59G,KAAKkqB,aAAaw9C,oBAGpB1nE,KAAKokC,aAAakyE,sBAAsBqH,SAExC39G,KAAKkqB,aAAasV,SAAS10B,SAC3B9K,KAAKkqB,aAAai9C,gBAAgB3vD,SAClCxX,KAAKkqB,aAAak9C,YAAY58D,SAC9BxK,KAAKkqB,aAAam9C,gBAAgBh8D,SAElCrL,KAAKikC,cAAcu8D,eAGrBgd,e,0CAGJ,MAAO,CAAiB,aAFGx9G,KAAKokC,aAAaixE,mBAEI,aADnBr1G,KAAKokC,aAAay8D,gCAI5C4c,qB,0CACJ,aAAaz9G,KAAKokC,aAAa2+D,wBAG3BD,gBAAgB7sF,G,0CACpB,MAAM81D,QAAqB/rE,KAAKokC,aAAa0+D,gBAAgB,CAAE7sF,OAAQA,IAEvE,SACQjW,KAAK06D,cAAc+F,oBAAoB3H,GAAWiI,oBAAqB,KAAM9qD,GACnF,CACA,MAAMupD,QAAex/D,KAAK06D,cAAcxiB,OAAO4gB,GAAWiI,oBAAqB9qD,GAE/E,IAAIqT,EAAU7jB,KAAKqwD,IAAIiW,EAAcvM,EAAO,GAAG7yD,KAAKw7D,SAWpD,OAToB,MAAhB4D,GAAwBziD,EAAU,KACpCA,EAAUk2C,EAAO,GAAG7yD,KAAKw7D,SAIvB4D,IAAiBziD,UACbtpB,KAAKokC,aAAa8xE,gBAAgB5sF,EAAS,CAAErT,OAAQA,KAGtDqT,EAGT,OAAOyiD,KAGHh4B,MAAM99B,G,gDACJjW,KAAKokC,aAAasvE,qBAAoB,EAAO,CAAEz9F,OAAQA,UACvDjW,KAAKokC,aAAagsE,yBAAyB,KAAM,CAAEn6F,OAAQA,UAC3DjW,KAAKokC,aAAakxE,gBAAgB,KAAM,CAAEr/F,OAAQA,OAG5CknG,WAAWlnG,G,0CACvB,MAAM4nG,QAAmB79G,KAAKinC,YAAYmC,cAAcnzB,GACxD,GACE4nG,IAAet+G,EAAqBsqC,QACpCg0E,IAAet+G,EAAqB+pC,UAEpC,OAAO,EAGT,MAAMyiC,QAAqB/rE,KAAK8iG,gBAAgB7sF,GAChD,GAAoB,MAAhB81D,GAAwBA,EAAe,EACzC,OAAO,EAGT,MAAMb,QAAmBlrE,KAAKokC,aAAaquC,cAAc,CAAEx8D,OAAQA,IACnE,GAAkB,MAAdi1D,EACF,OAAO,EAGT,MAAM4yC,EAAqC,GAAf/xC,EAE5B,QADqB,IAAI3/D,MAAOkuC,UAAY4wB,GAAc,KACpC4yC,KAGVV,qBAAqBnnG,G,0CAEf,kBADUjW,KAAKokC,aAAa+xE,sBAAsB,CAAElgG,OAAQA,WAC3CjW,KAAK+oC,OAAO9yB,SAAgBjW,KAAKq9G,MAAK,EAAMpnG,QDtMjFgnG,aACEj9G,KAAKk9G,oBACDl9G,KAAK2J,qBAAqB28F,WAC5BtmG,KAAK+9G,cAELj4D,aAAY,IAAM9lD,KAAKk9G,qBAAqB,KAO1Ca,c,0CAEJ,OACE,UACQz8B,GAAUmmB,iBAAiB,SACjCznG,KAAKk9G,oBACL,MAAOl+G,GAEP8iD,QAAQC,IAAI,gCAAiC/iD,Q,2SEdtC,MAAMg/G,GAInBl+G,YACUm+G,EACAC,EACAv0G,EACAw0G,EACAl3E,GAJA,KAAAg3E,KAAAA,EACA,KAAAC,0BAAAA,EACA,KAAAv0G,qBAAAA,EACA,KAAAw0G,oBAAAA,EACA,KAAAl3E,YAAAA,EAERjnC,KAAKsmG,SAAWtmG,KAAK2J,qBAAqB28F,WAC1CtmG,KAAKqmG,UAAYrmG,KAAK2J,qBAAqB08F,YAGvC78F,O,0CACJi1E,GAAW2/B,gBACT,uBACA,CAAOx6D,EAAUs8B,EAAsC/4D,IAAsB,mCACvD,oBAAhBy8B,EAAIw7B,SAAqD,wBAApBx7B,EAAIj3C,KAAK9E,eAC1C7H,KAAKq+G,eACTz6D,EAAIj3C,KAAK2xG,eAAe16D,IAAIw7B,QAC5Bx7B,EAAIj3C,KAAK2xG,eAAep+B,SAIxBlgF,KAAKqmG,WAA6B,8BAAhBziD,EAAIw7B,SAA2Cx7B,EAAI26D,iBACjEv+G,KAAKq+G,eAAez6D,EAAI26D,SAAUr+B,UAKzClgF,KAAKqmG,WAAaxnB,QAAUA,OAAO2/B,UACtC3/B,OAAO2/B,SAASC,UAAU7+B,aAAmBR,GAAoB,yCACzDp/E,KAAKq+G,eAAej/B,WAKlBi/B,eAAej/B,EAAiBc,G,0CAC5C,OAAQd,GACN,IAAK,0BACGp/E,KAAK0+G,8BACX,MACF,IAAK,uBACG1+G,KAAK2+G,cAAcz+B,EAASA,EAAOf,IAAM,MAC/C,MACF,IAAK,mBACGn/E,KAAK4+G,YACX,MACF,IAAK,mBACG5+G,KAAKm+G,oBAAoBd,MAAK,OAO5BqB,8B,0CACZ,MAAM9jD,SAAiB56D,KAAKk+G,0BAA0BriD,cAAc,GAC9DntD,QAAiB1O,KAAKk+G,0BAA0BvjD,iBAAiBC,GACvE56D,KAAK2J,qBAAqBwpE,gBAAgBzkE,EAAU,CAAEnN,SACtDvB,KAAKk+G,0BAA0BlhD,WAAWtuD,MAG9BiwG,cAAcx/B,G,0CAK1B,GAJKA,IACHA,QAAYV,GAAWogC,6BAGd,MAAP1/B,EAAJ,CAIA,UAAWn/E,KAAKinC,YAAYmC,iBAAmB7pC,EAAqBqqC,SAAU,CAC5E,MAAMk1E,EAAoD,CACxDR,eAAgB,CACd16D,IAAK,CAAEw7B,QAAS,kBAChBc,OAAQ,CAAEf,IAAKA,IAEjBt3E,OAAQ,uBASV,aAPM42E,GAAWsgC,mBACf5/B,EACA,uCACA2/B,QAGFrgC,GAAWsgC,mBAAmB5/B,EAAK,wBAI/Bn/E,KAAKi+G,KAAKe,mCAAmC7/B,EAAK,oBAG5Cy/B,Y,0CAEP5+G,KAAKsmG,UAIVtmG,KAAKi+G,KAAKW,gB,2SChGC,MAAMK,GAInBn/G,YACUm+G,EACAv4D,EACAw4D,EACAv0G,EACAs9B,EACAgtD,EACAD,GANA,KAAAiqB,KAAAA,EACA,KAAAv4D,cAAAA,EACA,KAAAw4D,0BAAAA,EACA,KAAAv0G,qBAAAA,EACA,KAAAs9B,YAAAA,EACA,KAAAgtD,aAAAA,EACA,KAAAD,YAAAA,EAVO,KAAAkrB,kBAAoB,OAYnCl/G,KAAKm/G,aAAetgC,OAAOsgC,aAGvB31G,O,0CACCxJ,KAAKm/G,eAIVn/G,KAAKm/G,aAAaC,UAAUx/B,aAC1B,CAAOn+B,EAAuC09B,IAAyB,mCAC7C,sBAApB19B,EAAK49D,iBACDr/G,KAAK0+G,8BACkB,oBAApBj9D,EAAK49D,iBACRr/G,KAAKs/G,kBAAkBngC,EAAK19B,EAAKq0C,SAEb,aAA1Br0C,EAAK89D,kBACqB,kBAA1B99D,EAAK89D,kBACqB,kBAA1B99D,EAAK89D,kBACqB,cAA1B99D,EAAK89D,yBAECv/G,KAAKw/G,aAAargC,EAAK19B,SAKnCg9B,GAAW2/B,gBACT,2BACA,CAAOx6D,EAAUs8B,EAAsC/4D,IAAsB,mCACvD,oBAAhBy8B,EAAIw7B,SAAqD,4BAApBx7B,EAAIj3C,KAAK9E,eAC1C7H,KAAKw/G,aACT57D,EAAIj3C,KAAK2xG,eAAep+B,OAAOf,IAC/Bv7B,EAAIj3C,KAAK2xG,eAAe16D,IAAIj3C,gBAOxB+xG,8B,0CACZ,MAAM9jD,SAAiB56D,KAAKk+G,0BAA0BriD,cAAc,GAC9DntD,QAAiB1O,KAAKk+G,0BAA0BvjD,iBAAiBC,GACvE56D,KAAK2J,qBAAqBwpE,gBAAgBzkE,EAAU,CAAEnN,SACtDvB,KAAKk+G,0BAA0BlhD,WAAWtuD,MAG9B4wG,kBAAkBngC,EAAsB2W,G,0CACzC,MAAP3W,GAIJV,GAAWY,eAAeF,EAAK,CAAEC,QAAS,qBAAuB,CAAE0W,QAASA,OAGhE0pB,aAAargC,EAAsB19B,G,0CAC/C,MAAMriD,EAAKqiD,EAAK49D,WAAWr4G,MAAM,KAAK,GAEtC,UAAWhH,KAAKinC,YAAYmC,iBAAmB7pC,EAAqBqqC,SAAU,CAC5E,MAAMk1E,EAAoD,CACxDR,eAAgB,CACd16D,IAAK,CAAEw7B,QAASp/E,KAAKk/G,kBAAmBvyG,KAAM80C,GAC9Cy+B,OAAQ,CAAEf,IAAKA,IAEjBt3E,OAAQ,2BASV,aAPM42E,GAAWsgC,mBACf5/B,EACA,uCACA2/B,QAGFrgC,GAAWsgC,mBAAmB5/B,EAAK,kBAIrC,IAAIjrC,EACJ,GAAI90C,IAAOY,KAAKk/G,kBAAmB,CAEjChrE,SADsBl0C,KAAK0lD,cAAc7M,sBAAsBsmC,EAAIr5E,MAClD27B,MAAMl8B,GAAMA,EAAE8K,WAAa7Q,EAAmB8Q,WAC1D,CAEL4jC,SADsBl0C,KAAK0lD,cAAcvN,mBACxB1W,MAAMl8B,GAAMA,EAAEnG,KAAOA,IAGxC,GAAc,MAAV80C,EAIJ,GAA8B,aAA1BuN,EAAK89D,uBACDv/G,KAAKy/G,kBAAkBtgC,EAAKjrC,QAC7B,GAA8B,kBAA1BuN,EAAK89D,iBACdv/G,KAAK2J,qBAAqBwpE,gBAAgBj/B,EAAOrkC,MAAMzB,SAAU,CAAE7M,cAC9D,GAA8B,kBAA1BkgD,EAAK89D,iBACdv/G,KAAK2J,qBAAqBwpE,gBAAgBj/B,EAAOrkC,MAAMnB,SAAU,CAAEnN,SACnEvB,KAAKi0F,aAAaluC,QAAQoB,GAAUu4D,4BAA6BxrE,EAAO90C,SACnE,GAA8B,cAA1BqiD,EAAK89D,iBAAkC,CAChD,MAAMI,QAAkB3/G,KAAKg0F,YAAYvgB,QAAQv/B,EAAOrkC,MAAMjB,MAC9D5O,KAAK2J,qBAAqBwpE,gBAAgBwsC,EAAW,CAAEp+G,aAI7Ck+G,kBAAkBtgC,EAAsBjrC,G,0CACpDl0C,KAAKi+G,KAAK2B,gBAAkB1rE,EACjB,MAAPirC,GAIJV,GAAWY,eAAeF,EAAK,CAC7BC,QAAS,qBACTD,IAAKA,EACLe,OAAQ,oB,2SCnIC,MAAM2/B,GAKnB//G,YACUq+G,EACA/5E,EACA07E,GAFA,KAAA3B,oBAAAA,EACA,KAAA/5E,aAAAA,EACA,KAAA07E,qBAAAA,EANF,KAAAC,UAAoB,KACpB,KAAAC,UAAY,SAOlBhgH,KAAKigH,KAAOphC,OAAOohC,OAAoB,MAAXxgC,QAAkBA,QAAQwgC,KAAO,MAGzDz2G,O,0CACJ,IAAKxJ,KAAKigH,KACR,OAGF,MAAMC,EAAeC,IACF,WAAbA,EACFngH,KAAK8/G,qBAAqB9qD,wBAE1Bh1D,KAAK8/G,qBAAqB7qD,4BAG1Bj1D,KAAKigH,KAAKG,gBAAkBpgH,KAAKigH,KAAKI,sBACxCrgH,KAAKigH,KAAKI,qBA5BK,KA6BfrgH,KAAKigH,KAAKG,eAAexgC,YAAYsgC,IAErClgH,KAAKsgH,SAASJ,GAGZlgH,KAAKigH,KAAKG,gBACZpgH,KAAKigH,KAAKG,eAAexgC,aAAmBugC,GAAqB,mCAC/D,GAAiB,WAAbA,EAAuB,CAGzB,IAAiB,WADKngH,KAAKokC,aAAa0+D,mBACpB,CAGH,kBADM9iG,KAAKokC,aAAa+xE,+BAE/Bn2G,KAAKm+G,oBAAoBp1E,eAEzB/oC,KAAKm+G,oBAAoBd,MAAK,aAQxCiD,SAASC,GACO,MAAlBvgH,KAAK+/G,YACPx+G,OAAO6oC,aAAapqC,KAAK+/G,WACzB//G,KAAK+/G,UAAY,MAEnB//G,KAAKigH,KAAKO,WA1DO,KA0DmB3yG,IAC9BA,IAAU7N,KAAKggH,YACjBhgH,KAAKggH,UAAYnyG,EACjB0yG,EAAQ1yG,IAEV7N,KAAK+/G,UAAYx+G,OAAO4oC,YAAW,IAAMnqC,KAAKsgH,SAASC,IAAU,S,2SCbhE,MAAME,GAaX3gH,YACUmkC,EACAhD,EACAy/E,EACAp5G,EACA48B,EACA9Z,EACAzgB,EACAy6B,EACAD,EACA8C,G,MATA,KAAAhD,cAAAA,EACA,KAAAhD,sBAAAA,EACA,KAAAy/E,kBAAAA,EACA,KAAAp5G,YAAAA,EACA,KAAA48B,iBAAAA,EACA,KAAA9Z,aAAAA,EACA,KAAAzgB,qBAAAA,EACA,KAAAy6B,aAAAA,EACA,KAAAD,WAAAA,EACA,KAAA8C,YAAAA,EAtBF,KAAA6sB,WAAY,EAIZ,KAAA6sD,SAAgB,KAChB,KAAA9oG,WAA0B,KAC1B,KAAAoE,UAAyB,KACzB,KAAA2kG,mBAA0B,KAiBhC5gH,KAAKokC,aAAa+qE,kCAAiC,IAE5B,QAAnB,EAAM,OAANtwB,aAAM,IAANA,YAAM,EAANA,OAAQh8D,mBAAW,eAAEg+F,UAEvBhiC,OAAOh8D,YAAYg+F,QAAQjhC,aAAa/8D,IACtC47D,GAAWqiC,gBAAgB,SAK3BC,U,0CAIJ,OAHA/gH,KAAK0J,YAAc1J,KAAKoqB,aAAaiV,WACrCr/B,KAAKokC,aAAa+qE,kCAAiC,GAE5C,IAAItwG,SAAc,CAACC,EAAS0tB,KACjCxsB,KAAKghH,KAAOviC,GAAWwC,cAAc,sBAErCjhF,KAAKihH,YAAa,EAElB,MAAMC,EAAoB,KACxBlhH,KAAK8zD,WAAY,EACjB9zD,KAAKihH,YAAa,EAClBniH,KAKEkB,KAAK2J,qBAAqB28F,YAC5B4a,IAGFlhH,KAAKghH,KAAK/gC,UAAUL,aAAmB5qE,GAAiC,mCACtE,OAAQA,EAAQoqE,SACd,IAAK,YACH8hC,IACA,MACF,IAAK,eACClhH,KAAKihH,YACPz0F,EAAO,gBAETxsB,KAAK8zD,WAAY,EACjB9zD,KAAKghH,KAAKG,aACV,MACF,IAAK,kBAAmB,CAEtB,GAAInsG,EAAQtL,QAAU1J,KAAK0J,MACzB,OAGF,MAAM4/C,EAAY1nD,EAAMuB,eAAe6R,EAAQosG,cACzCvkD,QAAkB78D,KAAKihC,sBAAsBw8C,WACjDn0B,EAAU3lD,OACV3D,KAAK6X,WAjHS,QAqHZ7X,KAAKqhH,wBACPrhH,KAAKqhH,uBAAwB,EAC7BrhH,KAAKokC,aAAa+qE,kCAAiC,IAErDnvG,KAAKohH,aAAe,IAAIvzE,GAAmBgvB,GAC3C78D,KAAK4gH,qBACL,MAEF,IAAK,uBAEH,GAAI5rG,EAAQtL,QAAU1J,KAAK0J,MACzB,OAGF1J,KAAKohH,aAAe,KACpBphH,KAAK6X,WAAa,KAClB7X,KAAK8zD,WAAY,EAEjB9zD,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCxG,KAAMpmB,KAAKsH,YAAY4J,EAAE,wCACzB7D,MAAOrN,KAAKsH,YAAY4J,EAAE,yCAC1Bg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,UAER,MACF,IAAK,oBACsB,MAArB5J,KAAKohH,eACPphH,KAAKqhH,uBAAwB,EAC7BrhH,KAAKshH,yBAEP,MAEF,IAAK,cACHthH,KAAKuhH,sBACL,MACF,QAEE,IAAKvhH,KAAK2J,qBAAqB28F,YAActxF,EAAQtL,QAAU1J,KAAK0J,MAClE,OAGF1J,KAAKigF,UAAUjrE,EAAQA,eAI7BhV,KAAKghH,KAAKQ,aAAa5hC,aAAaj4D,IAClC,IAAIlG,EAEFA,EADEg9D,GAAW8B,mBACL54D,EAAElG,MAAMzM,QAER6pE,OAAOU,QAAQC,UAAUxqE,QAGnChV,KAAKohH,aAAe,KACpBphH,KAAK6X,WAAa,KAClB7X,KAAK8zD,WAAY,EAGjBtnC,EADwB,MAAT/K,EAAgB,6BAA+B,eAMpE8/F,sBACEvhH,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCxG,KAAMpmB,KAAKsH,YAAY4J,EAAE,gCACzB7D,MAAOrN,KAAKsH,YAAY4J,EAAE,iCAC1Bg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,UAIJgjB,KAAK5X,G,0CACJhV,KAAK8zD,kBACF9zD,KAAK+gH,WAGb/rG,EAAQiB,aAAejW,KAAKokC,aAAagU,YACzCpjC,EAAQysG,UAAYr1G,KAAK09C,MAErB9pD,KAAK2J,qBAAqB28F,WAC5BtmG,KAAK0hH,YAAY1sG,GAEjBhV,KAAK0hH,YAAY,CAAEh4G,MAAO1J,KAAK0J,MAAOsL,cAAehV,KAAK2hH,eAAe3sG,QAIvE2sG,eAAe3sG,G,0CAKnB,OAJyB,MAArBhV,KAAKohH,qBACDphH,KAAK4hH,6BAGA5hH,KAAKikC,cAAcoS,QAAQpZ,KAAKC,UAAUloB,GAAUhV,KAAKohH,iBAGxES,cACE,OAAO,IAAIhjH,SAAQ,CAACC,EAAS0tB,KAC3BxsB,KAAK2gH,SAAW7hH,KAIZ4iH,YAAY1sG,GAElB,IACEhV,KAAKghH,KAAKU,YAAY1sG,GACtB,MAAOhW,GACPgB,KAAKmkC,WAAW1iB,MAAM,qDAEtBzhB,KAAKohH,aAAe,KACpBphH,KAAK6X,WAAa,KAClB7X,KAAK8zD,WAAY,EAEjB9zD,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCxG,KAAMpmB,KAAKsH,YAAY4J,EAAE,wCACzB7D,MAAOrN,KAAKsH,YAAY4J,EAAE,yCAC1Bg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,WAKEq2E,UAAU6hC,G,0CACtB,IAAI9sG,EAAU8sG,EAOd,GANK9hH,KAAK2J,qBAAqB28F,aAC7BtxF,EAAUioB,KAAKgqC,YACPjnE,KAAKikC,cAAc6I,cAAcg1E,EAAyB9hH,KAAKohH,gBAIrE37G,KAAKs8G,IAAI/sG,EAAQysG,UAAYr1G,KAAK09C,OAvPd,IAwPtB9pD,KAAKmkC,WAAW1iB,MAAM,0CADxB,CAKA,OAAQzM,EAAQoqE,SACd,IAAK,kBAAmB,CAGtB,SAFMp/E,KAAKokC,aAAa8qE,+BAA+B,MAE9B,gBAArBl6F,EAAQrJ,SAA4B,CACtC3L,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCxG,KAAMpmB,KAAKsH,YAAY4J,EAAE,4BACzB7D,MAAOrN,KAAKsH,YAAY4J,EAAE,6BAC1Bg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,UAER,MACK,GAAyB,kBAArBoL,EAAQrJ,SAA8B,CAC/C3L,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCxG,KAAMpmB,KAAKsH,YAAY4J,EAAE,8BACzB7D,MAAOrN,KAAKsH,YAAY4J,EAAE,+BAC1Bg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,UAER,MAGF,MAAMqR,QAAgBjb,KAAKokC,aAAa2+D,qBACxC,GAAgB,OAAZ9nF,IAAgC,IAAZA,EAAmB,CAChB,aAArBjG,EAAQrJ,iBACJ3L,KAAKokC,aAAakrE,oBAAmB,IAE7C,MAIF,UAAWtvG,KAAKinC,YAAYmC,mBAAqB7pC,EAAqBqqC,SACpE,MAGF,GAAyB,aAArB50B,EAAQrJ,SAAyB,OAC7B3L,KAAKikC,cAAciD,OACvB,IAAI2G,GAAmBjsC,EAAMuB,eAAe6R,EAAQg5B,QAAQrqC,SAI9D,UACQ3D,KAAKikC,cAAck6D,qBAAqBn+F,KAAKokC,aAAagU,aAChE,MAAOp5C,GASP,OARAgB,KAAKmkC,WAAW1iB,MAAM,yBAA2BziB,SAC3CgB,KAAKikC,cAAcu7D,WACzBx/F,KAAKuhH,2BAGDvhH,KAAK2gH,UACP3gH,KAAK2gH,SAAS3rG,UAKZhV,KAAKokC,aAAa6B,oBAAmB,GAC3CjmC,KAAK0gH,kBAAkBsB,eAAe,CAAE5iC,QAAS,YAAc,KAAM,MAEvE,MAEF,QACEp/E,KAAKmkC,WAAW1iB,MAAM,uCAAyCzM,EAAQoqE,SAIvEp/E,KAAK2gH,UACP3gH,KAAK2gH,SAAS3rG,OAIJ4sG,sB,0CACZ,MAAO3lG,EAAWpE,SAAoB7X,KAAKihC,sBAAsBi9C,mBAAmB,MAUpF,OATAl+E,KAAKic,UAAYA,EACjBjc,KAAK6X,WAAaA,EAElB7X,KAAKiiH,gBAAgB,CACnB7iC,QAAS,kBACTnjE,UAAWra,EAAMuC,gBAAgB8X,GACjChG,aAAcjW,KAAKokC,aAAagU,cAG3B,IAAIv5C,SAAQ,CAACC,EAAS0tB,IAAYxsB,KAAK4gH,mBAAqB9hH,OAGvDmjH,gBAAgBjtG,G,0CACvBhV,KAAK8zD,kBACF9zD,KAAK+gH,WAGb/rG,EAAQysG,UAAYr1G,KAAK09C,MAEzB9pD,KAAK0hH,YAAY,CAAEh4G,MAAO1J,KAAK0J,MAAOsL,QAASA,OAGnCssG,wB,0CACZ,MAAMY,SACEliH,KAAKikC,cAAck6D,qBAAqBn+F,KAAKokC,aAAagU,YAAap4C,KAAKic,YAClFjX,KAAK,KAEPhF,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvC06E,KAAM,GAAGtnG,KAAKsH,YAAY4J,EACxB,wDACkBgxG,aACpB70G,MAAOrN,KAAKsH,YAAY4J,EAAE,gCAC1Bg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,gBCvXZ,IAAYu4G,IAAZ,SAAYA,GACV,2BACA,uCAFF,CAAYA,KAAAA,GAA4B,K,2SCyBzB,MAAMC,GAGnBtiH,YACUuiH,EACA38D,EACAze,EACAyzB,EACAjS,EACArkB,GALA,KAAAi+E,gBAAAA,EACA,KAAA38D,cAAAA,EACA,KAAAze,YAAAA,EACA,KAAAyzB,cAAAA,EACA,KAAAjS,cAAAA,EACA,KAAArkB,aAAAA,EARF,KAAAk+E,kBAA8E,GAWhF94G,O,0CACkB,MAAlBq1E,OAAOU,UAIXd,GAAW2/B,gBACT,2BACA,CAAOx6D,EAAUs8B,IAAyC,yCAClDlgF,KAAKgiH,eAAep+D,EAAKs8B,QAInClgF,KAAKuiH,+BAGDP,eAAep+D,EAAUs8B,G,0CAC7B,OAAQt8B,EAAIw7B,SACV,IAAK,kBACH,GAAwB,4BAApBx7B,EAAIj3C,KAAK9E,OACX,aAEI7H,KAAKgiH,eAAep+D,EAAIj3C,KAAK2xG,eAAe16D,IAAKA,EAAIj3C,KAAK2xG,eAAep+B,QAC/E,MACF,IAAK,wBACGlgF,KAAKwiH,cAActiC,EAAOf,IAAKv7B,EAAI6+D,iBACzC,MACF,IAAK,+BACGhkC,GAAWsgC,mBAAmB7+B,EAAOf,IAAK,wBAChD,MACF,IAAK,gCACGV,GAAWsgC,mBAAmB7+B,EAAOf,IAAK,wBAAyBv7B,EAAIj3C,MAC7E,MACF,IAAK,mBACG3M,KAAK0iH,SAAS9+D,EAAI/zC,MAAOqwE,EAAOf,KACtC,MACF,IAAK,0BACGn/E,KAAK2iH,gBAAgB/+D,EAAIj3C,KAAMuzE,EAAOf,KAC5C,MACF,IAAK,aACL,IAAK,gBACHn/E,KAAK4iH,+BAA+B1iC,EAAOf,KAC3C,MACF,IAAK,YACL,IAAK,eACH,UAAWn/E,KAAKinC,YAAYmC,iBAAmB7pC,EAAqBqqC,SAAU,CAC5E,MAAMk1E,EAAoD,CACxDR,eAAgB,CACd16D,IAAKA,EACLs8B,OAAQA,GAEVr4E,OAAQ,2BAQV,aANM42E,GAAWsgC,mBACf7+B,EAAOf,IACP,uCACA2/B,cAEIrgC,GAAWsgC,mBAAmB7+B,EAAOf,IAAK,yBAG5Cn/E,KAAK6iH,wBAAwB3iC,EAAOf,IAAKv7B,EAAIjL,QACnD,MACF,IAAK,oBACG34C,KAAK8iH,UAAU5iC,EAAOf,KAC5B,MACF,IAAK,6BACH,OAAQv7B,EAAIs8B,QACV,IAAK,kBAAmB,CACtB,MAAMsU,EAAQx0F,KAAKqiH,gBAAgBnuB,2BAA2BtwC,EAAI3xC,eAC5DwsE,GAAWsgC,mBAAmBn7D,EAAIu7B,IAAK,6BAA8B,CACzEltE,QAAS2xC,EAAI3xC,QACbuiF,MAAOA,IAET,YAWJuuB,uBAAuB5jC,EAAuB,M,0CAClD,GAAsC,IAAlCn/E,KAAKsiH,kBAAkBt/G,OACzB,OAGF,GAAW,MAAPm8E,EAEF,YADAn/E,KAAKgjH,yBAAyB7jC,GAIhC,MAAM8jC,QAAmBxkC,GAAW4X,0BAClB,MAAd4sB,GACFjjH,KAAKgjH,yBAAyBC,MAI1BV,2BACN,IAAK,IAAIt/G,EAAIjD,KAAKsiH,kBAAkBt/G,OAAS,EAAGC,GAAK,EAAGA,IAClDjD,KAAKsiH,kBAAkBr/G,GAAGigH,QAAU,IAAI92G,MAC1CpM,KAAKsiH,kBAAkB3/E,OAAO1/B,EAAG,GAGrCknC,YAAW,IAAMnqC,KAAKuiH,4BAA4B,MAG5CS,yBAAyB7jC,GAC/B,GAAW,MAAPA,EACF,OAGF,MAAMgkC,EAAYvhH,EAAMgF,UAAUu4E,EAAIr5E,KACtC,GAAiB,MAAbq9G,EAIJ,IAAK,IAAIlgH,EAAI,EAAGA,EAAIjD,KAAKsiH,kBAAkBt/G,OAAQC,IACjD,GACEjD,KAAKsiH,kBAAkBr/G,GAAGo9E,QAAUlB,EAAI//E,IACxCY,KAAKsiH,kBAAkBr/G,GAAG4D,SAAWs8G,EAFvC,CAOInjH,KAAKsiH,kBAAkBr/G,GAAG2G,OAASu4G,GAA6BiB,SAClE3kC,GAAWsgC,mBAAmB5/B,EAAK,sBAAuB,CACxDv1E,KAAM,MACNy5G,SAAU,CACRC,cAAetjH,KAAKsiH,kBAAkBr/G,GAAGsgH,kBAGpCvjH,KAAKsiH,kBAAkBr/G,GAAG2G,OAASu4G,GAA6BqB,gBACzE/kC,GAAWsgC,mBAAmB5/B,EAAK,sBAAuB,CACxDv1E,KAAM,SACNy5G,SAAU,CACRC,cAAetjH,KAAKsiH,kBAAkBr/G,GAAGsgH,kBAI/C,OAIIX,+BAA+BzjC,GACrC,IAAK,IAAIl8E,EAAIjD,KAAKsiH,kBAAkBt/G,OAAS,EAAGC,GAAK,EAAGA,IAClDjD,KAAKsiH,kBAAkBr/G,GAAGo9E,QAAUlB,EAAI//E,IAC1CY,KAAKsiH,kBAAkB3/E,OAAO1/B,EAAG,GAKzBy/G,SAASe,EAAmCtkC,G,0CACxD,MAAM0+B,QAAmB79G,KAAKinC,YAAYmC,gBAC1C,GAAIy0E,IAAet+G,EAAqB+pC,UACtC,OAGF,MAAMo6E,EAAc9hH,EAAMgF,UAAU68G,EAAU39G,KAC9C,GAAmB,MAAf49G,EACF,OAGF,IAAIC,EAAqBF,EAAUr1G,SACT,MAAtBu1G,IACFA,EAAqBA,EAAmBt8G,eAG1C,MAAMu8G,QAAyB5jH,KAAKokC,aAAamsE,iCACjD,GAAIsN,IAAet+G,EAAqBsqC,OAAQ,CAC9C,GAAI+5E,EACF,OAGF,WAAY5jH,KAAK6jH,0BACf,OAIF,YADA7jH,KAAK8jH,oBAAoBJ,EAAaD,EAAWtkC,GAAK,GAIxD,MACM4kC,SADgB/jH,KAAK0lD,cAAc7M,sBAAsB4qE,EAAU39G,MACzCoC,QAC7B3C,GAA0B,MAApBA,EAAEsK,MAAMzB,UAAoB7I,EAAEsK,MAAMzB,SAAS/G,gBAAkBs8G,IAExE,GAA+B,IAA3BI,EAAgB/gH,OAAc,CAChC,GAAI4gH,EACF,OAGF,WAAY5jH,KAAK6jH,0BACf,OAGF7jH,KAAK8jH,oBAAoBJ,EAAaD,EAAWtkC,QAC5C,GACsB,IAA3B4kC,EAAgB/gH,QAChB+gH,EAAgB,GAAGl0G,MAAMnB,WAAa+0G,EAAU/0G,SAChD,CAGA,SADQ1O,KAAKokC,aAAa0sE,wCAExB,OAEF9wG,KAAKgkH,0BAA0BD,EAAgB,GAAG3kH,GAAIskH,EAAaD,EAAU/0G,SAAUywE,OAI7E2kC,oBACZJ,EACAD,EACAtkC,EACAmkC,GAAgB,G,0CAGhBtjH,KAAK4iH,+BAA+BzjC,GACpC,MAAMnqE,EAAgC,CACpCpL,KAAMu4G,GAA6BiB,SACnCh1G,SAAUq1G,EAAUr1G,SACpBM,SAAU+0G,EAAU/0G,SACpB7H,OAAQ68G,EACRl1G,IAAKi1G,EAAU39G,IACfu6E,MAAOlB,EAAI//E,GACX8jH,QAAS,IAAI92G,MAAK,IAAIA,MAAOkuC,UAAY,KACzCipE,eAAgBD,GAElBtjH,KAAKsiH,kBAAkBvsG,KAAKf,SACtBhV,KAAK+iH,uBAAuB5jC,MAGtBwjC,gBAAgBsB,EAA0C9kC,G,0CACtE,MAAMukC,EAAc9hH,EAAMgF,UAAUq9G,EAAWn+G,KAC/C,GAAmB,MAAf49G,EACF,OAGF,UAAW1jH,KAAKinC,YAAYmC,iBAAmB7pC,EAAqBqqC,SAElE,YADA5pC,KAAKgkH,0BAA0B,KAAMN,EAAaO,EAAW/jD,YAAaif,GAAK,GAIjF,IAAI//E,EAAa,KACjB,MAAMuV,QAAgB3U,KAAK0lD,cAAc7M,sBAAsBorE,EAAWn+G,KAC1E,GAAkC,MAA9Bm+G,EAAWC,gBAAyB,CACtC,MAAMC,EAAkBxvG,EAAQzM,QAC7B3C,GAAMA,EAAEsK,MAAMnB,WAAau1G,EAAWC,kBAEV,IAA3BC,EAAgBnhH,SAClB5D,EAAK+kH,EAAgB,GAAG/kH,SAEE,IAAnBuV,EAAQ3R,SACjB5D,EAAKuV,EAAQ,GAAGvV,IAER,MAANA,GACFY,KAAKgkH,0BAA0B5kH,EAAIskH,EAAaO,EAAW/jD,YAAaif,MAI9D6kC,0BACZ7tG,EACAutG,EACAxjD,EACAif,EACAmkC,GAAgB,G,0CAGhBtjH,KAAK4iH,+BAA+BzjC,GACpC,MAAMnqE,EAAyC,CAC7CpL,KAAMu4G,GAA6BqB,eACnCrtG,SAAUA,EACV+pD,YAAaA,EACbr5D,OAAQ68G,EACRrjC,MAAOlB,EAAI//E,GACX8jH,QAAS,IAAI92G,MAAK,IAAIA,MAAOkuC,UAAY,KACzCipE,eAAgBD,GAElBtjH,KAAKsiH,kBAAkBvsG,KAAKf,SACtBhV,KAAK+iH,uBAAuB5jC,MAGtB0jC,wBAAwB1jC,EAAsB9vE,G,0CAC1D,IAAK,IAAIpM,EAAIjD,KAAKsiH,kBAAkBt/G,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC3D,MAAMmhH,EAAepkH,KAAKsiH,kBAAkBr/G,GAC5C,GACEmhH,EAAa/jC,QAAUlB,EAAI//E,IAC1BglH,EAAax6G,OAASu4G,GAA6BiB,UAClDgB,EAAax6G,OAASu4G,GAA6BqB,eAErD,SAGF,MAAML,EAAYvhH,EAAMgF,UAAUu4E,EAAIr5E,KACtC,GAAiB,MAAbq9G,GAAqBA,IAAciB,EAAav9G,OAApD,CAOA,GAHA7G,KAAKsiH,kBAAkB3/E,OAAO1/B,EAAG,GACjCw7E,GAAWsgC,mBAAmB5/B,EAAK,wBAE/BilC,EAAax6G,OAASu4G,GAA6BqB,eAAgB,CACrE,MAAMa,EAAwBD,EACxBlwE,QAAel0C,KAAKskH,uBAAuBD,EAAsBluG,UACvE,GAAc,MAAV+9B,EACF,OAGF,kBADMl0C,KAAKukH,aAAarwE,EAAQmwE,EAAsBnkD,cAIxD,GAAIkkD,EAAax6G,OAASu4G,GAA6BiB,SAAU,CAC/D,IAAKgB,EAAab,eAGhB,aAFMvjH,KAAKwkH,gBAAgBJ,EAAsC/0G,QACjEovE,GAAWsgC,mBAAmB5/B,EAAK,eAKrC,MAAMslC,EAAkBL,EAElBL,SADgB/jH,KAAK0lD,cAAc7M,sBAAsB4rE,EAAgBj2G,MAC/CtG,QAC7B3C,GACqB,MAApBA,EAAEsK,MAAMzB,UAAoB7I,EAAEsK,MAAMzB,SAAS/G,gBAAkBo9G,EAAgBr2G,WAGnF,GAAI21G,EAAgB/gH,QAAU,EAE5B,kBADMhD,KAAKukH,aAAaR,EAAgB,GAAIU,EAAgB/1G,iBAIxD1O,KAAKwkH,gBAAgBC,EAAiBp1G,GAC5CovE,GAAWsgC,mBAAmB5/B,EAAK,qBAK3BqlC,gBAAgBJ,EAAoC/0G,G,0CAChE,MAAMq1G,EAAa,IAAIz0E,GACjBgP,EAAW,IAAI1N,GACrB0N,EAASzwC,IAAM41G,EAAa51G,IAC5Bk2G,EAAW51G,KAAO,CAACmwC,GACnBylE,EAAWt2G,SAAWg2G,EAAah2G,SACnCs2G,EAAWh2G,SAAW01G,EAAa11G,SACnC,MAAM8jC,EAAQ,IAAI/B,GAMlB,GALA+B,EAAMvwC,KAAOL,EAAMkwC,YAAYsyE,EAAa51G,MAAQ41G,EAAav9G,OACjE2rC,EAAMvwC,KAAOuwC,EAAMvwC,KAAKoC,QAAQ,SAAU,IAC1CmuC,EAAM5oC,KAAOnK,EAAW6rC,MACxBkH,EAAM3iC,MAAQ60G,GAET9iH,EAAMyT,mBAAmBhG,GAAW,QACjB,EAAAk7C,GAAA,GAAevqD,KAAKyoD,cAAc+B,eAC5Cpa,MAAMtrC,GAAMA,EAAE1F,KAAOiQ,MAC/BmjC,EAAMnjC,SAAWA,GAIrB,MAAM6kC,QAAel0C,KAAK0lD,cAAcrP,QAAQ7D,SAC1CxyC,KAAK0lD,cAAc5K,eAAe5G,MAG5BowE,uBAAuBnuG,G,0CACnC,MAAM+9B,QAAel0C,KAAK0lD,cAAcrlB,IAAIlqB,GAC5C,OAAc,MAAV+9B,GAAkBA,EAAOtqC,OAASnK,EAAW6rC,YAClC4I,EAAOzH,UAEf,QAGK83E,aAAarwE,EAAoBgsB,G,0CAC7C,GAAc,MAAVhsB,GAAkBA,EAAOtqC,OAASnK,EAAW6rC,MAAO,CACtD4I,EAAOrkC,MAAMnB,SAAWwxD,EACxB,MAAMykD,QAAkB3kH,KAAK0lD,cAAcrP,QAAQnC,SAC7Cl0C,KAAK0lD,cAAc5K,eAAe6pE,OAI9B7B,UAAU3jC,G,0CACtB,IAAK,IAAIl8E,EAAIjD,KAAKsiH,kBAAkBt/G,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC3D,MAAMmhH,EAAepkH,KAAKsiH,kBAAkBr/G,GAC5C,GACEmhH,EAAa/jC,QAAUlB,EAAI//E,IAC3BglH,EAAax6G,OAASu4G,GAA6BiB,SAEnD,SAGF,MAAMD,EAAYvhH,EAAMgF,UAAUu4E,EAAIr5E,KACtC,GAAiB,MAAbq9G,GAAqBA,IAAciB,EAAav9G,OAClD,SAGF7G,KAAKsiH,kBAAkB3/E,OAAO1/B,EAAG,GACjCw7E,GAAWsgC,mBAAmB5/B,EAAK,wBAEnC,MAAMn5E,EAAWpE,EAAMkwC,YAAYqtC,EAAIr5E,WACjC9F,KAAK0lD,cAAc/K,gBAAgB30C,OAI/Bw8G,cAAcrjC,EAAsBsjC,G,0CAChD,MAAM9gC,EAAoB,GACF,kCAApB8gC,IACF9gC,EAAap6D,cAAgB,EAAAgjC,GAAA,GAAevqD,KAAKyoD,cAAc+B,qBAG3Di0B,GAAWsgC,mBAAmB5/B,EAAKsjC,EAAiB9gC,MAG9CkiC,yB,0CACZ,cAAe7jH,KAAK06D,cAAc+F,oBAAoB3H,GAAWsjD,wB,2SCjbtD,MAAMwI,GAMnB9kH,YACUm+G,EACAoE,EACA14G,EACArC,EACAw4G,EACA+E,EACA16F,EACA+Z,EACAC,GARA,KAAA85E,KAAAA,EACA,KAAAoE,gBAAAA,EACA,KAAA14G,qBAAAA,EACA,KAAArC,YAAAA,EACA,KAAAw4G,qBAAAA,EACA,KAAA+E,cAAAA,EACA,KAAA16F,mBAAAA,EACA,KAAA+Z,iBAAAA,EACA,KAAAC,WAAAA,EAbF,KAAA2gF,sBAA+B,GAC/B,KAAAC,kBAA4B,KAC5B,KAAAC,gCAAyE,GAc/EnmC,OAAOU,QAAQ0lC,YAAYrlC,aAAa3tE,IACtCjS,KAAK+kH,kBAAoB9yG,EAAQizG,UAI/B17G,O,0CACJ,IAAKq1E,OAAOU,QACV,aAGIv/E,KAAKmlH,mBACX,MAAMC,EAA4B,CAChCxhE,EACAs8B,EACA/4D,IACG,yCACGnnB,KAAKgiH,eAAep+D,EAAKs8B,EAAQ/4D,MAGzCs3D,GAAW2/B,gBAAgB,qBAAsBgH,GAC7CplH,KAAKi+G,KAAKoH,gBACX9jH,OAAe+jH,mCAAqCF,MAInDpD,eAAep+D,EAAUs8B,EAAa/4D,G,oDAC1C,OAAQy8B,EAAIw7B,SACV,IAAK,WACL,IAAK,WAAY,CACf,IAAIzpE,GAEoC,QAApC,EAAA3V,KAAKglH,uCAA+B,eAAEhiH,QAAS,UAC3Cy7E,GAAW8mC,gBAEjB5vG,EAAO3V,KAAKglH,gCAAgC5nD,OACT,QAA/B,EAA0B,QAA1B,EAAAznD,EAAK2oG,eAAep+B,cAAM,eAAEf,WAAG,eAAE//E,YAC7Bq/E,GAAW+mC,kBAAkB7vG,EAAK2oG,eAAep+B,OAAOf,IAAI//E,YAIhEY,KAAKi+G,KAAKwH,gBACVzlH,KAAKi+G,KAAKyH,qBAAoB,GACpC1lH,KAAK8/G,qBAAqBhrD,iBAAiC,aAAhBlR,EAAIw7B,SAC/Cp/E,KAAK6kH,cAActyC,sBAEf58D,UACI8oE,GAAWsgC,mBACfppG,EAAK2oG,eAAep+B,OAAOf,IAC3B,kBACAxpE,IAGJ,MAEF,IAAK,uCACH3V,KAAKglH,gCAAgCjvG,KAAK6tC,EAAIj3C,MAC9C,MACF,IAAK,eACG3M,KAAKi+G,KAAK0H,OAAO/hE,EAAIgiE,QAAShiE,EAAI3tC,QACxC,MACF,IAAK,gBACC2tC,EAAI0tB,cACNnnC,YAAW,IAAY,gDAAMnqC,KAAKi+G,KAAKyH,0BAAuB,KAEhE,MACF,IAAK,kBACG1lH,KAAKi+G,KAAKW,YAChB,MACF,IAAK,uBACGngC,GAAWqoB,aAAa,sCAAsC,GAAM,GAC1E,MACF,IAAK,oBACH9mG,KAAK2J,qBAAqB8+F,qBAAqB7kD,EAAIyjD,SAAUzjD,EAAI8kD,WACjE,MACF,IAAK,6BACG1oG,KAAKi+G,KAAKe,mCAAmC9+B,EAAOf,IAAKv7B,EAAIs8B,OAAQA,EAAO4V,SAClF,MACF,IAAK,sBACL,IAAK,eACL,IAAK,cACL,IAAK,sBACG91F,KAAKi+G,KAAKyH,sBAChB,MACF,IAAK,wBACG1lH,KAAKi+G,KAAK4H,gBAChB,MACF,IAAK,6BACH,OAAQjiE,EAAIs8B,QACV,IAAK,aACL,IAAK,eAAgB,CACnB,MAAMkW,QAAiBp2F,KAAKqiH,gBAAgBpsB,oBAC1C,CACE,CACEH,QAAS5V,EAAO4V,QAChB3W,IAAKv7B,EAAIu7B,IACTltE,QAAS2xC,EAAI3xC,UAGF,iBAAf2xC,EAAIs8B,QAEU,MAAZkW,GACFp2F,KAAK2J,qBAAqBwpE,gBAAgBijB,EAAU,CAAE70F,SAExD,MAEF,IAAK,cACH6oC,aAAapqC,KAAK8lH,iBAClB9lH,KAAK8kH,sBAAsB/uG,KAAK,CAC9B+/E,QAAS5V,EAAO4V,QAChB3W,IAAKv7B,EAAIu7B,IACTltE,QAAS2xC,EAAI3xC,UAEfjS,KAAK8lH,gBAAkB37E,YAAW,IAAY,gDAAMnqC,KAAK+lH,mBAAgB,KAK7E,MACF,IAAK,aAAc,CACjB,MAAMC,EAAWhmH,KAAKmqB,mBAAmBo6B,iBAEzC,GAAoB,MAAhBX,EAAIqiE,UAAoBrkH,EAAMkwC,YAAYk0E,KAAcpiE,EAAIqiE,SAC9D,OAGF,IACExnC,GAAWqoB,aACT,gDACErjG,mBAAmBmgD,EAAI1kD,MACvB,UACAuE,mBAAmBmgD,EAAI/1C,QAE3B,SACA7N,KAAKmkC,WAAW1iB,MAAM,iCAExB,MAEF,IAAK,iBAAkB,CACrB,MAAMukG,EAAWhmH,KAAKmqB,mBAAmBo6B,iBAEzC,GAAoB,MAAhBX,EAAIqiE,UAAoBrkH,EAAMkwC,YAAYk0E,KAAcpiE,EAAIqiE,SAC9D,OAGF,MAAM/lF,EACJ,oBAAoBz8B,mBAAmBmgD,EAAIj3C,kBAC/BlJ,mBAAmBmgD,EAAIz4C,YACrCszE,GAAWqoB,aACT,2CAA2C5mE,SAC3Cn0B,GACA,GAEF,MAEF,IAAK,cACH/L,KAAKkkC,iBAAiBtX,KAAK,eAC3B,MACF,IAAK,4BACH5sB,KAAKkkC,iBAAiBtX,KAAK,aAAc,CACvCy6E,SAAU,4BACVh6F,MAAOrN,KAAKsH,YAAY4J,EAAE,6BAC1BkV,KAAMpmB,KAAKsH,YAAY4J,EAAE,iCACzBg2F,YAAalnG,KAAKsH,YAAY4J,EAAE,MAChCtH,KAAM,SAER,MACF,IAAK,4BACH5J,KAAK2J,qBAAqBwpE,gBAAgBvvB,EAAI75C,WAAY,CAAExI,aAOpDwkH,e,0CACZ,MAAM3vB,QAAiBp2F,KAAKqiH,gBAAgBttB,WAAW,CACrD7gD,OAAQl0C,KAAKi+G,KAAK2B,gBAClBzrB,YAAan0F,KAAK8kH,sBAClBnvB,iBAAiB,IAGH,MAAZS,GACFp2F,KAAK2J,qBAAqBwpE,gBAAgBijB,EAAU,CAAE70F,SAIxDvB,KAAKi+G,KAAK2B,gBAAkB,KAC5B5/G,KAAK8kH,sBAAwB,MAGjBK,mB,0CACZh7E,YAAW,IAAY,mCACS,MAA1BnqC,KAAK+kH,oBACwB,YAA3B/kH,KAAK+kH,mBACPtmC,GAAWqoB,aAAa,wCAG1B9mG,KAAK+kH,kBAAoB,UAE1B,S,2SCrOQ,MAAMmB,GACnBpmH,YACUm+G,EACAkI,GADA,KAAAlI,KAAAA,EACA,KAAAkI,uBAAAA,EAKJ38G,O,0CACCq1E,OAAOK,MAASL,OAAOC,UAI5BD,OAAOC,QAAQsnC,eAAexmC,aAAmBhB,GAAqB,mCACnD,OAAbA,GAAqBA,EAAW,IAIpC5+E,KAAKqmH,gBAAkBznC,EACvB5+E,KAAKi+G,KAAK/5E,iBAAiBtX,KAAK,uBAGlCiyD,OAAOK,KAAKonC,YAAY1mC,aAAmB2mC,GAA0C,yCAC7EvmH,KAAKi+G,KAAKyH,sBAChB1lH,KAAKi+G,KAAK/5E,iBAAiBtX,KAAK,mBAGlCiyD,OAAOK,KAAKsnC,WAAW5mC,aAAY,CAAO6mC,EAAoBC,IAAyB,mCACjF1mH,KAAKi+G,KAAK0I,gBAGd3mH,KAAKi+G,KAAK0I,eAAgB,QAEpB3mH,KAAKmmH,uBAAuBpD,+BAC5B/iH,KAAKi+G,KAAKyH,sBAChB1lH,KAAKi+G,KAAK/5E,iBAAiBtX,KAAK,oBAGlCiyD,OAAOK,KAAK0nC,UAAUhnC,aACpB,CAAOS,EAAewmC,EAAuC1nC,IAAyB,mCAChFn/E,KAAKqmH,gBAAkB,GAAKlnC,EAAIP,UAAY5+E,KAAKqmH,iBAIhDlnC,EAAIR,SAIL3+E,KAAKi+G,KAAK6I,eAGd9mH,KAAKi+G,KAAK6I,cAAe,QAEnB9mH,KAAKmmH,uBAAuBpD,uBAAuB5jC,SACnDn/E,KAAKi+G,KAAKyH,sBAChB1lH,KAAKi+G,KAAK/5E,iBAAiBtX,KAAK,0B,2SCpDzB,MAAMm6F,GAKnBjnH,YACE6J,EACQ+7C,EACAze,GADA,KAAAye,cAAAA,EACA,KAAAze,YAAAA,EAPF,KAAA+/E,oBAA6B,GASnChnH,KAAKinH,WAAc1lH,OAAes9E,OAAOooC,WACzCjnH,KAAKimG,UAAYt8F,EAAqBs8F,YAGlCz8F,O,0CACCxJ,KAAKinH,YAAejnH,KAAKinH,WAAWC,iBAIzClnH,KAAKinH,WAAWC,eAAetnC,aAC7B,CAAO3tE,EAAc+2B,IAAkB,mCACrC,GAAK/2B,EAAQnM,MAAgE,IAAzD9F,KAAKgnH,oBAAoB3gH,QAAQ4L,EAAQk1G,WAA7D,CASA,GAFAnnH,KAAKgnH,oBAAoBjxG,KAAK9D,EAAQk1G,WAElCnnH,KAAKimG,UAEP,OAAO,IAAIpnG,SAAQ,CAAOC,EAAS0tB,IAAW,yCACtCxsB,KAAKonH,uBAAuBn1G,EAAQnM,IAAKhH,EAAS0tB,cAGpDxsB,KAAKonH,uBAAuBn1G,EAAQnM,IAAKkjC,EAAUA,QAdrDA,GACFA,QAgBN,CAAE9tB,KAAM,CAAC,aAAc,gBACvB,CAAClb,KAAKimG,UAAY,WAAa,kBAGjCjmG,KAAKinH,WAAWI,YAAYznC,aAAa3tE,GAAiBjS,KAAKsnH,oBAAoBr1G,IAAU,CAC3FiJ,KAAM,CAAC,gBAETlb,KAAKinH,WAAWM,gBAAgB3nC,aAC7B3tE,GAAiBjS,KAAKsnH,oBAAoBr1G,IAC3C,CACEiJ,KAAM,CAAC,oBAMCksG,uBAAuBvgH,EAAgBye,EAAmB7D,G,0CACtE,UAAWzhB,KAAKinC,YAAYmC,iBAAmB7pC,EAAqBqqC,SAClEnoB,SAIF,IACE,MAAM9M,QAAgB3U,KAAK0lD,cAAc7M,sBACvChyC,EACA,KACAyjC,GAAamP,MAEf,GAAe,MAAX9kC,GAAsC,IAAnBA,EAAQ3R,OAE7B,YADAye,IAIF6D,EAAQ,CACNkiG,gBAAiB,CACfp5G,SAAUuG,EAAQ,GAAG9E,MAAMzB,SAC3BM,SAAUiG,EAAQ,GAAG9E,MAAMnB,YAG/B,SACA+S,QAII6lG,oBAAoBr1G,GAC1B,MAAMhP,EAAIjD,KAAKgnH,oBAAoB3gH,QAAQ4L,EAAQk1G,WAC/ClkH,GAAK,GACPjD,KAAKgnH,oBAAoBrkF,OAAO1/B,EAAG,I,4SC1FjB1B,OAAekmH,cAAgB,ICwGxC,MAqEb3nH,YAAmBulH,GAAyB,GAAzB,KAAAA,cAAAA,EArBnB,KAAAqC,iBAAmBnmH,OAInB,KAAAq+G,gBAA8B,KAYtB,KAAA+H,kBAA2B,GAOjC,MAYMt9F,EAAiB,CAAOu7F,EAAkB3vG,IAAmB,mCACjE,aAAMjW,KAAK2lH,OAAOC,EAAS3vG,MAE7BjW,KAAKkkC,iBAAmBmhF,EACpB,IAAItgB,GACJ,IAAIH,GACR5kG,KAAKmkC,WAAa,IAAIid,IAAkB,GACxCphD,KAAKihC,sBAAwB,IAAIq5C,GAAyB/4E,QAC1DvB,KAAKugC,eAAiB,IAAIkkE,GAC1BzkG,KAAKqsE,qBAAuB,IAAIo4B,GAChCzkG,KAAKysG,qBAC8C,GAAjD5tB,OAAOU,QAAQO,cAAc8nC,iBACzB,IAAIvc,GACF,IAAI1oD,GAAe3iD,KAAKihC,sBAAuBjhC,KAAKmkC,YAAY,GAChE,IAAI6mE,GAAqBhrG,KAAKihC,wBAEhC,IAAI+wB,GACVhyD,KAAK0sG,sBAAwB,IAAItgC,GAC/BpsE,KAAKugC,eACLvgC,KAAKqsE,qBACL,IAAIhsE,EAAae,EAAa4gF,KAEhChiF,KAAKokC,aAAe,IAAIm1E,GACtBv5G,KAAKugC,eACLvgC,KAAKqsE,qBACLrsE,KAAKysG,qBACLzsG,KAAKmkC,WACLnkC,KAAK0sG,sBACL,IAAIrsG,EAAae,EAAa4gF,KAEhChiF,KAAK2J,qBAAuB,IAAIu7F,GAC9BllG,KAAKkkC,iBACLlkC,KAAKokC,cACL,CAACyuC,EAAgB20B,KACW,MAAtBxnG,KAAK6kH,eACP7kH,KAAK6kH,cAAc37C,eAAe2J,EAAgB20B,MAGtD,IAAY,mCACV,GAAsC,MAAlCxnG,KAAK6nH,0BAAmC,CAC1C,MAAMn1E,EAAU1yC,KAAK6nH,0BAA0BhG,cAE/C,UACQ7hH,KAAK6nH,0BAA0Bj7F,KAAK,CAAEwyD,QAAS,oBACrD,MAAOpgF,GACP,OAAOH,QAAQ2tB,OAAOxtB,GAGxB,OAAO0zC,EAAQ3zC,MAAM6mC,GAA+B,aAApBA,EAAOj6B,iBAI7C3L,KAAKsH,YAAc,IAAI6hG,GAAY1qB,GAAWmC,cAAcr/E,SAC5DvB,KAAK87F,eAAiB,IAAIn5C,GAAe3iD,KAAKihC,sBAAuBjhC,KAAKmkC,YAAY,GACtFnkC,KAAKikC,cAAgB,IAAIkgE,GACvBnkG,KAAKihC,sBACLjhC,KAAK87F,eACL97F,KAAK2J,qBACL3J,KAAKmkC,WACLnkC,KAAKokC,cAEPpkC,KAAKkqB,aAAe,IAAI48C,GAAa9mE,KAAKokC,cAC1CpkC,KAAKoqB,aAAe,IAAIkW,GAAatgC,KAAKugC,gBAC1CvgC,KAAKmqB,mBAAqB,IAAI05B,GAAmB7jD,KAAKokC,cACtDpkC,KAAKkhC,WAAa,IAAIjX,GACpBjqB,KAAKkqB,aACLlqB,KAAK2J,qBACL3J,KAAKmqB,mBACLnqB,KAAKoqB,cACJw7F,GAAqB5lH,KAAK2lH,OAAOC,KAEpC5lH,KAAKw1C,gBAAkB,IAAIgxB,GAAgBxmE,KAAKokC,cAChDpkC,KAAKy1C,kBAAoB,IAAIyY,GAAkBluD,KAAKmkC,WAAYnkC,KAAKkhC,YACrElhC,KAAK0lD,cAAgB,IAAInQ,GACvBv1C,KAAKikC,cACLjkC,KAAKw1C,gBACLx1C,KAAKkhC,WACLlhC,KAAKy1C,kBACLz1C,KAAKsH,aACL,IAAMtH,KAAK01C,eACX11C,KAAKmkC,WACLnkC,KAAKokC,cAEPpkC,KAAKyoD,cAAgB,IAAIuG,GACvBhvD,KAAKikC,cACLjkC,KAAKsH,YACLtH,KAAK0lD,cACL1lD,KAAKokC,cAEPpkC,KAAK2vE,iBAAmB,IAAIhhB,GAAiB3uD,KAAKyoD,cAAezoD,KAAKkhC,YACtElhC,KAAKwvE,kBAAoB,IAAInvB,GAC3BrgD,KAAKikC,cACLjkC,KAAKsH,YACLtH,KAAKokC,cAEPpkC,KAAK01C,cAAgB,IAAI6rB,GAAcvhE,KAAK0lD,cAAe1lD,KAAKmkC,WAAYnkC,KAAKsH,aACjFtH,KAAKyvE,YAAc,IAAIjK,GACrBxlE,KAAKikC,cACLjkC,KAAKkhC,WACLlhC,KAAKy1C,kBACLz1C,KAAKsH,YACLtH,KAAKihC,sBACLjhC,KAAKokC,cAEPpkC,KAAK2lD,oBAAsB,IAAI6S,GAAoBx4D,KAAKokC,cACxDpkC,KAAK06D,cAAgB,IAAIwE,GACvBl/D,KAAKokC,aACLpkC,KAAK2lD,oBACL3lD,KAAKkhC,YAEPlhC,KAAKumC,oBAAsB,IAAI8pB,GAC7BrwD,KAAKokC,aACLpkC,KAAKikC,cACLjkC,KAAKkhC,WACLlhC,KAAKkqB,aACLlqB,KAAKmkC,WACLnkC,KAAK2lD,oBACL3lD,KAAKihC,sBACL5W,GAEFrqB,KAAK8nH,mBAAqB,IAAIvL,GAC5Bv8G,KAAKokC,aACLpkC,KAAK2lD,oBACL3lD,KAAKyoD,cACLzoD,KAAK0lD,cACL1lD,KAAKwvE,kBACLxvE,KAAK06D,eAGP16D,KAAKqkC,iBAAmB,IAAI6xC,GAAiBl2E,KAAKsH,YAAatH,KAAK2J,sBAGpE,MAAMo+G,EAAO/nH,KACPgoH,EAA6B,IAAI,cClUpC,QDkUqC,c,oBAEtC,KAAAp7F,KAAO,CAACi4E,EAAoBC,EAAW,MACrC,MAAM9vF,EAAUjN,OAAOC,OAAO,GAAI,CAAEo3E,QAASylB,GAAcC,GAC3DijB,EAAKrH,kBAAkBsB,eAAehtG,EAAS+yG,EAAM,SAGzD/nH,KAAKinC,YAAc,IAAIoB,GACrBroC,KAAKikC,cACLjkC,KAAKkhC,WACLlhC,KAAKkqB,aACLlqB,KAAKoqB,aACLpqB,KAAK2J,qBACLq+G,EACAhoH,KAAKmkC,WACLnkC,KAAKumC,oBACLvmC,KAAKmqB,mBACLnqB,KAAKokC,aACLpkC,KAAKqkC,iBACLrkC,KAAKsH,aAGPtH,KAAKm+G,oBAAsB,IAAIrB,GAC7B98G,KAAK0lD,cACL1lD,KAAKyoD,cACLzoD,KAAKwvE,kBACLxvE,KAAKikC,cACLjkC,KAAK2J,qBACL3J,KAAKkkC,iBACLlkC,KAAK01C,cACL11C,KAAKkqB,aACLlqB,KAAK06D,cACL16D,KAAKumC,oBACLvmC,KAAKokC,aACLpkC,KAAKinC,aAnLuBhxB,GAAoB,mCACf,MAA7BjW,KAAK8/G,sBACP9/G,KAAK8/G,qBAAqBhrD,kBAAiB,SAEvC90D,KAAKylH,gBACLzlH,KAAK0lH,qBAAoB,GACL,MAAtB1lH,KAAK6kH,sBACD7kH,KAAK6kH,cAAcxxC,8BACnBrzE,KAAKioH,qBA6Kb59F,GAEFrqB,KAAK0vE,gBAAkB,IAAItO,GAAgBphE,KAAKokC,cAChDpkC,KAAK6zD,YAAc,IAAI0b,GACrBvvE,KAAKkhC,WACLlhC,KAAKw1C,gBACLx1C,KAAKyoD,cACLzoD,KAAK0lD,cACL1lD,KAAKikC,cACLjkC,KAAKwvE,kBACLxvE,KAAKkkC,iBACLlkC,KAAK06D,cACL16D,KAAKyvE,YACLzvE,KAAKmkC,WACLnkC,KAAKumC,oBACLvmC,KAAKokC,aACLpkC,KAAK2lD,oBACL3lD,KAAK0vE,gBACL1vE,KAAK2vE,iBACLtlD,GAEFrqB,KAAKi0F,aAAe,IAAIxuC,GACtBzlD,KAAKkhC,WACLlhC,KAAK0lD,cACL1lD,KAAKokC,aACLpkC,KAAKmkC,WACLnkC,KAAK2lD,qBAEP3lD,KAAKk+G,0BAA4B,IAAIzjD,GACnCz6D,KAAKikC,cACLjkC,KAAK06D,cACL16D,KAAKokC,cAEPpkC,KAAKg0F,YAAc,IAAIxgB,GAAYxzE,KAAKihC,sBAAuBjhC,KAAKmkC,YACpEnkC,KAAKqiH,gBAAkB,IAAItuB,GACzB/zF,KAAK0lD,cACL1lD,KAAKokC,aACLpkC,KAAKg0F,YACLh0F,KAAKi0F,aACLj0F,KAAKmkC,YAEPnkC,KAAK2sC,iBAAmB,IAAI2V,GAAiBtiD,KAAKikC,eAClDjkC,KAAKkoH,aAAe,IAAIlnF,GAAahhC,KAAKihC,sBAAuBjhC,KAAKkhC,YACtElhC,KAAKmoH,cAAgB,IAAI3/D,GACvBxoD,KAAKyoD,cACLzoD,KAAK0lD,cACL1lD,KAAKkhC,WACLlhC,KAAKikC,cACLjkC,KAAKihC,uBAEPjhC,KAAK8/G,qBAAuB,IAAIlsD,GAC9B5zD,KAAK6zD,YACL7zD,KAAKoqB,aACLpqB,KAAKkhC,WACLlhC,KAAKmqB,mBACLE,EACArqB,KAAKmkC,WACLnkC,KAAKokC,aACLpkC,KAAKinC,aAEPjnC,KAAKooH,kBAAoB,IAAIjmC,GAAkBkjC,GAE/CrlH,KAAKqoH,wBAA0B,IAAIlxC,GACjCn3E,KAAKikC,cACLjkC,KAAKsH,YACLtH,KAAKkhC,YAYPlhC,KAAK6kH,cAAgB,IAAI9yC,GACvB/xE,KAAKkkC,iBACLlkC,KAAK2J,sBAXkC,KACvC,MAAM2+G,EACJtoH,KAAK2J,qBAAqB28F,YAC1BtmG,KAAK2J,qBAAqBs8F,aAC1BjmG,KAAK2J,qBAAqBy8F,UAE5B,OADA3nB,GAAWqiC,gBAAgBwH,EAAoB/mH,OAAS,MACjD1C,QAAQC,YAOfkB,KAAKokC,cAIPpkC,KAAKsmG,SAAWtmG,KAAK2J,qBAAqB28F,WAC1CtmG,KAAKkpG,cAAgBlpG,KAAKsmG,SACtB,KACe,oBAARb,KAAuBA,IAAIyD,cAClCzD,IAAIyD,cACH3nG,OAAes9E,OAAOqqB,cAG3BlpG,KAAK0gH,kBAAoB,IAAIkE,GAC3B5kH,KACAA,KAAKqiH,gBACLriH,KAAK2J,qBACL3J,KAAKsH,YACLtH,KAAK8/G,qBACL9/G,KAAK6kH,cACL7kH,KAAKmqB,mBACLnqB,KAAKkkC,iBACLlkC,KAAKmkC,YAEPnkC,KAAK6nH,0BAA4B,IAAIpH,GACnCzgH,KAAKikC,cACLjkC,KAAKihC,sBACLjhC,KAAK0gH,kBACL1gH,KAAKsH,YACLtH,KAAKkkC,iBACLlkC,KAAKoqB,aACLpqB,KAAK2J,qBACL3J,KAAKokC,aACLpkC,KAAKmkC,WACLnkC,KAAKinC,aAEPjnC,KAAKuoH,mBAAqB,IAAIvK,GAC5Bh+G,KACAA,KAAKk+G,0BACLl+G,KAAK2J,qBACL3J,KAAKm+G,oBACLn+G,KAAKinC,aAEPjnC,KAAKmmH,uBAAyB,IAAI/D,GAChCpiH,KAAKqiH,gBACLriH,KAAK0lD,cACL1lD,KAAKinC,YACLjnC,KAAK06D,cACL16D,KAAKyoD,cACLzoD,KAAKokC,cAGPpkC,KAAKwoH,eAAiB,IAAItC,GAAelmH,KAAMA,KAAKmmH,wBACpDnmH,KAAKyoH,uBAAyB,IAAIxJ,GAChCj/G,KACAA,KAAK0lD,cACL1lD,KAAKk+G,0BACLl+G,KAAK2J,qBACL3J,KAAKinC,YACLjnC,KAAKi0F,aACLj0F,KAAKg0F,aAEPh0F,KAAK0oH,eAAiB,IAAI7I,GACxB7/G,KAAKm+G,oBACLn+G,KAAKokC,aACLpkC,KAAK8/G,sBAEP9/G,KAAK2oH,qBAAuB,IAAI5B,GAC9B/mH,KAAK2J,qBACL3J,KAAK0lD,cACL1lD,KAAKinC,aAGPjnC,KAAK4oH,0BAA4B,IAAIzwC,GACnCn4E,KAAKikC,cACLjkC,KAAKokC,aACLpkC,KAAKkhC,YAIH2nF,Y,0CAmBJ,GAlBA7oH,KAAK2sC,iBAAiB4V,eAAehhD,cAE/BvB,KAAKokC,aAAa56B,aAEjBxJ,KAAKm+G,oBAA4C30G,MAAK,SACtDxJ,KAAKsH,YAA4BkC,aACjCxJ,KAAKi0F,aAA8BzqF,MAAK,SACzCxJ,KAAK0gH,kBAAkBl3G,aACvBxJ,KAAKmmH,uBAAuB38G,aAC5BxJ,KAAKuoH,mBAAmB/+G,OAE9BxJ,KAAKqkC,iBAAiB76B,aAEhBxJ,KAAKwoH,eAAeh/G,aACpBxJ,KAAKyoH,uBAAuBj/G,aAC5BxJ,KAAK0oH,eAAel/G,aACpBxJ,KAAK2oH,qBAAqBn/G,OAE5BxJ,KAAK2J,qBAAqBs8F,cAAgBjmG,KAAKqlH,cAAe,QAEnC5mC,GAAWqqC,yBACzB7hH,SAAeyB,GAAQ,yCAC9B1I,KAAK+oH,cAAclqC,OAAOmqC,cAAe,GAAItgH,EAAItJ,UACjDY,KAAK+oH,cAAc/oH,KAAKkpG,cAAe,GAAIxgG,EAAItJ,SAGvDq/E,GAAWwqC,iBAAuBvgH,GAAQ,mCACpCA,EAAIg3E,kBACA1/E,KAAK+oH,cAAclqC,OAAOmqC,cAAe,GAAItgH,EAAItJ,UACjDY,KAAK+oH,cAAc/oH,KAAKkpG,cAAe,GAAIxgG,EAAItJ,UAK3D,OAAO,IAAIP,SAAeC,IACxBqrC,YAAW,IAAY,yCACfnqC,KAAKmqB,mBAAmBg6B,2BACxBnkD,KAAKylH,UACXzlH,KAAK21D,UAAS,GACdxrB,YAAW,IAAMnqC,KAAK8/G,qBAAqBt2G,QAAQ,MACnD1K,QACC,WAID2mH,U,0CACJ,IAAM5mC,OAAOmqC,gBAAkBhpH,KAAKkpG,eAAkBlpG,KAAKqlH,cACzD,OAGF,MAAMxH,QAAmB79G,KAAKinC,YAAYmC,gBAE1C,IAAI8/E,EAAS,GACTrL,IAAet+G,EAAqB+pC,UACtC4/E,EAAS,QACArL,IAAet+G,EAAqBsqC,SAC7Cq/E,EAAS,iBAGLlpH,KAAK+oH,cAAclqC,OAAOmqC,cAAeE,SACzClpH,KAAK+oH,cAAc/oH,KAAKkpG,cAAeggB,MAGzCxD,oBAAoByD,GAAY,G,0CACpC,IAAKtqC,OAAOC,UAAYD,OAAOsgC,aAC7B,OAGF,MAAMiK,QAAqBppH,KAAKokC,aAAa4sE,4BAO7C,GANKoY,QAGGppH,KAAKqpH,8BAFLrpH,KAAKspH,mBAKTH,EAGF,aAFMnpH,KAAKupH,wCAAwCH,QACnDppH,KAAK8mH,aAAe9mH,KAAK2mH,eAAgB,GAI3C,MAAMxnC,QAAYV,GAAW4X,0BACzBlX,UACIn/E,KAAKwpH,iBAAiBrqC,GAAMiqC,OAIhCzD,OAAOC,EAAkB3vG,G,gDACvBjW,KAAKi0F,aAAapuC,aAAa5vC,SAE/BpX,QAAQ+uC,IAAI,CAChB5tC,KAAKi0F,aAAa1tC,YAAYtwC,GAC9BjW,KAAK6zD,YAAYic,YAAY,IAAI1jE,KAAK,GAAI6J,GAC1CjW,KAAKikC,cAAcs8D,UAAUtqF,GAC7BjW,KAAKw1C,gBAAgBzB,MAAM99B,GAC3BjW,KAAK0lD,cAAc3R,MAAM99B,GACzBjW,KAAKyoD,cAAc1U,MAAM99B,GACzBjW,KAAKwvE,kBAAkBz7B,MAAM99B,GAC7BjW,KAAK06D,cAAc3mB,MAAM99B,GACzBjW,KAAKk+G,0BAA0BnqE,MAAM99B,GACrCjW,KAAKm+G,oBAAoBpqE,MAAM99B,GAC/BjW,KAAKumC,oBAAoBwN,QACzB/zC,KAAK8nH,mBAAmB/zE,gBAGpB/zC,KAAKokC,aAAa0pE,MAAM,CAAE73F,OAAQA,IAE1B,MAAVA,GAAkBA,WAAkBjW,KAAKokC,aAAagU,eACxDp4C,KAAK01C,cAAcO,aACnBj2C,KAAKkkC,iBAAiBtX,KAAK,iBAAkB,CAAEg5F,QAASA,EAAS3vG,OAAQA,WAGrEjW,KAAKylH,gBACLzlH,KAAK0lH,qBAAoB,SACzB1lH,KAAK6lH,gBACX7lH,KAAK8/G,qBAAqBhrD,kBAAiB,SACrC90D,KAAK6kH,cAAcxxC,8BACnBrzE,KAAKioH,mBAGPjJ,mCAAmC7/B,EAAUe,EAAgB4V,EAAkB,M,0CACnF,GAAW,MAAP3W,IAAgBA,EAAI//E,GACtB,OAGF,MAAMw7D,EAAe,GACN,MAAXk7B,IACFl7B,EAAQk7B,QAAUA,GAGpBrX,GAAWY,eACTF,EACA,CACEC,QAAS,qBACTD,IAAKA,EACLe,OAAQA,GAEVtlB,MAIEgkD,Y,0CAIC5+G,KAAKsmG,iBAGJhlB,GAAUmmB,iBAAiB,cAAe,MAAM,OAGlDoe,gB,0CACJ,IACG7lH,KAAK2J,qBAAqBu8F,aAC1BlmG,KAAK2J,qBAAqB08F,cAC1BrmG,KAAK2J,qBAAqBy8F,UAE3B,OAIF,GAA2B,aADOpmG,KAAKokC,aAAa0+D,mBAElD,OAGF,MAUM4B,QATJ,IAAI7lG,SAASC,IACX+/E,OAAO6lB,QAAQC,MAAMtkE,IAAI,MAAOnb,GAAWpmB,EAAQomB,cAIrD,IAAIrmB,SAASC,IACX+/E,OAAO6lB,QAAQC,MAAM5wD,OAAM,IAAMj1C,SAMrC,IAAK,MAAMyN,KAAOm4F,EAEXA,EAAQlvF,eAAejJ,WAGtBvM,KAAKugC,eAAeQ,KAAKx0B,EAAKm4F,EAAQn4F,QAIlC+8G,mB,0CACPzqC,OAAOsgC,eAAgBn/G,KAAKypH,sBAIjCzpH,KAAKypH,qBAAsB,QACrBzpH,KAAKqpH,8BAELrpH,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,OACJuqH,SAAU,CAAC,OACXt8G,MAAO,oBAGHrN,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,WACJwqH,SAAU,OACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKsH,YAAY4J,EAAE,oBAGtBlR,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,gBACJwqH,SAAU,OACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKsH,YAAY4J,EAAE,wBAGtBlR,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,gBACJwqH,SAAU,OACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKsH,YAAY4J,EAAE,yBAGlBlR,KAAKokC,aAAa+wD,+BACpBn1F,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,YACJwqH,SAAU,OACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKsH,YAAY4J,EAAE,iCAIxBlR,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,YACNggH,SAAU,eAGN5pH,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,oBACJwqH,SAAU,OACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKsH,YAAY4J,EAAE,kCAGtBlR,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,kBACJwqH,SAAU,OACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKsH,YAAY4J,EAAE,2BAG5BlR,KAAKypH,qBAAsB,MAGfD,iBAAiBrqC,EAAU0qC,G,gDACjC7pH,KAAK8pH,uBAAuB3qC,EAAIr5E,IAAKq5E,EAAI//E,GAAIyqH,GACnD7pH,KAAK8mH,aAAe9mH,KAAK2mH,eAAgB,KAG7BmD,uBAAuBhkH,EAAau6E,EAAewpC,G,0CAC/D,IAAK/jH,IAAS+4E,OAAOmqC,gBAAkBhpH,KAAKkpG,cAC1C,OAGFlpG,KAAK+pH,8BAA8BlrC,OAAOmqC,eAC1ChpH,KAAK+pH,8BAA8B/pH,KAAKkpG,eAExClpG,KAAK2nH,kBAAoB,GAEzB,UADyB3nH,KAAKinC,YAAYmC,mBACvB7pC,EAAqBqqC,SACtC,IACE,MAAMj1B,QAAgB3U,KAAK0lD,cAAc7M,sBAAsB/yC,GAC/D6O,EAAQ6+B,MAAK,CAAChsC,EAAGC,IAAMzH,KAAK0lD,cAAc7H,8BAA8Br2C,EAAGC,KAEvEoiH,GACFl1G,EAAQ1N,SAASitC,IACfl0C,KAAKgqH,4BAA4B91E,MAIrC,MAAMu1B,QAA4BzpE,KAAKokC,aAAawsE,yBACpD,IAAIqZ,EAAU,GAiBd,OAfKxgD,IACC90D,EAAQ3R,OAAS,GAAK2R,EAAQ3R,QAAU,EAC1CinH,EAAUt1G,EAAQ3R,OAAOY,WAChB+Q,EAAQ3R,OAAS,IAC1BinH,EAAU,OAIVJ,GAAyC,IAAnBl1G,EAAQ3R,eAC1BhD,KAAKkqH,+BAA+BlqH,KAAKsH,YAAY4J,EAAE,sBAG/DlR,KAAKmqH,0BAA0BF,EAAS5pC,QACxCrgF,KAAKoqH,0BAA0BH,EAAS5pC,GAGxC,MAAOrhF,GACPgB,KAAKmkC,WAAW1iB,MAAMziB,SAIpBgB,KAAKupH,uCAAuCM,MAGtCN,uCAAuCM,G,0CACnD,GAAIA,EAAoB,CACtB,MAAMpqF,QAAez/B,KAAKokC,aAAaiF,2BACjCrpC,KAAKkqH,+BACTlqH,KAAKsH,YAAY4J,EAAEuuB,EAAS,kBAAoB,qBAIpD,MAAMy/C,QAAaT,GAAW4rC,gBAClB,MAARnrC,GACFA,EAAKj4E,SAASk4E,IACE,MAAVA,EAAI//E,KACNY,KAAKoqH,0BAA0B,GAAIjrC,EAAI//E,IACvCY,KAAKmqH,0BAA0B,GAAIhrC,EAAI//E,WAMjC4qH,4BAA4B91E,G,0CACxC,GACY,MAAVA,GACAA,EAAOtqC,OAASnK,EAAW6rC,OAC3B4I,EAAO7jC,WAAa7Q,EAAmB8Q,KAEvC,OAGF,IAAIjD,EAAQ6mC,EAAOjyC,KACfiyC,EAAOrkC,MAAMzB,UAAsC,KAA1B8lC,EAAOrkC,MAAMzB,WACxCf,GAAS,KAAO6mC,EAAOrkC,MAAMzB,SAAW,WAEpCpO,KAAKsqH,uBAAuBj9G,EAAO6mC,EAAO90C,GAAI80C,MAGxCg2E,+BAA+BK,G,gDACrCvqH,KAAKsqH,uBAAuBC,EAAiB,OAAQ,SAG/CD,uBAAuBj9G,EAAem9G,EAAkBt2E,G,0CACpE,IACG2qC,OAAOsgC,cACRn/G,KAAK2nH,kBAAkBthH,QAAQmkH,IAAa,GACjC,MAAVt2E,GAAkBA,EAAOtqC,OAASnK,EAAW6rC,MAE9C,OAGFtrC,KAAK2nH,kBAAkB5xG,KAAKy0G,IAEd,MAAVt2E,GAAmBA,EAAOrkC,MAAMnB,UAAsC,KAA1BwlC,EAAOrkC,MAAMnB,kBACrD1O,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,YAAcorH,EAClBZ,SAAU,WACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKyqH,yBAAyBp9G,OAI3B,MAAV6mC,GAAmBA,EAAOrkC,MAAMzB,UAAsC,KAA1B8lC,EAAOrkC,MAAMzB,kBACrDpO,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,iBAAmBorH,EACvBZ,SAAU,gBACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKyqH,yBAAyBp9G,OAK7B,MAAV6mC,GACCA,EAAOrkC,MAAMnB,UAAsC,KAA1BwlC,EAAOrkC,MAAMnB,UAAmBwlC,EAAOzkC,sBAE3DzP,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,iBAAmBorH,EACvBZ,SAAU,gBACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKyqH,yBAAyBp9G,aAIVrN,KAAKokC,aAAa+wD,yBACd,MAAVjhD,GAAmBA,EAAOrkC,MAAMjB,MAA8B,KAAtBslC,EAAOrkC,MAAMjB,cACtE5O,KAAK0pH,mBAAmB,CAC5B9/G,KAAM,SACNxK,GAAI,aAAeorH,EACnBZ,SAAU,YACVD,SAAU,CAAC,OACXt8G,MAAOrN,KAAKyqH,yBAAyBp9G,SAKnCo9G,yBAAyBp9G,GAC/B,OAAOA,EAAMhJ,QAAQ,KAAM,MAGfsxD,SAAS+0D,GAAW,G,0CAChC,MAAMC,EAAe,MACfz+C,QAAiBlsE,KAAK6zD,YAAYgc,cAExC,IAAI+6C,EAAcD,SACF,MAAZz+C,IACF0+C,GAAc,IAAIx+G,MAAOkuC,UAAY4xB,EAAS5xB,WAG5CowE,GAAYE,GAAeD,SACvB3qH,KAAK6zD,YAAY8B,SAAS+0D,GAChC1qH,KAAK6qH,oBAEL7qH,KAAK6qH,sBAIDA,mBACF7qH,KAAK8qH,aACP1gF,aAAapqC,KAAK8qH,aAGpB9qH,KAAK8qH,YAAc3gF,YAAW,IAAY,gDAAMnqC,KAAK21D,eAAY,KAK3D0zD,wBACN,OAAO,IAAIxqH,SAAeC,IACxB+/E,OAAOsgC,aAAa4L,WAAU,KAC5BjsH,IACI+/E,OAAOU,QAAQC,gBAOjBkqC,mBAAmB9uD,GACzB,OAAO,IAAI/7D,SAAeC,IACxB+/E,OAAOsgC,aAAal/G,OAAO26D,GAAS,KAClC97D,IACI+/E,OAAOU,QAAQC,gBAOXupC,cAAciC,EAAgB9B,EAAgBtqC,G,0CAC1D,IAAKosC,IAAcA,EAAUvF,QAC3B,OAGF,MAAM7qD,EAAuB,CAC3BnpC,KAAM,CACJ,GAAI,gBAAkBy3F,EAAS,OAC/B,GAAI,gBAAkBA,EAAS,SAInC,GAAIlpH,KAAK2J,qBAAqBs8F,YAC5BrrC,EAAQgkB,SAAWA,QACbosC,EAAUvF,QAAQ7qD,OACnB,KAAI56D,KAAK2J,qBAAqB28F,WAKnC,OAAO,IAAIznG,SAAeC,IACxBksH,EAAUvF,QAAQ7qD,GAAS,IAAM97D,SAHnCksH,EAAUvF,QAAQ7qD,OAQdmvD,8BAA8BpM,GAChCA,GAAUA,EAAOsN,yBACnBtN,EAAOsN,wBAAwB,CAAEC,MAAO,YAIpCd,0BAA0BhkG,EAAci6D,GAC1CxB,OAAOmqC,eAAiBnqC,OAAOmqC,cAAcmC,cAC/CtsC,OAAOmqC,cAAcmC,aAAa,CAChC/kG,KAAMA,EACNi6D,MAAOA,IAKL8pC,0BAA0B/jG,EAAci6D,GAC9C,GAAKrgF,KAAKkpG,cAIV,GAAIlpG,KAAKkpG,cAAciiB,aACrBnrH,KAAKkpG,cAAciiB,aAAa,CAC9B/kG,KAAMA,EACNi6D,MAAOA,SAEJ,GAAIrgF,KAAKkpG,cAAckiB,SAAU,CACtC,IAAI/9G,EAAQ,YACR+Y,GAAiB,KAATA,IACV/Y,GAAS,KAAO+Y,EAAO,KAGzBpmB,KAAKkpG,cAAckiB,SAAS,CAC1B/9G,MAAOA,EACPgzE,MAAOA,KAKC4nC,gB,0CACZ,MAAMzb,EAAWxsG,KAAKokC,aAAaooE,SAAS/8C,WAC5C,GAAgB,MAAZ+8C,EACF,IAAK,MAAMv2F,KAAUlO,OAAO5I,KAAKqtG,GAC/B,UAAWxsG,KAAKinC,YAAYmC,cAAcnzB,MAAa1W,EAAqBqqC,SAC1E,aAIA5pC,KAAK6kH,cAAczyC,2BD1hCfy2C,YAAY9pH,MAAK,U,wCGF3BssH,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBx/G,IAAjBy/G,EACH,OAAOA,EAAalsH,QAGrB,IAAID,EAASgsH,EAAyBE,GAAY,CACjDnsH,GAAImsH,EACJE,QAAQ,EACRnsH,QAAS,IAUV,OANAosH,EAAoBH,GAAU1mH,KAAKxF,EAAOC,QAASD,EAAQA,EAAOC,QAASgsH,GAG3EjsH,EAAOosH,QAAS,EAGTpsH,EAAOC,QAIfgsH,EAAoBK,EAAID,E7T5BpBhtH,EAAW,GACf4sH,EAAoBM,EAAI,CAAChmF,EAAQimF,EAAUC,EAAIl2C,KAC9C,IAAGi2C,EAAH,CAMA,IAAIE,EAAeC,EAAAA,EACnB,IAAS/oH,EAAI,EAAGA,EAAIvE,EAASsE,OAAQC,IAAK,CAGzC,IAFA,IAAK4oH,EAAUC,EAAIl2C,GAAYl3E,EAASuE,GACpCgpH,GAAY,EACPjuD,EAAI,EAAGA,EAAI6tD,EAAS7oH,OAAQg7D,MACpB,EAAX4X,GAAsBm2C,GAAgBn2C,IAAa7tE,OAAO5I,KAAKmsH,EAAoBM,GAAG1oD,OAAO32D,GAAS++G,EAAoBM,EAAEr/G,GAAKs/G,EAAS7tD,MAC9I6tD,EAASlpF,OAAOq7B,IAAK,IAErBiuD,GAAY,EACTr2C,EAAWm2C,IAAcA,EAAen2C,IAG7C,GAAGq2C,EAAW,CACbvtH,EAASikC,OAAO1/B,IAAK,GACrB,IAAIuC,EAAIsmH,SACE//G,IAANvG,IAAiBogC,EAASpgC,IAGhC,OAAOogC,EAvBNgwC,EAAWA,GAAY,EACvB,IAAI,IAAI3yE,EAAIvE,EAASsE,OAAQC,EAAI,GAAKvE,EAASuE,EAAI,GAAG,GAAK2yE,EAAU3yE,IAAKvE,EAASuE,GAAKvE,EAASuE,EAAI,GACrGvE,EAASuE,GAAK,CAAC4oH,EAAUC,EAAIl2C,I8TJ/B01C,EAAoBx3G,EAAI,CAACxU,EAAS4sH,KACjC,IAAI,IAAI3/G,KAAO2/G,EACXZ,EAAoBpmG,EAAEgnG,EAAY3/G,KAAS++G,EAAoBpmG,EAAE5lB,EAASiN,IAC5ExE,OAAOokH,eAAe7sH,EAASiN,EAAK,CAAE6/G,YAAY,EAAM/rF,IAAK6rF,EAAW3/G,MCJ3E++G,EAAoB9oH,EAAI,WACvB,GAA0B,iBAAf6pH,WAAyB,OAAOA,WAC3C,IACC,OAAOrsH,MAAQ,IAAIssH,SAAS,cAAb,GACd,MAAOttH,GACR,GAAsB,iBAAXuC,OAAqB,OAAOA,QALjB,GCAxB+pH,EAAoBpmG,EAAI,CAACjd,EAAKV,IAAUQ,OAAOpD,UAAU6Q,eAAe3Q,KAAKoD,EAAKV,GCAlF+jH,EAAoBiB,IAAOltH,IAC1BA,EAAOmtH,MAAQ,GACVntH,EAAOogD,WAAUpgD,EAAOogD,SAAW,IACjCpgD,G,MCER,IAAIotH,EAAkB,CACrB,IAAK,GAaNnB,EAAoBM,EAAE5tD,EAAK0uD,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BjgH,KACvD,IAGI4+G,EAAUmB,GAHTb,EAAUgB,EAAattC,GAAW5yE,EAGhB1J,EAAI,EAC3B,GAAG4oH,EAASz7E,MAAMhxC,GAAgC,IAAxBqtH,EAAgBrtH,KAAa,CACtD,IAAImsH,KAAYsB,EACZvB,EAAoBpmG,EAAE2nG,EAAatB,KACrCD,EAAoBK,EAAEJ,GAAYsB,EAAYtB,IAGhD,GAAGhsC,EAAS,IAAI35C,EAAS25C,EAAQ+rC,GAGlC,IADGsB,GAA4BA,EAA2BjgH,GACrD1J,EAAI4oH,EAAS7oH,OAAQC,IACzBypH,EAAUb,EAAS5oH,GAChBqoH,EAAoBpmG,EAAEunG,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAOpB,EAAoBM,EAAEhmF,IAG1BknF,EAAqBr/E,KAAqC,+BAAIA,KAAqC,gCAAK,GAC5Gq/E,EAAmB7lH,QAAQ0lH,EAAqBI,KAAK,KAAM,IAC3DD,EAAmB/2G,KAAO42G,EAAqBI,KAAK,KAAMD,EAAmB/2G,KAAKg3G,KAAKD,K,GC7CvF,IAAIE,EAAsB1B,EAAoBM,OAAE7/G,EAAW,CAAC,MAAM,IAAOu/G,EAAoB,SAC7F0B,EAAsB1B,EAAoBM,EAAEoB,I","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///../../node_modules/@angular/core/__ivy_ngcc__/bundles/ lazy namespace object","webpack:///../../libs/common/src/enums/authenticationStatus.ts","webpack:///../../libs/common/src/enums/cipherRepromptType.ts","webpack:///../../libs/common/src/enums/cipherType.ts","webpack:///../../libs/common/src/enums/stateVersion.ts","webpack:///../../libs/common/src/enums/themeType.ts","webpack:///../../libs/common/src/enums/deviceType.ts","webpack:///../../libs/common/src/factories/accountFactory.ts","webpack:///../../libs/common/src/factories/globalStateFactory.ts","webpack:///../../libs/common/src/factories/stateFactory.ts","webpack:///../../libs/common/src/models/domain/environmentUrls.ts","webpack:///../../libs/common/src/models/domain/windowState.ts","webpack:///../../libs/common/src/models/domain/globalState.ts","webpack:///../../libs/common/src/misc/utils.ts","webpack:///../../libs/common/src/models/request/deviceRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/apiTokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequestTwoFactor.ts","webpack:///../../libs/common/src/models/response/baseResponse.ts","webpack:///../../libs/common/src/models/response/apiKeyResponse.ts","webpack:///../../libs/common/src/models/response/attachmentResponse.ts","webpack:///../../libs/common/src/models/api/cardApi.ts","webpack:///../../libs/common/src/models/api/fieldApi.ts","webpack:///../../libs/common/src/models/api/identityApi.ts","webpack:///../../libs/common/src/models/api/loginUriApi.ts","webpack:///../../libs/common/src/models/api/loginApi.ts","webpack:///../../libs/common/src/models/api/secureNoteApi.ts","webpack:///../../libs/common/src/models/response/passwordHistoryResponse.ts","webpack:///../../libs/common/src/models/response/cipherResponse.ts","webpack:///../../libs/common/src/models/response/attachmentUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/billingResponse.ts","webpack:///../../libs/common/src/models/response/billingHistoryResponse.ts","webpack:///../../libs/common/src/models/response/billingPaymentResponse.ts","webpack:///../../libs/common/src/models/response/breachAccountResponse.ts","webpack:///../../libs/common/src/models/response/selectionReadOnlyResponse.ts","webpack:///../../libs/common/src/models/response/collectionResponse.ts","webpack:///../../libs/common/src/models/response/deviceVerificationResponse.ts","webpack:///../../libs/common/src/models/response/globalDomainResponse.ts","webpack:///../../libs/common/src/models/response/domainsResponse.ts","webpack:///../../libs/common/src/models/response/emergencyAccessResponse.ts","webpack:///../../libs/common/src/models/response/errorResponse.ts","webpack:///../../libs/common/src/models/response/eventResponse.ts","webpack:///../../libs/common/src/models/response/groupResponse.ts","webpack:///../../libs/common/src/models/response/identityCaptchaResponse.ts","webpack:///../../libs/common/src/models/response/identityTokenResponse.ts","webpack:///../../libs/common/src/models/response/identityTwoFactorResponse.ts","webpack:///../../libs/common/src/models/response/keyConnectorUserKeyResponse.ts","webpack:///../../libs/common/src/models/response/listResponse.ts","webpack:///../../libs/common/src/enums/ssoEnums.ts","webpack:///../../libs/common/src/models/api/ssoConfigApi.ts","webpack:///../../libs/common/src/models/response/organization/organizationSsoResponse.ts","webpack:///../../libs/common/src/models/response/organizationApiKeyInformationResponse.ts","webpack:///../../libs/common/src/models/response/organizationAutoEnrollStatusResponse.ts","webpack:///../../libs/common/src/models/response/organizationConnectionResponse.ts","webpack:///../../libs/common/src/models/response/keysResponse.ts","webpack:///../../libs/common/src/models/response/organizationKeysResponse.ts","webpack:///../../libs/common/src/models/response/planResponse.ts","webpack:///../../libs/common/src/models/response/organizationResponse.ts","webpack:///../../libs/common/src/models/response/organizationSponsorshipSyncStatusResponse.ts","webpack:///../../libs/common/src/models/response/subscriptionResponse.ts","webpack:///../../libs/common/src/models/response/organizationSubscriptionResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkResponse.ts","webpack:///../../libs/common/src/models/api/permissionsApi.ts","webpack:///../../libs/common/src/models/response/organizationUserResponse.ts","webpack:///../../libs/common/src/models/response/profileOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderResponse.ts","webpack:///../../libs/common/src/models/response/profileResponse.ts","webpack:///../../libs/common/src/models/response/paymentResponse.ts","webpack:///../../libs/common/src/models/response/policyResponse.ts","webpack:///../../libs/common/src/models/response/preloginResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserResponse.ts","webpack:///../../libs/common/src/models/api/sendFileApi.ts","webpack:///../../libs/common/src/models/api/sendTextApi.ts","webpack:///../../libs/common/src/models/response/sendAccessResponse.ts","webpack:///../../libs/common/src/models/response/sendFileDownloadDataResponse.ts","webpack:///../../libs/common/src/models/response/sendResponse.ts","webpack:///../../libs/common/src/models/response/sendFileUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/ssoPreValidateResponse.ts","webpack:///../../libs/common/src/models/response/folderResponse.ts","webpack:///../../libs/common/src/models/response/syncResponse.ts","webpack:///../../libs/common/src/models/response/taxInfoResponse.ts","webpack:///../../libs/common/src/models/response/taxRateResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorAuthenticatorResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorDuoResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorEmailResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorProviderResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorRescoverResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorWebAuthnResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorYubiKeyResponse.ts","webpack:///../../libs/common/src/models/response/userKeyResponse.ts","webpack:///../../libs/common/src/enums/htmlStorageLocation.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/appId.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/misc/throttle.ts","webpack:///../../libs/common/src/enums/authenticationType.ts","webpack:///../../libs/common/src/enums/keySuffixOptions.ts","webpack:///../../libs/common/src/enums/twoFactorProviderType.ts","webpack:///../../libs/common/src/models/domain/account.ts","webpack:///../../libs/common/src/models/domain/authResult.ts","webpack:///../../libs/common/src/models/request/keysRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/logIn.strategy.ts","webpack:///../../libs/common/src/enums/hashPurpose.ts","webpack:///../../libs/common/src/misc/logInStrategies/apiLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/passwordTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/passwordLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/ssoTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/ssoLogin.strategy.ts","webpack:///../../libs/common/src/models/request/preloginRequest.ts","webpack:///../../libs/common/src/services/auth.service.ts","webpack:///../../libs/common/src/enums/fieldType.ts","webpack:///../../libs/common/src/enums/uriMatchType.ts","webpack:///../../libs/common/src/enums/encryptionType.ts","webpack:///../../libs/common/src/misc/sequentialize.ts","webpack:///../../libs/common/src/models/data/attachmentData.ts","webpack:///../../libs/common/src/models/data/cardData.ts","webpack:///../../libs/common/src/models/data/fieldData.ts","webpack:///../../libs/common/src/models/data/identityData.ts","webpack:///../../libs/common/src/models/data/loginUriData.ts","webpack:///../../libs/common/src/models/data/loginData.ts","webpack:///../../libs/common/src/models/data/passwordHistoryData.ts","webpack:///../../libs/common/src/models/data/secureNoteData.ts","webpack:///../../libs/common/src/models/data/cipherData.ts","webpack:///../../libs/common/src/models/view/attachmentView.ts","webpack:///../../libs/common/src/models/domain/encString.ts","webpack:///../../libs/common/src/models/domain/domainBase.ts","webpack:///../../libs/common/src/models/domain/symmetricCryptoKey.ts","webpack:///../../libs/common/src/enums/linkedIdType.ts","webpack:///../../libs/common/src/models/domain/attachment.ts","webpack:///../../libs/common/src/misc/linkedFieldOption.decorator.ts","webpack:///../../libs/common/src/models/view/itemView.ts","webpack:///../../libs/common/src/models/view/cardView.ts","webpack:///../../libs/common/src/models/domain/card.ts","webpack:///../../libs/common/src/models/view/identityView.ts","webpack:///../../libs/common/src/models/view/loginView.ts","webpack:///../../libs/common/src/models/view/secureNoteView.ts","webpack:///../../libs/common/src/models/view/cipherView.ts","webpack:///../../libs/common/src/models/view/fieldView.ts","webpack:///../../libs/common/src/models/domain/field.ts","webpack:///../../libs/common/src/models/domain/identity.ts","webpack:///../../libs/common/src/models/view/loginUriView.ts","webpack:///../../libs/common/src/models/domain/loginUri.ts","webpack:///../../libs/common/src/models/domain/login.ts","webpack:///../../libs/common/src/models/view/passwordHistoryView.ts","webpack:///../../libs/common/src/models/domain/password.ts","webpack:///../../libs/common/src/models/domain/secureNote.ts","webpack:///../../libs/common/src/models/domain/cipher.ts","webpack:///../../libs/common/src/models/domain/sortedCiphersCache.ts","webpack:///../../libs/common/src/models/request/cipherBulkDeleteRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkMoveRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkRestoreRequest.ts","webpack:///../../libs/common/src/models/request/attachmentRequest.ts","webpack:///../../libs/common/src/models/request/cipherRequest.ts","webpack:///../../libs/common/src/models/request/cipherWithIdRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkShareRequest.ts","webpack:///../../libs/common/src/models/request/cipherCollectionsRequest.ts","webpack:///../../libs/common/src/models/request/cipherCreateRequest.ts","webpack:///../../libs/common/src/models/request/cipherShareRequest.ts","webpack:///../../libs/common/src/services/cipher.service.ts","webpack:///../../libs/common/src/models/domain/treeNode.ts","webpack:///../../libs/common/src/misc/serviceUtils.ts","webpack:///../../libs/common/src/models/data/collectionData.ts","webpack:///../../libs/common/src/models/view/collectionView.ts","webpack:///../../libs/common/src/models/domain/collection.ts","webpack:///../../libs/common/src/services/collection.service.ts","webpack:///../../libs/common/src/enums/logLevelType.ts","webpack:///../../libs/common/src/services/consoleLog.service.ts","webpack:///../../libs/common/src/services/container.service.ts","webpack:///../../libs/common/src/models/domain/encryptedObject.ts","webpack:///../../libs/common/src/services/encrypt.service.ts","webpack:///../../libs/common/src/services/environment.service.ts","webpack:///../../libs/common/src/models/data/eventData.ts","webpack:///../../libs/common/src/models/request/eventRequest.ts","webpack:///../../libs/common/src/services/event.service.ts","webpack:///../../libs/common/src/enums/kdfType.ts","webpack:///../../libs/common/src/models/export/cardExport.ts","webpack:///../../libs/common/src/models/export/fieldExport.ts","webpack:///../../libs/common/src/models/export/identityExport.ts","webpack:///../../libs/common/src/models/export/loginUriExport.ts","webpack:///../../libs/common/src/models/export/loginExport.ts","webpack:///../../libs/common/src/enums/secureNoteType.ts","webpack:///../../libs/common/src/enums/eventType.ts","webpack:///../../libs/common/src/models/export/secureNoteExport.ts","webpack:///../../libs/common/src/models/export/cipherExport.ts","webpack:///../../libs/common/src/models/export/cipherWithIdsExport.ts","webpack:///../../libs/common/src/models/export/collectionExport.ts","webpack:///../../libs/common/src/models/export/collectionWithIdExport.ts","webpack:///../../libs/common/src/models/export/eventExport.ts","webpack:///../../libs/common/src/models/view/folderView.ts","webpack:///../../libs/common/src/models/domain/folder.ts","webpack:///../../libs/common/src/models/export/folderExport.ts","webpack:///../../libs/common/src/models/export/folderWithIdExport.ts","webpack:///../../libs/common/src/enums/fileUploadType.ts","webpack:///../../libs/common/src/services/export.service.ts","webpack:///../../libs/common/src/services/azureFileUpload.service.ts","webpack:///../../libs/common/src/services/bitwardenFileUpload.service.ts","webpack:///../../libs/common/src/services/fileUpload.service.ts","webpack:///../../libs/common/src/models/data/folderData.ts","webpack:///../../libs/common/src/models/request/folderRequest.ts","webpack:///../../libs/common/src/services/folder/folder-api.service.ts","webpack:///../../libs/common/src/enums/organizationUserType.ts","webpack:///../../libs/common/src/services/folder/folder.service.ts","webpack:///../../libs/common/src/models/request/account/setKeyConnectorKeyRequest.ts","webpack:///../../libs/common/src/models/request/keyConnectorUserKeyRequest.ts","webpack:///../../libs/common/src/services/keyConnector.service.ts","webpack:///../../libs/common/src/services/memoryStorage.service.ts","webpack:///../../libs/common/src/enums/notificationType.ts","webpack:///../../libs/common/src/models/response/notificationResponse.ts","webpack:///../../libs/common/src/enums/organizationUserStatusType.ts","webpack:///../../libs/common/src/enums/permissions.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/models/domain/organization.ts","webpack:///../../libs/common/src/services/organization.service.ts","webpack:///../../libs/common/src/enums/policyType.ts","webpack:///../../libs/common/src/misc/wordlist.ts","webpack:///../../libs/common/src/models/domain/generatedPasswordHistory.ts","webpack:///../../libs/common/src/models/domain/passwordGeneratorPolicyOptions.ts","webpack:///../../libs/common/src/services/passwordGeneration.service.ts","webpack:///../../libs/common/src/models/data/policyData.ts","webpack:///../../libs/common/src/models/domain/masterPasswordPolicyOptions.ts","webpack:///../../libs/common/src/models/domain/policy.ts","webpack:///../../libs/common/src/models/domain/resetPasswordPolicyOptions.ts","webpack:///../../libs/common/src/enums/providerUserStatusType.ts","webpack:///../../libs/common/src/enums/providerUserType.ts","webpack:///../../libs/common/src/services/policy.service.ts","webpack:///../../libs/common/src/models/domain/provider.ts","webpack:///../../libs/common/src/services/provider.service.ts","webpack:///../../libs/common/src/enums/sendType.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/models/data/sendFileData.ts","webpack:///../../libs/common/src/models/data/sendTextData.ts","webpack:///../../libs/common/src/models/data/sendData.ts","webpack:///../../libs/common/src/models/view/sendFileView.ts","webpack:///../../libs/common/src/models/view/sendTextView.ts","webpack:///../../libs/common/src/models/view/sendView.ts","webpack:///../../libs/common/src/models/domain/sendFile.ts","webpack:///../../libs/common/src/models/domain/sendText.ts","webpack:///../../libs/common/src/models/domain/send.ts","webpack:///../../libs/common/src/models/request/sendRequest.ts","webpack:///../../libs/common/src/services/send.service.ts","webpack:///../../libs/common/src/services/settings.service.ts","webpack:///../../libs/common/src/services/token.service.ts","webpack:///../../libs/common/src/services/stateMigration.service.ts","webpack:///../../libs/common/src/models/data/organizationData.ts","webpack:///../../libs/common/src/models/data/providerData.ts","webpack:///../../libs/common/src/services/sync.service.ts","webpack:///../../libs/common/src/services/system.service.ts","webpack:///../../libs/common/src/services/totp.service.ts","webpack:///../../libs/common/src/services/twoFactor.service.ts","webpack:///../../libs/common/src/enums/verificationType.ts","webpack:///../../libs/common/src/models/request/account/verifyOTPRequest.ts","webpack:///../../libs/common/src/models/request/secretVerificationRequest.ts","webpack:///../../libs/common/src/services/userVerification.service.ts","webpack:///../../libs/common/src/services/usernameGeneration.service.ts","webpack:///../../libs/common/src/models/domain/decryptParameters.ts","webpack:///../../libs/common/src/services/webCryptoFunction.service.ts","webpack:///./src/browser/browserApi.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/popup/services/popup-utils.service.ts","webpack:///./src/models/autofillScript.ts","webpack:///./src/services/autofillConstants.ts","webpack:///./src/services/autofill.service.ts","webpack:///../../libs/common/src/models/domain/encArrayBuffer.ts","webpack:///../../libs/common/src/models/domain/encryptedOrganizationKey.ts","webpack:///../../libs/common/src/services/crypto.service.ts","webpack:///./src/services/browserCrypto.service.ts","webpack:///../../libs/common/src/enums/clientType.ts","webpack:///./src/services/abstractChromeStorageApi.service.ts","webpack:///./src/services/browserLocalStorage.service.ts","webpack:///./src/services/browserMessaging.service.ts","webpack:///./src/services/browserMessagingPrivateModeBackground.service.ts","webpack:///./src/services/browserPlatformUtils.service.ts","webpack:///./src/services/i18n.service.ts","webpack:///../../libs/common/src/services/i18n.service.ts","webpack:///./src/services/keyGeneration.service.ts","webpack:///./src/services/browserMemoryStorage.service.ts","webpack:///./src/services/localBackedSessionStorage.service.ts","webpack:///../../libs/common/src/abstractions/storage.service.ts","webpack:///../../libs/common/src/enums/storageLocation.ts","webpack:///../../libs/common/src/models/domain/state.ts","webpack:///../../libs/common/src/services/state.service.ts","webpack:///./src/services/state.service.ts","webpack:///../../libs/angular/src/modules/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/angular/src/modules/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/abstractions/state.service.ts","webpack:///../../libs/common/src/abstractions/organization.service.ts","webpack:///../../libs/common/src/abstractions/folder/folder.service.abstraction.ts","webpack:///../../libs/common/src/abstractions/cipher.service.ts","webpack:///../../libs/common/src/abstractions/collection.service.ts","webpack:///../../libs/common/src/abstractions/policy.service.ts","webpack:///../../libs/angular/src/modules/vault-filter/vault-filter.service.ts","webpack:///./src/services/vaultFilter.service.ts","webpack:///./src/services/vaultTimeout.service.ts","webpack:///../../libs/common/src/services/vaultTimeout.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/contextMenus.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/background/models/notificationQueueMessageType.ts","webpack:///./src/background/notification.background.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/background/tabs.background.ts","webpack:///./src/background/webRequest.background.ts","webpack:///./src/background.ts","webpack:///./src/background/main.background.ts","webpack:///../../libs/common/src/abstractions/messaging.service.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 28536;\nmodule.exports = webpackEmptyAsyncContext;","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum StateVersion {\n  One = 1, // Original flat key/value pair store\n  Two = 2, // Move to a typed State object\n  Three = 3, // Fix migration of users' premium status\n  Four = 4, // Fix 'Never Lock' option by removing stale data\n  Five = 5, // Migrate to new storage of encrypted organization keys\n  Latest = Five,\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/globalState\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/globalState\";\n\nimport { AccountFactory } from \"./accountFactory\";\nimport { GlobalStateFactory } from \"./globalStateFactory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","export class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n}\n","export class WindowState {\n  width?: number;\n  height?: number;\n  isMaximized?: boolean;\n  // TODO: displayBounds is an Electron.Rectangle.\n  // We need to establish some kind of client-specific global state, similiar to the way we already extend a base Account.\n  displayBounds: any;\n  x?: number;\n  y?: number;\n}\n","import { StateVersion } from \"../../enums/stateVersion\";\nimport { ThemeType } from \"../../enums/themeType\";\n\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { WindowState } from \"./windowState\";\n\nexport class GlobalState {\n  enableAlwaysOnTop?: boolean;\n  installedVersion?: string;\n  locale?: string;\n  organizationInvitation?: any;\n  ssoCodeVerifier?: string;\n  ssoOrganizationIdentifier?: string;\n  ssoState?: string;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  window?: WindowState = new WindowState();\n  twoFactorToken?: string;\n  disableFavicon?: boolean;\n  biometricAwaitingAcceptance?: boolean;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBiometrics?: boolean;\n  biometricText?: string;\n  noAutoPromptBiometrics?: boolean;\n  noAutoPromptBiometricsText?: string;\n  stateVersion: StateVersion = StateVersion.One;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n}\n","/* eslint-disable no-useless-escape */\nimport * as tldjs from \"tldjs\";\n\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: any = null;\n  static tldEndingRegex =\n    /.*\\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n    Utils.global = Utils.isNode && !Utils.isBrowser ? global : window;\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = window.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"utf8\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      const encodedString = String.fromCharCode.apply(null, bytes);\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(window.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(window.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static isGuid(id: string) {\n    return RegExp(\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,\n      \"i\"\n    ).test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.hostname !== \"\" ? url.hostname : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    let httpUrl = uriString.startsWith(\"http://\") || uriString.startsWith(\"https://\");\n    if (\n      !httpUrl &&\n      uriString.indexOf(\"://\") < 0 &&\n      Utils.tldEndingRegex.test(uriString) &&\n      uriString.indexOf(\"@\") < 0\n    ) {\n      uriString = \"http://\" + uriString;\n      httpUrl = true;\n    }\n\n    if (httpUrl) {\n      try {\n        const url = Utils.getUrlObject(uriString);\n        const validHostname = tldjs?.isValid != null ? tldjs.isValid(url.hostname) : true;\n        if (!validHostname) {\n          return null;\n        }\n\n        if (url.hostname === \"localhost\" || Utils.validIpAddress(url.hostname)) {\n          return url.hostname;\n        }\n\n        const urlDomain =\n          tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(url.hostname) : null;\n        return urlDomain != null ? urlDomain : url.hostname;\n      } catch (e) {\n        // Invalid domain, try another approach below.\n      }\n    }\n\n    try {\n      const domain = tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(uriString) : null;\n\n      if (domain != null) {\n        return domain;\n      }\n    } catch {\n      return null;\n    }\n\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1])\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction(i18nService: I18nService, prop: string) {\n    return (a: any, b: any) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop], b[prop])\n        : a[prop].localeCompare(b[prop]);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    let url = Utils.getUrlObject(uriString);\n    if (url == null) {\n      const hasHttpProtocol =\n        uriString.indexOf(\"http://\") === 0 || uriString.indexOf(\"https://\") === 0;\n      if (!hasHttpProtocol && uriString.indexOf(\".\") > -1) {\n        url = Utils.getUrlObject(\"http://\" + uriString);\n      }\n    }\n    return url;\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  private static validIpAddress(ipString: string): boolean {\n    const ipRegex =\n      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return ipRegex.test(ipString);\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4)\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      } else if (typeof URL === \"function\") {\n        return new URL(uriString);\n      } else if (window != null) {\n        const hasProtocol = uriString.indexOf(\"://\") > -1;\n        if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n          uriString = \"http://\" + uriString;\n        } else if (!hasProtocol) {\n          return null;\n        }\n        const anchor = window.document.createElement(\"a\");\n        anchor.href = uriString;\n        return anchor as any;\n      }\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { DeviceType } from \"../../enums/deviceType\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n\n  constructor(protected twoFactor: TokenRequestTwoFactor, device?: DeviceRequest) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenRequestTwoFactor) {\n    this.twoFactor = twoFactor;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    if (this.twoFactor.token && this.twoFactor.provider != null) {\n      obj.twoFactorToken = this.twoFactor.token;\n      obj.twoFactorProvider = this.twoFactor.provider;\n      obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n    }\n\n    return obj;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class ApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n}\n","import { TwoFactorProviderType } from \"../../../enums/twoFactorProviderType\";\n\nexport class TokenRequestTwoFactor {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false\n  ) {}\n}\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nimport { LoginUriApi } from \"./loginUriApi\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nimport { AttachmentResponse } from \"./attachmentResponse\";\nimport { BaseResponse } from \"./baseResponse\";\nimport { PasswordHistoryResponse } from \"./passwordHistoryResponse\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { PaymentMethodType } from \"../../enums/paymentMethodType\";\nimport { TransactionType } from \"../../enums/transactionType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billingResponse\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingSourceResponse } from \"./billingResponse\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n  }\n}\n\nexport class CollectionGroupDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\"\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\"\n    );\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { GlobalDomainResponse } from \"./globalDomainResponse\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d)\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { EmergencyAccessStatusType } from \"../../enums/emergencyAccessStatusType\";\nimport { EmergencyAccessType } from \"../../enums/emergencyAccessType\";\nimport { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class EmergencyAccessGranteeDetailsResponse extends BaseResponse {\n  id: string;\n  granteeId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.granteeId = this.getResponseProperty(\"GranteeId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessGrantorDetailsResponse extends BaseResponse {\n  id: string;\n  grantorId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.grantorId = this.getResponseProperty(\"GrantorId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessTakeoverResponse extends BaseResponse {\n  keyEncrypted: string;\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n\nexport class EmergencyAccessViewResponse extends BaseResponse {\n  keyEncrypted: string;\n  ciphers: CipherResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    } else {\n      if (status === 429) {\n        this.message = \"Rate limit exceeded. Try again later.\";\n      }\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { DeviceType } from \"../../enums/deviceType\";\nimport { EventType } from \"../../enums/eventType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class GroupResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  accessAll: boolean;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class GroupDetailsResponse extends GroupResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  forcePasswordReset: boolean;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","export enum SsoType {\n  None = 0,\n  OpenIdConnect = 1,\n  Saml2 = 2,\n}\n\nexport enum OpenIdConnectRedirectBehavior {\n  RedirectGet = 0,\n  FormPost = 1,\n}\n\nexport enum Saml2BindingType {\n  HttpRedirect = 1,\n  HttpPost = 2,\n}\n\nexport enum Saml2NameIdFormat {\n  NotConfigured = 0,\n  Unspecified = 1,\n  EmailAddress = 2,\n  X509SubjectName = 3,\n  WindowsDomainQualifiedName = 4,\n  KerberosPrincipalName = 5,\n  EntityIdentifier = 6,\n  Persistent = 7,\n  Transient = 8,\n}\n\nexport enum Saml2SigningBehavior {\n  IfIdpWantAuthnRequestsSigned = 0,\n  Always = 1,\n  Never = 3,\n}\n","import {\n  OpenIdConnectRedirectBehavior,\n  Saml2BindingType,\n  Saml2NameIdFormat,\n  Saml2SigningBehavior,\n  SsoType,\n} from \"../../enums/ssoEnums\";\nimport { BaseResponse } from \"../response/baseResponse\";\nimport { SsoConfigView } from \"../view/ssoConfigView\";\n\nexport class SsoConfigApi extends BaseResponse {\n  static fromView(view: SsoConfigView, api = new SsoConfigApi()) {\n    api.configType = view.configType;\n\n    api.keyConnectorEnabled = view.keyConnectorEnabled;\n    api.keyConnectorUrl = view.keyConnectorUrl;\n\n    if (api.configType === SsoType.OpenIdConnect) {\n      api.authority = view.openId.authority;\n      api.clientId = view.openId.clientId;\n      api.clientSecret = view.openId.clientSecret;\n      api.metadataAddress = view.openId.metadataAddress;\n      api.redirectBehavior = view.openId.redirectBehavior;\n      api.getClaimsFromUserInfoEndpoint = view.openId.getClaimsFromUserInfoEndpoint;\n      api.additionalScopes = view.openId.additionalScopes;\n      api.additionalUserIdClaimTypes = view.openId.additionalUserIdClaimTypes;\n      api.additionalEmailClaimTypes = view.openId.additionalEmailClaimTypes;\n      api.additionalNameClaimTypes = view.openId.additionalNameClaimTypes;\n      api.acrValues = view.openId.acrValues;\n      api.expectedReturnAcrValue = view.openId.expectedReturnAcrValue;\n    } else if (api.configType === SsoType.Saml2) {\n      api.spNameIdFormat = view.saml.spNameIdFormat;\n      api.spOutboundSigningAlgorithm = view.saml.spOutboundSigningAlgorithm;\n      api.spSigningBehavior = view.saml.spSigningBehavior;\n      api.spMinIncomingSigningAlgorithm = view.saml.spMinIncomingSigningAlgorithm;\n      api.spWantAssertionsSigned = view.saml.spWantAssertionsSigned;\n      api.spValidateCertificates = view.saml.spValidateCertificates;\n\n      api.idpEntityId = view.saml.idpEntityId;\n      api.idpBindingType = view.saml.idpBindingType;\n      api.idpSingleSignOnServiceUrl = view.saml.idpSingleSignOnServiceUrl;\n      api.idpSingleLogoutServiceUrl = view.saml.idpSingleLogoutServiceUrl;\n      api.idpX509PublicCert = view.saml.idpX509PublicCert;\n      api.idpOutboundSigningAlgorithm = view.saml.idpOutboundSigningAlgorithm;\n      api.idpAllowUnsolicitedAuthnResponse = view.saml.idpAllowUnsolicitedAuthnResponse;\n      api.idpWantAuthnRequestsSigned = view.saml.idpWantAuthnRequestsSigned;\n\n      // Value is inverted in the api model (disable instead of allow)\n      api.idpDisableOutboundLogoutRequests = !view.saml.idpAllowOutboundLogoutRequests;\n    }\n\n    return api;\n  }\n  configType: SsoType;\n\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n\n  // OpenId\n  authority: string;\n  clientId: string;\n  clientSecret: string;\n  metadataAddress: string;\n  redirectBehavior: OpenIdConnectRedirectBehavior;\n  getClaimsFromUserInfoEndpoint: boolean;\n  additionalScopes: string;\n  additionalUserIdClaimTypes: string;\n  additionalEmailClaimTypes: string;\n  additionalNameClaimTypes: string;\n  acrValues: string;\n  expectedReturnAcrValue: string;\n\n  // SAML\n  spNameIdFormat: Saml2NameIdFormat;\n  spOutboundSigningAlgorithm: string;\n  spSigningBehavior: Saml2SigningBehavior;\n  spMinIncomingSigningAlgorithm: boolean;\n  spWantAssertionsSigned: boolean;\n  spValidateCertificates: boolean;\n\n  idpEntityId: string;\n  idpBindingType: Saml2BindingType;\n  idpSingleSignOnServiceUrl: string;\n  idpSingleLogoutServiceUrl: string;\n  idpX509PublicCert: string;\n  idpOutboundSigningAlgorithm: string;\n  idpAllowUnsolicitedAuthnResponse: boolean;\n  idpDisableOutboundLogoutRequests: boolean;\n  idpWantAuthnRequestsSigned: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.configType = this.getResponseProperty(\"ConfigType\");\n\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n\n    this.authority = this.getResponseProperty(\"Authority\");\n    this.clientId = this.getResponseProperty(\"ClientId\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.metadataAddress = this.getResponseProperty(\"MetadataAddress\");\n    this.redirectBehavior = this.getResponseProperty(\"RedirectBehavior\");\n    this.getClaimsFromUserInfoEndpoint = this.getResponseProperty(\"GetClaimsFromUserInfoEndpoint\");\n    this.additionalScopes = this.getResponseProperty(\"AdditionalScopes\");\n    this.additionalUserIdClaimTypes = this.getResponseProperty(\"AdditionalUserIdClaimTypes\");\n    this.additionalEmailClaimTypes = this.getResponseProperty(\"AdditionalEmailClaimTypes\");\n    this.additionalNameClaimTypes = this.getResponseProperty(\"AdditionalNameClaimTypes\");\n    this.acrValues = this.getResponseProperty(\"AcrValues\");\n    this.expectedReturnAcrValue = this.getResponseProperty(\"ExpectedReturnAcrValue\");\n\n    this.spNameIdFormat = this.getResponseProperty(\"SpNameIdFormat\");\n    this.spOutboundSigningAlgorithm = this.getResponseProperty(\"SpOutboundSigningAlgorithm\");\n    this.spSigningBehavior = this.getResponseProperty(\"SpSigningBehavior\");\n    this.spMinIncomingSigningAlgorithm = this.getResponseProperty(\"SpMinIncomingSigningAlgorithm\");\n    this.spWantAssertionsSigned = this.getResponseProperty(\"SpWantAssertionsSigned\");\n    this.spValidateCertificates = this.getResponseProperty(\"SpValidateCertificates\");\n\n    this.idpEntityId = this.getResponseProperty(\"IdpEntityId\");\n    this.idpBindingType = this.getResponseProperty(\"IdpBindingType\");\n    this.idpSingleSignOnServiceUrl = this.getResponseProperty(\"IdpSingleSignOnServiceUrl\");\n    this.idpSingleLogoutServiceUrl = this.getResponseProperty(\"IdpSingleLogoutServiceUrl\");\n    this.idpX509PublicCert = this.getResponseProperty(\"IdpX509PublicCert\");\n    this.idpOutboundSigningAlgorithm = this.getResponseProperty(\"IdpOutboundSigningAlgorithm\");\n    this.idpAllowUnsolicitedAuthnResponse = this.getResponseProperty(\n      \"IdpAllowUnsolicitedAuthnResponse\"\n    );\n    this.idpDisableOutboundLogoutRequests = this.getResponseProperty(\n      \"IdpDisableOutboundLogoutRequests\"\n    );\n    this.idpWantAuthnRequestsSigned = this.getResponseProperty(\"IdpWantAuthnRequestsSigned\");\n  }\n}\n","import { SsoConfigApi } from \"../../api/ssoConfigApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class OrganizationSsoResponse extends BaseResponse {\n  enabled: boolean;\n  data: SsoConfigApi;\n  urls: SsoUrls;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.data =\n      this.getResponseProperty(\"Data\") != null\n        ? new SsoConfigApi(this.getResponseProperty(\"Data\"))\n        : null;\n    this.urls = new SsoUrls(this.getResponseProperty(\"Urls\"));\n  }\n}\n\nclass SsoUrls extends BaseResponse {\n  callbackPath: string;\n  signedOutCallbackPath: string;\n  spEntityId: string;\n  spMetadataUrl: string;\n  spAcsUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.callbackPath = this.getResponseProperty(\"CallbackPath\");\n    this.signedOutCallbackPath = this.getResponseProperty(\"SignedOutCallbackPath\");\n    this.spEntityId = this.getResponseProperty(\"SpEntityId\");\n    this.spMetadataUrl = this.getResponseProperty(\"SpMetadataUrl\");\n    this.spAcsUrl = this.getResponseProperty(\"SpAcsUrl\");\n  }\n}\n","import { OrganizationApiKeyType } from \"../../enums/organizationApiKeyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationApiKeyInformationResponse extends BaseResponse {\n  keyType: OrganizationApiKeyType;\n\n  constructor(response: any) {\n    super(response);\n    this.keyType = this.getResponseProperty(\"KeyType\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationAutoEnrollStatusResponse extends BaseResponse {\n  id: string;\n  resetPasswordEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.resetPasswordEnabled = this.getResponseProperty(\"ResetPasswordEnabled\");\n  }\n}\n","import { OrganizationConnectionType } from \"../../enums/organizationConnectionType\";\nimport { BillingSyncConfigApi } from \"../api/billingSyncConfigApi\";\nimport { ScimConfigApi } from \"../api/scimConfigApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi | ScimConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeysResponse extends BaseResponse {\n  privateKey: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { KeysResponse } from \"./keysResponse\";\n\nexport class OrganizationKeysResponse extends KeysResponse {\n  constructor(response: any) {\n    super(response);\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\nimport { ProductType } from \"../../enums/productType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  baseSeats: number;\n  baseStorageGb: number;\n  maxCollections: number;\n  maxUsers: number;\n\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasPremiumAccessOption: boolean;\n  trialPeriodDays: number;\n\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripeStoragePlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  additionalStoragePricePerGb: number;\n  premiumAccessOptionPrice: number;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxUsers = this.getResponseProperty(\"MaxUsers\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"SortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { PlanResponse } from \"./planResponse\";\n\nexport class OrganizationResponse extends BaseResponse {\n  id: string;\n  identifier: string;\n  name: string;\n  businessName: string;\n  businessAddress1: string;\n  businessAddress2: string;\n  businessAddress3: string;\n  businessCountry: string;\n  businessTaxNumber: string;\n  billingEmail: string;\n  plan: PlanResponse;\n  planType: PlanType;\n  seats: number;\n  maxAutoscaleSeats: number;\n  maxCollections: number;\n  maxStorageGb: number;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useResetPassword: boolean;\n  hasPublicAndPrivateKeys: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.businessAddress1 = this.getResponseProperty(\"BusinessAddress1\");\n    this.businessAddress2 = this.getResponseProperty(\"BusinessAddress2\");\n    this.businessAddress3 = this.getResponseProperty(\"BusinessAddress3\");\n    this.businessCountry = this.getResponseProperty(\"BusinessCountry\");\n    this.businessTaxNumber = this.getResponseProperty(\"BusinessTaxNumber\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n    const plan = this.getResponseProperty(\"Plan\");\n    this.plan = plan == null ? null : new PlanResponse(plan);\n    this.planType = this.getResponseProperty(\"PlanType\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxAutoscaleSeats = this.getResponseProperty(\"MaxAutoscaleSeats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n  usingInAppPurchase: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    this.usingInAppPurchase = this.getResponseProperty(\"UsingInAppPurchase\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialEndDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { OrganizationResponse } from \"./organizationResponse\";\nimport {\n  BillingSubscriptionResponse,\n  BillingSubscriptionUpcomingInvoiceResponse,\n} from \"./subscriptionResponse\";\n\nexport class OrganizationSubscriptionResponse extends OrganizationResponse {\n  storageName: string;\n  storageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  expiration: string;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n    this.expiration = this.getResponseProperty(\"Expiration\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAllCollections: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAssignedCollections: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    // For backwards compatibility with Server <= 1.43.0\n    this.manageAllCollections = this.getResponseProperty(\"ManageAllCollections\");\n    this.manageAssignedCollections = this.getResponseProperty(\"ManageAssignedCollections\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n    this.manageScim = this.getResponseProperty(\"ManageScim\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class OrganizationUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n  }\n}\n\nexport class OrganizationUserUserDetailsResponse extends OrganizationUserResponse {\n  name: string;\n  email: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n  }\n}\n\nexport class OrganizationUserDetailsResponse extends OrganizationUserResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n\nexport class OrganizationUserResetPasswordDetailsReponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  resetPasswordKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.resetPasswordKey = this.getResponseProperty(\"ResetPasswordKey\");\n    this.encryptedPrivateKey = this.getResponseProperty(\"EncryptedPrivateKey\");\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useScim = this.getResponseProperty(\"UseScim\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\"\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\"\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"./profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"./profileProviderResponse\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o)\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../organizationUserBulkPublicKeyResponse\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { ProviderUserStatusType } from \"../../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../../enums/providerUserType\";\nimport { PermissionsApi } from \"../../api/permissionsApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionDetailsResponse } from \"./collectionResponse\";\nimport { DomainsResponse } from \"./domainsResponse\";\nimport { FolderResponse } from \"./folderResponse\";\nimport { PolicyResponse } from \"./policyResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","import { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { DeviceType } from \"../enums/deviceType\";\nimport { OrganizationApiKeyType } from \"../enums/organizationApiKeyType\";\nimport { OrganizationConnectionType } from \"../enums/organizationConnectionType\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { Utils } from \"../misc/utils\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { VerifyOTPRequest } from \"../models/request/account/verifyOTPRequest\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { BitPayInvoiceRequest } from \"../models/request/bitPayInvoiceRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { DeleteRecoverRequest } from \"../models/request/deleteRecoverRequest\";\nimport { DeviceRequest } from \"../models/request/deviceRequest\";\nimport { DeviceVerificationRequest } from \"../models/request/deviceVerificationRequest\";\nimport { EmailRequest } from \"../models/request/emailRequest\";\nimport { EmailTokenRequest } from \"../models/request/emailTokenRequest\";\nimport { EmergencyAccessAcceptRequest } from \"../models/request/emergencyAccessAcceptRequest\";\nimport { EmergencyAccessConfirmRequest } from \"../models/request/emergencyAccessConfirmRequest\";\nimport { EmergencyAccessInviteRequest } from \"../models/request/emergencyAccessInviteRequest\";\nimport { EmergencyAccessPasswordRequest } from \"../models/request/emergencyAccessPasswordRequest\";\nimport { EmergencyAccessUpdateRequest } from \"../models/request/emergencyAccessUpdateRequest\";\nimport { EventRequest } from \"../models/request/eventRequest\";\nimport { GroupRequest } from \"../models/request/groupRequest\";\nimport { IapCheckRequest } from \"../models/request/iapCheckRequest\";\nimport { ApiTokenRequest } from \"../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportDirectoryRequest } from \"../models/request/importDirectoryRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KdfRequest } from \"../models/request/kdfRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { OrganizationSponsorshipCreateRequest } from \"../models/request/organization/organizationSponsorshipCreateRequest\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../models/request/organization/organizationSponsorshipRedeemRequest\";\nimport { OrganizationSsoRequest } from \"../models/request/organization/organizationSsoRequest\";\nimport { OrganizationApiKeyRequest } from \"../models/request/organizationApiKeyRequest\";\nimport { OrganizationConnectionRequest } from \"../models/request/organizationConnectionRequest\";\nimport { OrganizationCreateRequest } from \"../models/request/organizationCreateRequest\";\nimport { OrganizationImportRequest } from \"../models/request/organizationImportRequest\";\nimport { OrganizationKeysRequest } from \"../models/request/organizationKeysRequest\";\nimport { OrganizationSubscriptionUpdateRequest } from \"../models/request/organizationSubscriptionUpdateRequest\";\nimport { OrganizationTaxInfoUpdateRequest } from \"../models/request/organizationTaxInfoUpdateRequest\";\nimport { OrganizationUpdateRequest } from \"../models/request/organizationUpdateRequest\";\nimport { OrganizationUpgradeRequest } from \"../models/request/organizationUpgradeRequest\";\nimport { OrganizationUserAcceptRequest } from \"../models/request/organizationUserAcceptRequest\";\nimport { OrganizationUserBulkConfirmRequest } from \"../models/request/organizationUserBulkConfirmRequest\";\nimport { OrganizationUserBulkRequest } from \"../models/request/organizationUserBulkRequest\";\nimport { OrganizationUserConfirmRequest } from \"../models/request/organizationUserConfirmRequest\";\nimport { OrganizationUserInviteRequest } from \"../models/request/organizationUserInviteRequest\";\nimport { OrganizationUserResetPasswordEnrollmentRequest } from \"../models/request/organizationUserResetPasswordEnrollmentRequest\";\nimport { OrganizationUserResetPasswordRequest } from \"../models/request/organizationUserResetPasswordRequest\";\nimport { OrganizationUserUpdateGroupsRequest } from \"../models/request/organizationUserUpdateGroupsRequest\";\nimport { OrganizationUserUpdateRequest } from \"../models/request/organizationUserUpdateRequest\";\nimport { PasswordHintRequest } from \"../models/request/passwordHintRequest\";\nimport { PasswordRequest } from \"../models/request/passwordRequest\";\nimport { PaymentRequest } from \"../models/request/paymentRequest\";\nimport { PolicyRequest } from \"../models/request/policyRequest\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ProviderAddOrganizationRequest } from \"../models/request/provider/providerAddOrganizationRequest\";\nimport { ProviderOrganizationCreateRequest } from \"../models/request/provider/providerOrganizationCreateRequest\";\nimport { ProviderSetupRequest } from \"../models/request/provider/providerSetupRequest\";\nimport { ProviderUpdateRequest } from \"../models/request/provider/providerUpdateRequest\";\nimport { ProviderUserAcceptRequest } from \"../models/request/provider/providerUserAcceptRequest\";\nimport { ProviderUserBulkConfirmRequest } from \"../models/request/provider/providerUserBulkConfirmRequest\";\nimport { ProviderUserBulkRequest } from \"../models/request/provider/providerUserBulkRequest\";\nimport { ProviderUserConfirmRequest } from \"../models/request/provider/providerUserConfirmRequest\";\nimport { ProviderUserInviteRequest } from \"../models/request/provider/providerUserInviteRequest\";\nimport { ProviderUserUpdateRequest } from \"../models/request/provider/providerUserUpdateRequest\";\nimport { RegisterRequest } from \"../models/request/registerRequest\";\nimport { SeatRequest } from \"../models/request/seatRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { SelectionReadOnlyRequest } from \"../models/request/selectionReadOnlyRequest\";\nimport { SendAccessRequest } from \"../models/request/sendAccessRequest\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { SetPasswordRequest } from \"../models/request/setPasswordRequest\";\nimport { StorageRequest } from \"../models/request/storageRequest\";\nimport { TaxInfoUpdateRequest } from \"../models/request/taxInfoUpdateRequest\";\nimport { TwoFactorEmailRequest } from \"../models/request/twoFactorEmailRequest\";\nimport { TwoFactorProviderRequest } from \"../models/request/twoFactorProviderRequest\";\nimport { TwoFactorRecoveryRequest } from \"../models/request/twoFactorRecoveryRequest\";\nimport { UpdateDomainsRequest } from \"../models/request/updateDomainsRequest\";\nimport { UpdateKeyRequest } from \"../models/request/updateKeyRequest\";\nimport { UpdateProfileRequest } from \"../models/request/updateProfileRequest\";\nimport { UpdateTempPasswordRequest } from \"../models/request/updateTempPasswordRequest\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../models/request/updateTwoFactorAuthenticatorRequest\";\nimport { UpdateTwoFactorDuoRequest } from \"../models/request/updateTwoFactorDuoRequest\";\nimport { UpdateTwoFactorEmailRequest } from \"../models/request/updateTwoFactorEmailRequest\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../models/request/updateTwoFactorWebAuthnDeleteRequest\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../models/request/updateTwoFactorWebAuthnRequest\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../models/request/updateTwoFactorYubioOtpRequest\";\nimport { VerifyBankRequest } from \"../models/request/verifyBankRequest\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verifyDeleteRecoverRequest\";\nimport { VerifyEmailRequest } from \"../models/request/verifyEmailRequest\";\nimport { ApiKeyResponse } from \"../models/response/apiKeyResponse\";\nimport { AttachmentResponse } from \"../models/response/attachmentResponse\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { BillingHistoryResponse } from \"../models/response/billingHistoryResponse\";\nimport { BillingPaymentResponse } from \"../models/response/billingPaymentResponse\";\nimport { BillingResponse } from \"../models/response/billingResponse\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport {\n  CollectionGroupDetailsResponse,\n  CollectionResponse,\n} from \"../models/response/collectionResponse\";\nimport { DeviceVerificationResponse } from \"../models/response/deviceVerificationResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport {\n  EmergencyAccessGranteeDetailsResponse,\n  EmergencyAccessGrantorDetailsResponse,\n  EmergencyAccessTakeoverResponse,\n  EmergencyAccessViewResponse,\n} from \"../models/response/emergencyAccessResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { EventResponse } from \"../models/response/eventResponse\";\nimport { GroupDetailsResponse, GroupResponse } from \"../models/response/groupResponse\";\nimport { IdentityCaptchaResponse } from \"../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\nimport { KeyConnectorUserKeyResponse } from \"../models/response/keyConnectorUserKeyResponse\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { OrganizationSsoResponse } from \"../models/response/organization/organizationSsoResponse\";\nimport { OrganizationApiKeyInformationResponse } from \"../models/response/organizationApiKeyInformationResponse\";\nimport { OrganizationAutoEnrollStatusResponse } from \"../models/response/organizationAutoEnrollStatusResponse\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"../models/response/organizationConnectionResponse\";\nimport { OrganizationKeysResponse } from \"../models/response/organizationKeysResponse\";\nimport { OrganizationResponse } from \"../models/response/organizationResponse\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../models/response/organizationSponsorshipSyncStatusResponse\";\nimport { OrganizationSubscriptionResponse } from \"../models/response/organizationSubscriptionResponse\";\nimport { OrganizationUserBulkPublicKeyResponse } from \"../models/response/organizationUserBulkPublicKeyResponse\";\nimport { OrganizationUserBulkResponse } from \"../models/response/organizationUserBulkResponse\";\nimport {\n  OrganizationUserDetailsResponse,\n  OrganizationUserResetPasswordDetailsReponse,\n  OrganizationUserUserDetailsResponse,\n} from \"../models/response/organizationUserResponse\";\nimport { PaymentResponse } from \"../models/response/paymentResponse\";\nimport { PlanResponse } from \"../models/response/planResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { PreloginResponse } from \"../models/response/preloginResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../models/response/provider/providerOrganizationResponse\";\nimport { ProviderResponse } from \"../models/response/provider/providerResponse\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../models/response/provider/providerUserBulkPublicKeyResponse\";\nimport { ProviderUserBulkResponse } from \"../models/response/provider/providerUserBulkResponse\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../models/response/provider/providerUserResponse\";\nimport { SelectionReadOnlyResponse } from \"../models/response/selectionReadOnlyResponse\";\nimport { SendAccessResponse } from \"../models/response/sendAccessResponse\";\nimport { SendFileDownloadDataResponse } from \"../models/response/sendFileDownloadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SsoPreValidateResponse } from \"../models/response/ssoPreValidateResponse\";\nimport { SubscriptionResponse } from \"../models/response/subscriptionResponse\";\nimport { SyncResponse } from \"../models/response/syncResponse\";\nimport { TaxInfoResponse } from \"../models/response/taxInfoResponse\";\nimport { TaxRateResponse } from \"../models/response/taxRateResponse\";\nimport { TwoFactorAuthenticatorResponse } from \"../models/response/twoFactorAuthenticatorResponse\";\nimport { TwoFactorDuoResponse } from \"../models/response/twoFactorDuoResponse\";\nimport { TwoFactorEmailResponse } from \"../models/response/twoFactorEmailResponse\";\nimport { TwoFactorProviderResponse } from \"../models/response/twoFactorProviderResponse\";\nimport { TwoFactorRecoverResponse } from \"../models/response/twoFactorRescoverResponse\";\nimport {\n  TwoFactorWebAuthnResponse,\n  ChallengeResponse,\n} from \"../models/response/twoFactorWebAuthnResponse\";\nimport { TwoFactorYubiKeyResponse } from \"../models/response/twoFactorYubiKeyResponse\";\nimport { UserKeyResponse } from \"../models/response/userKeyResponse\";\nimport { SendAccessView } from \"../models/view/sendAccessView\";\n\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof ApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        await this.tokenService.clearTwoFactorToken();\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  deleteAccount(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  postRegister(request: RegisterRequest): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      false,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postIapCheck(request: IapCheckRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/iap-check\", request, true, false);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  postCancelPremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/cancel-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountKey(request: UpdateKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/key\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, false);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postAccountRequestOTP(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Send APIs\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + sendId + \"/file/\" + fileId, null, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id + \"/remove-password\", null, true, true);\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getFullCipherDetails(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/details\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkDeleteRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionDetails(\n    organizationId: string,\n    id: string\n  ): Promise<CollectionGroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new CollectionGroupDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[]\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupDetails(organizationId: string, id: string): Promise<GroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new GroupDetailsResponse(r);\n  }\n\n  async getGroups(organizationId: string): Promise<ListResponse<GroupResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, GroupResponse);\n  }\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async postGroup(organizationId: string, request: GroupRequest): Promise<GroupResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroup(\n    organizationId: string,\n    id: string,\n    request: GroupRequest\n  ): Promise<GroupResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteGroup(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Policy APIs\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        encodeURIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByInvitedUser(\n    organizationId: string,\n    userId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/invited-user?\" + \"userId=\" + userId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async putPolicy(\n    organizationId: string,\n    type: PolicyType,\n    request: PolicyRequest\n  ): Promise<PolicyResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  // Organization User APIs\n\n  async getOrganizationUser(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserDetailsResponse(r);\n  }\n\n  async getOrganizationUserGroups(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async getOrganizationUsers(\n    organizationId: string\n  ): Promise<ListResponse<OrganizationUserUserDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserUserDetailsResponse);\n  }\n\n  async getOrganizationUserResetPasswordDetails(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserResetPasswordDetailsReponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password-details\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserResetPasswordDetailsReponse(r);\n  }\n\n  async getOrganizationAutoEnrollStatus(\n    identifier: string\n  ): Promise<OrganizationAutoEnrollStatusResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + identifier + \"/auto-enroll-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationAutoEnrollStatusResponse(r);\n  }\n\n  postOrganizationUserInvite(\n    organizationId: string,\n    request: OrganizationUserInviteRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/invite\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserReinvite(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyOrganizationUserReinvite(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  postOrganizationUserAccept(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserConfirm(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postOrganizationUsersPublicKey(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkPublicKeyResponse);\n  }\n\n  async postOrganizationUserBulkConfirm(\n    organizationId: string,\n    request: OrganizationUserBulkConfirmRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  putOrganizationUser(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserGroups(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateGroupsRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPasswordEnrollment(\n    organizationId: string,\n    userId: string,\n    request: OrganizationUserResetPasswordEnrollmentRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + userId + \"/reset-password-enrollment\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPassword(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserResetPasswordRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  deactivateOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/deactivate\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async deactivateManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/deactivate\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  activateOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/activate\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async activateManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/activate\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans/\", null, true, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postImportDirectory(organizationId: string, request: ImportDirectoryRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + organizationId + \"/import\", request, true, false);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Emergency Access APIs\n\n  async getEmergencyAccessTrusted(): Promise<ListResponse<EmergencyAccessGranteeDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/trusted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGranteeDetailsResponse);\n  }\n\n  async getEmergencyAccessGranted(): Promise<ListResponse<EmergencyAccessGrantorDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/granted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGrantorDetailsResponse);\n  }\n\n  async getEmergencyAccess(id: string): Promise<EmergencyAccessGranteeDetailsResponse> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id, null, true, true);\n    return new EmergencyAccessGranteeDetailsResponse(r);\n  }\n\n  async getEmergencyGrantorPolicies(id: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id + \"/policies\", null, true, true);\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  putEmergencyAccess(id: string, request: EmergencyAccessUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/emergency-access/\" + id, request, true, false);\n  }\n\n  deleteEmergencyAccess(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/emergency-access/\" + id, null, true, false);\n  }\n\n  postEmergencyAccessInvite(request: EmergencyAccessInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/invite\", request, true, false);\n  }\n\n  postEmergencyAccessReinvite(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reinvite\", null, true, false);\n  }\n\n  postEmergencyAccessAccept(id: string, request: EmergencyAccessAcceptRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/accept\", request, true, false);\n  }\n\n  postEmergencyAccessConfirm(id: string, request: EmergencyAccessConfirmRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/confirm\", request, true, false);\n  }\n\n  postEmergencyAccessInitiate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/initiate\", null, true, false);\n  }\n\n  postEmergencyAccessApprove(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/approve\", null, true, false);\n  }\n\n  postEmergencyAccessReject(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reject\", null, true, false);\n  }\n\n  async postEmergencyAccessTakeover(id: string): Promise<EmergencyAccessTakeoverResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/takeover\", null, true, true);\n    return new EmergencyAccessTakeoverResponse(r);\n  }\n\n  async postEmergencyAccessPassword(\n    id: string,\n    request: EmergencyAccessPasswordRequest\n  ): Promise<any> {\n    await this.send(\"POST\", \"/emergency-access/\" + id + \"/password\", request, true, true);\n  }\n\n  async postEmergencyAccessView(id: string): Promise<EmergencyAccessViewResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/view\", null, true, true);\n    return new EmergencyAccessViewResponse(r);\n  }\n\n  // Organization APIs\n\n  async getOrganization(id: string): Promise<OrganizationResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id, null, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async getOrganizationBilling(id: string): Promise<BillingResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/billing\", null, true, true);\n    return new BillingResponse(r);\n  }\n\n  async getOrganizationSubscription(id: string): Promise<OrganizationSubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/subscription\", null, true, true);\n    return new OrganizationSubscriptionResponse(r);\n  }\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  async getOrganizationLicense(id: string, installationId: string): Promise<any> {\n    return this.send(\n      \"GET\",\n      \"/organizations/\" + id + \"/license?installationId=\" + installationId,\n      null,\n      true,\n      true\n    );\n  }\n\n  async getOrganizationTaxInfo(id: string): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async getOrganizationSso(id: string): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/sso\", null, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganization(request: OrganizationCreateRequest): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations\", request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganization(\n    id: string,\n    request: OrganizationUpdateRequest\n  ): Promise<OrganizationResponse> {\n    const r = await this.send(\"PUT\", \"/organizations/\" + id, request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganizationTaxInfo(\n    id: string,\n    request: OrganizationTaxInfoUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/organizations/\" + id + \"/tax\", request, true, false);\n  }\n\n  postLeaveOrganization(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/leave\", null, true, false);\n  }\n\n  async postOrganizationLicense(data: FormData): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations/license\", data, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async postOrganizationLicenseUpdate(id: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/license\", data, true, false);\n  }\n\n  async postOrganizationApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async getOrganizationApiKeyInformation(\n    id: string,\n    type: OrganizationApiKeyType = null\n  ): Promise<ListResponse<OrganizationApiKeyInformationResponse>> {\n    const uri =\n      type === null\n        ? \"/organizations/\" + id + \"/api-key-information\"\n        : \"/organizations/\" + id + \"/api-key-information/\" + type;\n    const r = await this.send(\"GET\", uri, null, true, true);\n    return new ListResponse(r, OrganizationApiKeyInformationResponse);\n  }\n\n  async postOrganizationRotateApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + id + \"/rotate-api-key\",\n      request,\n      true,\n      true\n    );\n    return new ApiKeyResponse(r);\n  }\n\n  async postOrganizationSso(\n    id: string,\n    request: OrganizationSsoRequest\n  ): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/sso\", request, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganizationUpgrade(\n    id: string,\n    request: OrganizationUpgradeRequest\n  ): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/upgrade\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationUpdateSubscription(\n    id: string,\n    request: OrganizationSubscriptionUpdateRequest\n  ): Promise<void> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/subscription\", request, true, false);\n  }\n\n  async postOrganizationSeat(id: string, request: SeatRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/seat\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationStorage(id: string, request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postOrganizationPayment(id: string, request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/payment\", request, true, false);\n  }\n\n  postOrganizationVerifyBank(id: string, request: VerifyBankRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/verify-bank\", request, true, false);\n  }\n\n  postOrganizationCancel(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/cancel\", null, true, false);\n  }\n\n  postOrganizationReinstate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/reinstate\", null, true, false);\n  }\n\n  deleteOrganization(id: string, request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/organizations/\" + id, request, true, false);\n  }\n\n  async getOrganizationKeys(id: string): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/keys\", null, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  async postOrganizationKeys(\n    id: string,\n    request: OrganizationKeysRequest\n  ): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/keys\", request, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const response = await this.fetch(\n      new Request(this.environmentService.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      })\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getUserKeyFromKeyConnector(keyConnectorUrl: string): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersion()\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      })\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const decodedToken = await this.tokenService.decodeToken();\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        tokenResponse.refreshToken,\n        null\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n\n    const tokenRequest = new ApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenRequestTwoFactor(),\n      deviceRequest\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    await this.tokenService.setToken(response.accessToken);\n  }\n\n  async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void\n  ): Promise<any> {\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;\n\n    const requestUrl = apiUrl + path;\n    // Prevent directory traversal from malicious paths\n    if (new URL(requestUrl).href !== requestUrl) {\n      return Promise.reject(\"Invalid request url path.\");\n    }\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    if (hasResponse && response.status === 200) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean\n  ): Promise<ErrorResponse> {\n    if (\n      authed &&\n      ((tokenError && response.status === 400) ||\n        response.status === 401 ||\n        response.status === 403)\n    ) {\n      await this.logoutCallback(true);\n      return null;\n    }\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private getCredentials(): RequestCredentials {\n    if (!this.isWebClient || this.environmentService.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { AppIdService as AppIdServiceAbstraction } from \"../abstractions/appId.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { Utils } from \"../misc/utils\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(private storageService: AbstractStorageService) {}\n\n  getAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"appId\");\n  }\n\n  getAnonymousAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"anonymousAppId\");\n  }\n\n  private async makeAndGetAppId(key: string) {\n    const existingId = await this.storageService.get<string>(key, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    if (existingId != null) {\n      return existingId;\n    }\n\n    const guid = Utils.newGuid();\n    await this.storageService.save(key, guid, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    return guid;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { throttle } from \"../misc/throttle\";\nimport { Utils } from \"../misc/utils\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  Api = 2,\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","import { AuthenticationStatus } from \"../../enums/authenticationStatus\";\nimport { KdfType } from \"../../enums/kdfType\";\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CollectionData } from \"../data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../data/eventData\";\nimport { FolderData } from \"../data/folderData\";\nimport { OrganizationData } from \"../data/organizationData\";\nimport { PolicyData } from \"../data/policyData\";\nimport { ProviderData } from \"../data/providerData\";\nimport { SendData } from \"../data/sendData\";\nimport { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { SendView } from \"../view/sendView\";\n\nimport { EncString } from \"./encString\";\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { GeneratedPasswordHistory } from \"./generatedPasswordHistory\";\nimport { Policy } from \"./policy\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n  decryptedSerialized?: string;\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n  decrypted?: TDecrypted[];\n}\n\n// This is a temporary structure to handle migrated `DataEncryptionPair` to\n//  avoid needing a data migration at this stage. It should be replaced with\n//  proper data migrations when `DataEncryptionPair` is deprecated.\nexport class TemporaryDataEncryption<TEncrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  folders? = new TemporaryDataEncryption<FolderData>();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  collections?: DataEncryptionPair<CollectionData, CollectionView> = new DataEncryptionPair<\n    CollectionData,\n    CollectionView\n  >();\n  policies?: DataEncryptionPair<PolicyData, Policy> = new DataEncryptionPair<PolicyData, Policy>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: any;\n  eventCollection?: EventData[];\n  organizations?: { [id: string]: OrganizationData };\n  providers?: { [id: string]: ProviderData };\n}\n\nexport class AccountKeys {\n  cryptoMasterKey?: SymmetricCryptoKey;\n  cryptoMasterKeyAuto?: string;\n  cryptoMasterKeyB64?: string;\n  cryptoMasterKeyBiometric?: string;\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n  organizationKeys?: EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Map<string, SymmetricCryptoKey>\n  > = new EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Map<string, SymmetricCryptoKey>\n  >();\n  providerKeys?: EncryptionPair<any, Map<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Map<string, SymmetricCryptoKey>\n  >();\n  privateKey?: EncryptionPair<string, ArrayBuffer> = new EncryptionPair<string, ArrayBuffer>();\n  legacyEtmKey?: SymmetricCryptoKey;\n  publicKey?: ArrayBuffer;\n  publicKeySerialized?: string;\n  apiKeyClientSecret?: string;\n}\n\nexport class AccountProfile {\n  apiKeyClientId?: string;\n  authenticationStatus?: AuthenticationStatus;\n  convertAccountToKeyConnector?: boolean;\n  email?: string;\n  emailVerified?: boolean;\n  entityId?: string;\n  entityType?: string;\n  everBeenUnlocked?: boolean;\n  forcePasswordReset?: boolean;\n  hasPremiumPersonally?: boolean;\n  hasPremiumFromOrganization?: boolean;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfType?: KdfType;\n}\n\nexport class AccountSettings {\n  autoConfirmFingerPrints?: boolean;\n  autoFillOnPageLoadDefault?: boolean;\n  biometricLocked?: boolean;\n  biometricUnlock?: boolean;\n  clearClipboard?: number;\n  collapsedGroupings?: string[];\n  defaultUriMatch?: UriMatchType;\n  disableAddLoginNotification?: boolean;\n  disableAutoBiometricsPrompt?: boolean;\n  disableAutoTotpCopy?: boolean;\n  disableBadgeCounter?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n  disableGa?: boolean;\n  dontShowCardsCurrentTab?: boolean;\n  dontShowIdentitiesCurrentTab?: boolean;\n  enableAlwaysOnTop?: boolean;\n  enableAutoFillOnPageLoad?: boolean;\n  enableBiometric?: boolean;\n  enableFullWidth?: boolean;\n  enableGravitars?: boolean;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  equivalentDomains?: any;\n  minimizeOnCopyToClipboard?: boolean;\n  neverDomains?: { [id: string]: any };\n  passwordGenerationOptions?: any;\n  usernameGenerationOptions?: any;\n  generatorOptions?: any;\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n  protectedPin?: string;\n  settings?: any; // TODO: Merge whatever is going on here into the AccountSettings model properly\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n}\n\nexport class AccountTokens {\n  accessToken?: string;\n  decodedToken?: any;\n  refreshToken?: string;\n  securityStamp?: string;\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n    });\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  resetMasterPassword = false;\n  forcePasswordReset = false;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Account, AccountProfile, AccountTokens } from \"../../models/domain/account\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../../models/domain/logInCredentials\";\nimport { DeviceRequest } from \"../../models/request/deviceRequest\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\nimport { KeysRequest } from \"../../models/request/keysRequest\";\nimport { IdentityCaptchaResponse } from \"../../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../../models/response/identityTwoFactorResponse\";\n\nexport abstract class LogInStrategy {\n  protected abstract tokenRequest: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest;\n  protected captchaBypassToken: string = null;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService\n  ) {}\n\n  abstract logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string = null\n  ): Promise<AuthResult> {\n    this.tokenRequest.setTwoFactor(twoFactor);\n    return this.startLogIn();\n  }\n\n  protected async startLogIn(): Promise<AuthResult> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const response = await this.apiService.postIdentityToken(this.tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return this.processTwoFactorResponse(response);\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return this.processCaptchaResponse(response);\n    } else if (response instanceof IdentityTokenResponse) {\n      return this.processTokenResponse(response);\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected onSuccessfulLogin(response: IdentityTokenResponse): Promise<void> {\n    // Implemented in subclass if required\n    return null;\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  protected async buildTwoFactor(userProvidedTwoFactor?: TokenRequestTwoFactor) {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    const storedTwoFactorToken = await this.tokenService.getTwoFactorToken();\n    if (storedTwoFactorToken != null) {\n      return new TokenRequestTwoFactor(TwoFactorProviderType.Remember, storedTwoFactorToken, false);\n    }\n\n    return new TokenRequestTwoFactor();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    const accountInformation = await this.tokenService.decodeToken(tokenResponse.accessToken);\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId: accountInformation.sub,\n            email: accountInformation.email,\n            hasPremiumPersonally: accountInformation.premium,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n          ...{\n            accessToken: tokenResponse.accessToken,\n            refreshToken: tokenResponse.refreshToken,\n          },\n        },\n      })\n    );\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.resetMasterPassword = response.resetMasterPassword;\n    result.forcePasswordReset = response.forcePasswordReset;\n\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      await this.tokenService.setTwoFactorToken(response);\n    }\n\n    const newSsoUser = response.key == null;\n    if (!newSsoUser) {\n      await this.cryptoService.setEncKey(response.key);\n      await this.cryptoService.setEncPrivateKey(\n        response.privateKey ?? (await this.createKeyPairForOldAccount())\n      );\n    }\n\n    await this.onSuccessfulLogin(response);\n\n    await this.stateService.setBiometricLocked(false);\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n    this.twoFactorService.setProviders(response);\n    this.captchaBypassToken = response.captchaToken ?? null;\n    return result;\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n\n  private async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../../abstractions/environment.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { ApiLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class ApiLogInStrategy extends LogInStrategy {\n  tokenRequest: ApiTokenRequest;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    if (tokenResponse.apiUseKeyConnector) {\n      const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();\n      await this.keyConnectorService.getAndSetKey(keyConnectorUrl);\n    }\n  }\n\n  async logIn(credentials: ApiLogInCredentials) {\n    this.tokenRequest = new ApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n    await this.stateService.setApiKeyClientId(this.tokenRequest.clientId);\n    await this.stateService.setApiKeyClientSecret(this.tokenRequest.clientSecret);\n  }\n}\n","import { ClientType } from \"../../../enums/clientType\";\nimport { Utils } from \"../../../misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captchaProtectedRequest\";\nimport { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { AuthService } from \"../../abstractions/auth.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { HashPurpose } from \"../../enums/hashPurpose\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport { PasswordLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class PasswordLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localHashedPassword: string;\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin() {\n    await this.cryptoService.setKey(this.key);\n    await this.cryptoService.setKeyHash(this.localHashedPassword);\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  async logIn(credentials: PasswordLogInCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    this.key = await this.authService.makePreloginKey(masterPassword, email);\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    this.localHashedPassword = await this.cryptoService.hashPassword(\n      masterPassword,\n      this.key,\n      HashPurpose.LocalAuthorization\n    );\n    const hashedPassword = await this.cryptoService.hashPassword(masterPassword, this.key);\n\n    this.tokenRequest = new PasswordTokenRequest(\n      email,\n      hashedPassword,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { SsoLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class SsoLogInStrategy extends LogInStrategy {\n  tokenRequest: SsoTokenRequest;\n  orgId: string;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (tokenResponse.keyConnectorUrl != null) {\n      if (!newSsoUser) {\n        await this.keyConnectorService.getAndSetKey(tokenResponse.keyConnectorUrl);\n      } else {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(tokenResponse, this.orgId);\n      }\n    }\n  }\n\n  async logIn(credentials: SsoLogInCredentials) {\n    this.orgId = credentials.orgId;\n    this.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/twoFactor.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { AuthenticationType } from \"../enums/authenticationType\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { ApiLogInStrategy } from \"../misc/logInStrategies/apiLogin.strategy\";\nimport { PasswordLogInStrategy } from \"../misc/logInStrategies/passwordLogin.strategy\";\nimport { SsoLogInStrategy } from \"../misc/logInStrategies/ssoLogin.strategy\";\nimport { AuthResult } from \"../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class AuthService implements AuthServiceAbstraction {\n  get email(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy ? this.logInStrategy.email : null;\n  }\n\n  get masterPasswordHash(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy\n      ? this.logInStrategy.masterPasswordHash\n      : null;\n  }\n\n  private logInStrategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n  private sessionTimeout: any;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService\n  ) {}\n\n  async logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult> {\n    this.clearState();\n\n    let strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n\n    if (credentials.type === AuthenticationType.Password) {\n      strategy = new PasswordLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this\n      );\n    } else if (credentials.type === AuthenticationType.Sso) {\n      strategy = new SsoLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.keyConnectorService\n      );\n    } else if (credentials.type === AuthenticationType.Api) {\n      strategy = new ApiLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.environmentService,\n        this.keyConnectorService\n      );\n    }\n\n    const result = await strategy.logIn(credentials as any);\n\n    if (result?.requiresTwoFactor) {\n      this.saveState(strategy);\n    }\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    if (this.logInStrategy == null) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    try {\n      const result = await this.logInStrategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear state if 2FA token has been accepted, otherwise we need to be able to try again\n      if (!result.requiresTwoFactor && !result.requiresCaptcha) {\n        this.clearState();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear state to be safe\n      if (!(e instanceof ErrorResponse)) {\n        this.clearState();\n      }\n      throw e;\n    }\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n\n  authingWithApiKey(): boolean {\n    return this.logInStrategy instanceof ApiLogInStrategy;\n  }\n\n  authingWithSso(): boolean {\n    return this.logInStrategy instanceof SsoLogInStrategy;\n  }\n\n  authingWithPassword(): boolean {\n    return this.logInStrategy instanceof PasswordLogInStrategy;\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // Keys aren't stored for a device that is locked or logged out\n    // Make sure we're logged in before checking this, otherwise we could mix up those states\n    const neverLock =\n      (await this.cryptoService.hasKeyStored(KeySuffixOptions.Auto, userId)) &&\n      !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n    if (neverLock) {\n      // TODO: This also _sets_ the key so when we check memory in the next line it finds a key.\n      // We should refactor here.\n      await this.cryptoService.getKey(KeySuffixOptions.Auto, userId);\n    }\n\n    const hasKeyInMemory = await this.cryptoService.hasKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<SymmetricCryptoKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfIterations: number = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfIterations = preloginResponse.kdfIterations;\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);\n  }\n\n  private saveState(strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy) {\n    this.logInStrategy = strategy;\n    this.startSessionTimeout();\n  }\n\n  private clearState() {\n    this.logInStrategy = null;\n    this.clearSessionTimeout();\n  }\n\n  private startSessionTimeout() {\n    this.clearSessionTimeout();\n    this.sessionTimeout = setTimeout(() => this.clearState(), sessionTimeoutLength);\n  }\n\n  private clearSessionTimeout() {\n    if (this.sessionTimeout != null) {\n      clearTimeout(this.sessionTimeout);\n    }\n  }\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export enum UriMatchType {\n  Domain = 0,\n  Host = 1,\n  StartsWith = 2,\n  Exact = 3,\n  RegularExpression = 4,\n  Never = 5,\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { AttachmentResponse } from \"../response/attachmentResponse\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/cardApi\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldApi } from \"../api/fieldApi\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identityApi\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\n\nexport class LoginUriData {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/loginApi\";\n\nimport { LoginUriData } from \"./loginUriData\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/passwordHistoryResponse\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherResponse } from \"../response/cipherResponse\";\n\nimport { AttachmentData } from \"./attachmentData\";\nimport { CardData } from \"./cardData\";\nimport { FieldData } from \"./fieldData\";\nimport { IdentityData } from \"./identityData\";\nimport { LoginData } from \"./loginData\";\nimport { PasswordHistoryData } from \"./passwordHistoryData\";\nimport { SecureNoteData } from \"./secureNoteData\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Attachment } from \"../domain/attachment\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { View } from \"./view\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncString {\n  encryptedString?: string;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string\n  ) {\n    if (data != null) {\n      // data and header\n      const encType = encryptedStringOrType as EncryptionType;\n\n      if (iv != null) {\n        this.encryptedString = encType + \".\" + iv + \"|\" + data;\n      } else {\n        this.encryptedString = encType + \".\" + data;\n      }\n\n      // mac\n      if (mac != null) {\n        this.encryptedString += \"|\" + mac;\n      }\n\n      this.encryptionType = encType;\n      this.data = data;\n      this.iv = iv;\n      this.mac = mac;\n\n      return;\n    }\n\n    this.encryptedString = encryptedStringOrType as string;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const headerPieces = this.encryptedString.split(\".\");\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        this.encryptionType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = this.encryptedString.split(\"|\");\n      this.encryptionType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    switch (this.encryptionType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encPieces.length !== 3) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encPieces.length !== 2) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        if (encPieces.length !== 1) {\n          return;\n        }\n\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      if (key == null) {\n        key = await cryptoService.getOrgKey(orgId);\n      }\n      this.decryptedValue = await cryptoService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n}\n","import { View } from \"../view/view\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","import { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class SymmetricCryptoKey {\n  key: ArrayBuffer;\n  encKey?: ArrayBuffer;\n  macKey?: ArrayBuffer;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: ArrayBuffer, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  static initFromJson(jsonResult: SymmetricCryptoKey): SymmetricCryptoKey {\n    if (jsonResult == null) {\n      return jsonResult;\n    }\n\n    if (jsonResult.keyB64 != null) {\n      jsonResult.key = Utils.fromB64ToArray(jsonResult.keyB64).buffer;\n    }\n    if (jsonResult.encKeyB64 != null) {\n      jsonResult.encKey = Utils.fromB64ToArray(jsonResult.encKeyB64).buffer;\n    }\n    if (jsonResult.macKeyB64 != null) {\n      jsonResult.macKey = Utils.fromB64ToArray(jsonResult.macKeyB64).buffer;\n    }\n\n    return jsonResult;\n  }\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { AttachmentData } from \"../data/attachmentData\";\nimport { AttachmentView } from \"../view/attachmentView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.key != null) {\n      let cryptoService: CryptoService;\n      const containerService = (Utils.global as any).bitwardenContainerService;\n      if (containerService) {\n        cryptoService = containerService.getCryptoService();\n      } else {\n        throw new Error(\"global bitwardenContainerService not initialized.\");\n      }\n\n      try {\n        const orgKey = await cryptoService.getOrgKey(orgId);\n        const decValue = await cryptoService.decryptToBytes(this.key, orgKey ?? encKey);\n        view.key = new SymmetricCryptoKey(decValue);\n      } catch (e) {\n        // TODO: error?\n      }\n    }\n\n    return view;\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n    return a;\n  }\n}\n","import { LinkedIdType } from \"../enums/linkedIdType\";\nimport { ItemView } from \"../models/view/itemView\";\n\nexport class LinkedMetadata {\n  constructor(readonly propertyKey: string, private readonly _i18nKey?: string) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { LinkedMetadata } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { View } from \"./view\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { CardLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n}\n","import { CardData } from \"../data/cardData\";\nimport { CardView } from \"../view/cardView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n}\n","import { IdentityLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n}\n","import { LoginLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\nimport { Login } from \"../domain/login\";\n\nimport { ItemView } from \"./itemView\";\nimport { LoginUriView } from \"./loginUriView\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = null;\n  autofillOnPageLoad: boolean = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote } from \"../domain/secureNote\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachmentView\";\nimport { CardView } from \"./cardView\";\nimport { FieldView } from \"./fieldView\";\nimport { IdentityView } from \"./identityView\";\nimport { LoginView } from \"./loginView\";\nimport { PasswordHistoryView } from \"./passwordHistoryView\";\nimport { SecureNoteView } from \"./secureNoteView\";\nimport { View } from \"./view\";\n\nexport class CipherView implements View {\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: any;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Field } from \"../domain/field\";\n\nimport { View } from \"./view\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldData } from \"../data/fieldData\";\nimport { FieldView } from \"../view/fieldView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"]\n    );\n    return f;\n  }\n}\n","import { IdentityData } from \"../data/identityData\";\nimport { IdentityView } from \"../view/identityView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { Utils } from \"../../misc/utils\";\nimport { LoginUri } from \"../domain/loginUri\";\n\nimport { View } from \"./view\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class LoginUriView implements View {\n  match: UriMatchType = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchType.RegularExpression) {\n      const uri = this.launchUri;\n      for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n        if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n          this._canLaunch = true;\n          return this._canLaunch;\n        }\n      }\n    }\n    this._canLaunch = false;\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriData } from \"../data/loginUriData\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  match: UriMatchType;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        match: null,\n      },\n      [\"match\"]\n    );\n    return u;\n  }\n}\n","import { LoginData } from \"../data/loginData\";\nimport { LoginView } from \"../view/loginView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { LoginUri } from \"./loginUri\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      []\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        view.uris.push(uri);\n      }\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    return l;\n  }\n}\n","import { Password } from \"../domain/password\";\n\nimport { View } from \"./view\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n}\n","import { PasswordHistoryData } from \"../data/passwordHistoryData\";\nimport { PasswordHistoryView } from \"../view/passwordHistoryView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteData } from \"../data/secureNoteData\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nimport Domain from \"./domainBase\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secureNote\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Cipher extends Domain {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: any;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(obj?: CipherData, localData: any = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"]\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  async decrypt(encKey?: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    const orgId = this.organizationId;\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(orgId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(orgId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(orgId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n}\n","import { CipherView } from \"../view/cipherView\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL)\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf()\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachmentRequest\";\nimport { PasswordHistoryRequest } from \"./passwordHistoryRequest\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris = null;\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.uris != null) {\n          this.login.uris = cipher.login.uris.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            return uri;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipherWithIdRequest\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport Domain from \"../models/domain/domainBase\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/loginUri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secureNote\";\nimport { SortedCiphersCache } from \"../models/domain/sortedCiphersCache\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipherBulkRestoreRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { AttachmentView } from \"../models/view/attachmentView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { PasswordHistoryView } from \"../models/view/passwordHistoryView\";\nimport { View } from \"../models/view/view\";\n\nconst DomainMatchBlacklist = new Map<string, Set<string>>([\n  [\"google.com\", new Set([\"script.google.com\"])],\n]);\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private settingsService: SettingsService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private searchService: () => SearchService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    await this.stateService.setDecryptedCiphers(value);\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService().clearIndex();\n      } else {\n        this.searchService().indexCiphers();\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher: Cipher = null\n  ): Promise<Cipher> {\n    // Adjust password history\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        const existingCipher = await originalCipher.decrypt();\n        model.passwordHistory = existingCipher.passwordHistory || [];\n        if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n          if (\n            existingCipher.login.password != null &&\n            existingCipher.login.password !== \"\" &&\n            existingCipher.login.password !== model.login.password\n          ) {\n            const ph = new PasswordHistoryView();\n            ph.password = existingCipher.login.password;\n            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n            model.passwordHistory.splice(0, 0, ph);\n          } else {\n            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n          }\n        }\n        if (existingCipher.hasFields) {\n          const existingHiddenFields = existingCipher.fields.filter(\n            (f) =>\n              f.type === FieldType.Hidden &&\n              f.name != null &&\n              f.name !== \"\" &&\n              f.value != null &&\n              f.value !== \"\"\n          );\n          const hiddenFields =\n            model.fields == null\n              ? []\n              : model.fields.filter(\n                  (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\"\n                );\n          existingHiddenFields.forEach((ef) => {\n            const matchedField = hiddenFields.find((f) => f.name === ef.name);\n            if (matchedField == null || matchedField.value !== ef.value) {\n              const ph = new PasswordHistoryView();\n              ph.password = ef.name + \": \" + ef.value;\n              ph.lastUsedDate = new Date();\n              model.passwordHistory.splice(0, 0, ph);\n            }\n          });\n        }\n      }\n      if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n        model.passwordHistory = null;\n      } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n        // only save last 5 history\n        model.passwordHistory = model.passwordHistory.slice(0, 5);\n      }\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n\n    if (key == null && cipher.organizationId != null) {\n      key = await this.cryptoService.getOrgKey(cipher.organizationId);\n      if (key == null) {\n        throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n      }\n    }\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    const userId = await this.stateService.getUserId();\n    if ((await this.getDecryptedCipherCache()) != null) {\n      if (\n        this.searchService != null &&\n        (this.searchService().indexedEntityId ?? userId) !== userId\n      ) {\n        await this.searchService().indexCiphers(userId, await this.getDecryptedCipherCache());\n      }\n      return await this.getDecryptedCipherCache();\n    }\n\n    const decCiphers: CipherView[] = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: any[] = [];\n    const ciphers = await this.getAll();\n    ciphers.forEach(async (cipher) => {\n      promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n    });\n\n    await Promise.all(promises);\n    decCiphers.sort(this.getLocaleSortingFunction());\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchType = null\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const domain = Utils.getDomain(url);\n    const eqDomainsPromise =\n      domain == null\n        ? Promise.resolve([])\n        : this.settingsService.getEquivalentDomains().then((eqDomains: any[][]) => {\n            let matches: any[] = [];\n            eqDomains.forEach((eqDomain) => {\n              if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {\n                matches = matches.concat(eqDomain);\n              }\n            });\n\n            if (!matches.length) {\n              matches.push(domain);\n            }\n\n            return matches;\n          });\n\n    const result = await Promise.all([eqDomainsPromise, this.getAllDecrypted()]);\n    const matchingDomains = result[0];\n    const ciphers = result[1];\n\n    if (defaultMatch == null) {\n      defaultMatch = await this.stateService.getDefaultUriMatch();\n      if (defaultMatch == null) {\n        defaultMatch = UriMatchType.Domain;\n      }\n    }\n\n    return ciphers.filter((cipher) => {\n      if (cipher.deletedDate != null) {\n        return false;\n      }\n      if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {\n        return true;\n      }\n\n      if (url != null && cipher.type === CipherType.Login && cipher.login.uris != null) {\n        for (let i = 0; i < cipher.login.uris.length; i++) {\n          const u = cipher.login.uris[i];\n          if (u.uri == null) {\n            continue;\n          }\n\n          const match = u.match == null ? defaultMatch : u.match;\n          switch (match) {\n            case UriMatchType.Domain:\n              if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {\n                if (DomainMatchBlacklist.has(u.domain)) {\n                  const domainUrlHost = Utils.getHost(url);\n                  if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n              break;\n            case UriMatchType.Host: {\n              const urlHost = Utils.getHost(url);\n              if (urlHost != null && urlHost === Utils.getHost(u.uri)) {\n                return true;\n              }\n              break;\n            }\n            case UriMatchType.Exact:\n              if (url === u.uri) {\n                return true;\n              }\n              break;\n            case UriMatchType.StartsWith:\n              if (url.startsWith(u.uri)) {\n                return true;\n              }\n              break;\n            case UriMatchType.RegularExpression:\n              try {\n                const regex = new RegExp(u.uri, \"i\");\n                if (regex.test(url)) {\n                  return true;\n                }\n              } catch (e) {\n                this.logService.error(e);\n              }\n              break;\n            case UriMatchType.Never:\n            default:\n              break;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const ciphers = await this.apiService.getCiphersOrganization(organizationId);\n    if (ciphers != null && ciphers.data != null && ciphers.data.length) {\n      const decCiphers: CipherView[] = [];\n      const promises: any[] = [];\n      ciphers.data.forEach((r) => {\n        const data = new CipherData(r);\n        const cipher = new Cipher(data);\n        promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n      });\n      await Promise.all(promises);\n      decCiphers.sort(this.getLocaleSortingFunction());\n      return decCiphers;\n    } else {\n      return [];\n    }\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await this.stateService.getNeverDomains();\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.stateService.setNeverDomains(domains);\n  }\n\n  async saveWithServer(cipher: Cipher): Promise<any> {\n    let response: CipherResponse;\n    if (cipher.id == null) {\n      if (cipher.collectionIds != null) {\n        const request = new CipherCreateRequest(cipher);\n        response = await this.apiService.postCipherCreate(request);\n      } else {\n        const request = new CipherRequest(cipher);\n        response = await this.apiService.postCipher(request);\n      }\n      cipher.id = response.id;\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId)\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encrypt(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encrypt(cipher).then((c) => {\n          encCiphers.push(c);\n        })\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin = false\n  ): Promise<Cipher> {\n    const key = await this.cryptoService.getOrgKey(cipher.organizationId);\n    const encFileName = await this.cryptoService.encrypt(filename, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(data, dataEncKey[0]);\n\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.uploadCipherAttachment(\n        admin,\n        uploadDataResponse,\n        encFileName,\n        encData\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          admin,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1]\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteCipher(id);\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.deleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string): Promise<any> {\n    await this.apiService.putDeleteCipher(id);\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.putDeleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putRestoreCipher(id);\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(ids: string[]): Promise<any> {\n    const response = await this.apiService.putRestoreManyCiphers(new CipherBulkRestoreRequest(ids));\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  // Helpers\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" })\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const buf = await attachmentResponse.arrayBuffer();\n    const decBuf = await this.cryptoService.decryptFromBytes(buf, null);\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const encFileName = await this.cryptoService.encrypt(attachmentView.fileName, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key\n            );\n            cipher.login.uris.push(loginUri);\n          }\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.stateService.getAutoFillOnPageLoadDefault();\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false)\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  parent: T;\n  node: T;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, name: string, parent: T) {\n    this.parent = parent;\n    this.node = node;\n    this.node.name = name;\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"../models/domain/treeNode\";\n\nexport class ServiceUtils {\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: ITreeNodeObject,\n    delimiter: string\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end = partIndex === parts.length - 1;\n    const partName = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== parts[partIndex]) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node with the same name.\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i].node,\n        delimiter\n      );\n      return;\n    }\n\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      if (end) {\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter\n      );\n    }\n  }\n\n  static getTreeNodeObject(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    id: string\n  ): TreeNode<ITreeNodeObject> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { CollectionDetailsResponse } from \"../response/collectionResponse\";\n\nexport class CollectionData {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n  }\n}\n","import { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\nimport { CollectionGroupDetailsResponse } from \"../response/collectionResponse\";\n\nimport { View } from \"./view\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n\n  constructor(c?: Collection | CollectionGroupDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n    }\n  }\n}\n","import { CollectionData } from \"../data/collectionData\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\"]\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId\n    );\n  }\n}\n","import { CollectionService as CollectionServiceAbstraction } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCollections(null, { userId: userId });\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    const collections = await this.stateService.getEncryptedCollections();\n    // eslint-disable-next-line\n    if (collections == null || !collections.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Collection(collections[id]);\n  }\n\n  async getAll(): Promise<Collection[]> {\n    const collections = await this.stateService.getEncryptedCollections();\n    const response: Collection[] = [];\n    for (const id in collections) {\n      // eslint-disable-next-line\n      if (collections.hasOwnProperty(id)) {\n        response.push(new Collection(collections[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    let decryptedCollections = await this.stateService.getDecryptedCollections();\n    if (decryptedCollections != null) {\n      return decryptedCollections;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const collections = await this.getAll();\n    decryptedCollections = await this.decryptMany(collections);\n\n    await this.stateService.setDecryptedCollections(decryptedCollections);\n    return decryptedCollections;\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(collection: CollectionData | CollectionData[]): Promise<any> {\n    let collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      collections = {};\n    }\n\n    if (collection instanceof CollectionData) {\n      const c = collection as CollectionData;\n      collections[c.id] = c;\n    } else {\n      (collection as CollectionData[]).forEach((c) => {\n        collections[c.id] = c;\n      });\n    }\n\n    await this.replace(collections);\n  }\n\n  async replace(collections: { [id: string]: CollectionData }): Promise<any> {\n    await this.clearCache();\n    await this.stateService.setEncryptedCollections(collections);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearCache(userId);\n    await this.stateService.setEncryptedCollections(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      delete collections[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete collections[i];\n      });\n    }\n\n    await this.replace(collections);\n  }\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","import * as hrtime from \"browser-hrtime\";\n\nimport { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/logLevelType\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n\n  time(label = \"default\") {\n    if (!this.timersMap.has(label)) {\n      this.timersMap.set(label, hrtime());\n    }\n  }\n\n  timeEnd(label = \"default\"): [number, number] {\n    const elapsed = hrtime(this.timersMap.get(label));\n    this.timersMap.delete(label);\n    this.write(LogLevelType.Info, `${label}: ${elapsed[0] * 1000 + elapsed[1] / 10e6}ms`);\n    return elapsed;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\n\nexport class ContainerService {\n  constructor(private cryptoService: CryptoService) {}\n\n  // deprecated, use attachToGlobal instead\n  attachToWindow(win: any) {\n    this.attachToGlobal(win);\n  }\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  getCryptoService(): CryptoService {\n    return this.cryptoService;\n  }\n}\n","import { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptedObject {\n  iv: ArrayBuffer;\n  data: ArrayBuffer;\n  mac: ArrayBuffer;\n  key: SymmetricCryptoKey;\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { EncryptedObject } from \"@bitwarden/common/models/domain/encryptedObject\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\n\nexport class EncryptService implements AbstractEncryptService {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n    private logMacFailures: boolean\n  ) {}\n\n  async encrypt(plainValue: string | ArrayBuffer, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"no encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: ArrayBuffer;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue).buffer;\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async decryptToUtf8(encString: EncString, key: SymmetricCryptoKey): Promise<string> {\n    if (key?.macKey != null && encString?.mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\"\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return this.cryptoFunctionService.aesDecryptFast(fastParams);\n  }\n\n  private async aesEncrypt(data: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport {\n  EnvironmentService as EnvironmentServiceAbstraction,\n  Urls,\n} from \"../abstractions/environment.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\n\nexport class EnvironmentService implements EnvironmentServiceAbstraction {\n  private readonly urlsSubject = new Subject<Urls>();\n  urls: Observable<Urls> = this.urlsSubject;\n\n  private baseUrl: string;\n  private webVaultUrl: string;\n  private apiUrl: string;\n  private identityUrl: string;\n  private iconsUrl: string;\n  private notificationsUrl: string;\n  private eventsUrl: string;\n  private keyConnectorUrl: string;\n  private scimUrl: string = null;\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccount.subscribe(async () => {\n      await this.setUrlsFromStorage();\n    });\n  }\n\n  hasBaseUrl() {\n    return this.baseUrl != null;\n  }\n\n  getNotificationsUrl() {\n    if (this.notificationsUrl != null) {\n      return this.notificationsUrl;\n    }\n\n    if (this.baseUrl != null) {\n      return this.baseUrl + \"/notifications\";\n    }\n\n    return \"https://notifications.bitwarden.com\";\n  }\n\n  getWebVaultUrl() {\n    if (this.webVaultUrl != null) {\n      return this.webVaultUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl;\n    }\n    return \"https://vault.bitwarden.com\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  getIconsUrl() {\n    if (this.iconsUrl != null) {\n      return this.iconsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/icons\";\n    }\n\n    return \"https://icons.bitwarden.net\";\n  }\n\n  getApiUrl() {\n    if (this.apiUrl != null) {\n      return this.apiUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/api\";\n    }\n\n    return \"https://api.bitwarden.com\";\n  }\n\n  getIdentityUrl() {\n    if (this.identityUrl != null) {\n      return this.identityUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/identity\";\n    }\n\n    return \"https://identity.bitwarden.com\";\n  }\n\n  getEventsUrl() {\n    if (this.eventsUrl != null) {\n      return this.eventsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/events\";\n    }\n\n    return \"https://events.bitwarden.com\";\n  }\n\n  getKeyConnectorUrl() {\n    return this.keyConnectorUrl;\n  }\n\n  getScimUrl() {\n    if (this.scimUrl != null) {\n      return this.scimUrl + \"/v2\";\n    }\n\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://scim.bitwarden.com/v2\"\n      : this.getWebVaultUrl() + \"/scim/v2\";\n  }\n\n  async setUrlsFromStorage(): Promise<void> {\n    const urls: any = await this.stateService.getEnvironmentUrls();\n    const envUrls = new EnvironmentUrls();\n\n    this.baseUrl = envUrls.base = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = envUrls.api = urls.api;\n    this.identityUrl = envUrls.identity = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = envUrls.events = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    // scimUrl is not saved to storage\n  }\n\n  async setUrls(urls: Urls): Promise<Urls> {\n    urls.base = this.formatUrl(urls.base);\n    urls.webVault = this.formatUrl(urls.webVault);\n    urls.api = this.formatUrl(urls.api);\n    urls.identity = this.formatUrl(urls.identity);\n    urls.icons = this.formatUrl(urls.icons);\n    urls.notifications = this.formatUrl(urls.notifications);\n    urls.events = this.formatUrl(urls.events);\n    urls.keyConnector = this.formatUrl(urls.keyConnector);\n\n    // scimUrl cannot be cleared\n    urls.scim = this.formatUrl(urls.scim) ?? this.scimUrl;\n\n    await this.stateService.setEnvironmentUrls({\n      base: urls.base,\n      api: urls.api,\n      identity: urls.identity,\n      webVault: urls.webVault,\n      icons: urls.icons,\n      notifications: urls.notifications,\n      events: urls.events,\n      keyConnector: urls.keyConnector,\n      // scimUrl is not saved to storage\n    });\n\n    this.baseUrl = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = urls.api;\n    this.identityUrl = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    this.scimUrl = urls.scim;\n\n    this.urlsSubject.next(urls);\n\n    return urls;\n  }\n\n  getUrls() {\n    return {\n      base: this.baseUrl,\n      webVault: this.webVaultUrl,\n      api: this.apiUrl,\n      identity: this.identityUrl,\n      icons: this.iconsUrl,\n      notifications: this.notificationsUrl,\n      events: this.eventsUrl,\n      keyConnector: this.keyConnectorUrl,\n      scim: this.scimUrl,\n    };\n  }\n\n  private formatUrl(url: string): string {\n    if (url == null || url === \"\") {\n      return null;\n    }\n\n    url = url.replace(/\\/+$/g, \"\");\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n      url = \"https://\" + url;\n    }\n\n    return url.trim();\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { EventService as EventServiceAbstraction } from \"../abstractions/event.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EventType } from \"../enums/eventType\";\nimport { EventData } from \"../models/data/eventData\";\nimport { EventRequest } from \"../models/request/eventRequest\";\n\nexport class EventService implements EventServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private apiService: ApiService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private logService: LogService,\n    private organizationService: OrganizationService\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false\n  ): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated();\n    if (!authed) {\n      return;\n    }\n    const organizations = await this.organizationService.getAll();\n    if (organizations == null) {\n      return;\n    }\n    const orgIds = new Set<string>(organizations.filter((o) => o.useEvents).map((o) => o.id));\n    if (orgIds.size === 0) {\n      return;\n    }\n    if (cipherId != null) {\n      const cipher = await this.cipherService.get(cipherId);\n      if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {\n        return;\n      }\n    }\n    let eventCollection = await this.stateService.getEventCollection();\n    if (eventCollection == null) {\n      eventCollection = [];\n    }\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    eventCollection.push(event);\n    await this.stateService.setEventCollection(eventCollection);\n    if (uploadImmediately) {\n      await this.uploadEvents();\n    }\n  }\n\n  async uploadEvents(userId?: string): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n    const eventCollection = await this.stateService.getEventCollection({ userId: userId });\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n      this.clearEvents(userId);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async clearEvents(userId?: string): Promise<any> {\n    await this.stateService.setEventCollection(null, { userId: userId });\n  }\n}\n","export enum KdfType {\n  PBKDF2_SHA256 = 0,\n}\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const DEFAULT_KDF_ITERATIONS = 100000;\nexport const SEND_KDF_ITERATIONS = 100000;\n","import { Card as CardDomain } from \"../domain/card\";\nimport { EncString } from \"../domain/encString\";\nimport { CardView } from \"../view/cardView\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { EncString } from \"../domain/encString\";\nimport { Field as FieldDomain } from \"../domain/field\";\nimport { FieldView } from \"../view/fieldView\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Identity as IdentityDomain } from \"../domain/identity\";\nimport { IdentityView } from \"../view/identityView\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { EncString } from \"../domain/encString\";\nimport { LoginUri as LoginUriDomain } from \"../domain/loginUri\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Login as LoginDomain } from \"../domain/login\";\nimport { LoginView } from \"../view/loginView\";\n\nimport { LoginUriExport } from \"./loginUriExport\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n  OrganizationUser_Deactivated = 1511,\n  OrganizationUser_Activated = 1512,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  // Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote as SecureNoteDomain } from \"../domain/secureNote\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { EncString } from \"../domain/encString\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CardExport } from \"./cardExport\";\nimport { FieldExport } from \"./fieldExport\";\nimport { IdentityExport } from \"./identityExport\";\nimport { LoginExport } from \"./loginExport\";\nimport { SecureNoteExport } from \"./secureNoteExport\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n  }\n}\n","import { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CipherExport } from \"./cipherExport\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { EncString } from \"../domain/encString\";\nimport { CollectionView } from \"../view/collectionView\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport { CollectionExport } from \"./collectionExport\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\nimport { EventView } from \"../view/eventView\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n","import { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\n\nimport { View } from \"./view\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n}\n","import { FolderData } from \"../data/folderData\";\nimport { FolderView } from \"../view/folderView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"]\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null\n    );\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nimport { FolderExport } from \"./folderExport\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","import * as papa from \"papaparse\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport {\n  ExportFormat,\n  ExportService as ExportServiceAbstraction,\n} from \"../abstractions/export.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { DEFAULT_KDF_ITERATIONS, KdfType } from \"../enums/kdfType\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Collection } from \"../models/domain/collection\";\nimport { Folder } from \"../models/domain/folder\";\nimport { CipherWithIdExport as CipherExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport as CollectionExport } from \"../models/export/collectionWithIdExport\";\nimport { EventExport } from \"../models/export/eventExport\";\nimport { FolderWithIdExport as FolderExport } from \"../models/export/folderWithIdExport\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { EventView } from \"../models/view/eventView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport class ExportService implements ExportServiceAbstraction {\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", organizationId?: string): Promise<string> {\n    if (organizationId) {\n      return await this.getOrganizationExport(organizationId, format);\n    }\n\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    } else {\n      return this.getDecryptedExport(format);\n    }\n  }\n\n  async getPasswordProtectedExport(password: string, organizationId?: string): Promise<string> {\n    const clearText = organizationId\n      ? await this.getOrganizationExport(organizationId, \"json\")\n      : await this.getExport(\"json\");\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const kdfIterations = DEFAULT_KDF_ITERATIONS;\n    const key = await this.cryptoService.makePinKey(\n      password,\n      salt,\n      KdfType.PBKDF2_SHA256,\n      kdfIterations\n    );\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfIterations: kdfIterations,\n      kdfType: KdfType.PBKDF2_SHA256,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\"\n  ): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getOrganizationEncryptedExport(organizationId);\n    } else {\n      return this.getOrganizationDecryptedExport(organizationId, format);\n    }\n  }\n\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      firstValueFrom(this.folderService.folderViews$).then((folders) => {\n        decFolders = folders;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const foldersMap = new Map<string, FolderView>();\n      decFolders.forEach((f) => {\n        if (f.id != null) {\n          foldersMap.set(f.id, f);\n        }\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n        if (c.organizationId != null) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.folder =\n          c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n        cipher.favorite = c.favorite ? 1 : null;\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        folders: [],\n        items: [],\n      };\n\n      decFolders.forEach((f) => {\n        if (f.id == null) {\n          return;\n        }\n        const folder = new FolderExport();\n        folder.build(f);\n        jsonDoc.folders.push(folder);\n      });\n\n      decCiphers.forEach((c) => {\n        if (c.organizationId != null) {\n          return;\n        }\n        const cipher = new CipherExport();\n        cipher.build(c);\n        cipher.collectionIds = null;\n        jsonDoc.items.push(cipher);\n      });\n\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      firstValueFrom(this.folderService.folders$).then((f) => {\n        folders = f;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\"\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((collections) => {\n        const collectionPromises: any = [];\n        if (collections != null && collections.data != null && collections.data.length > 0) {\n          collections.data.forEach((c) => {\n            const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n            collectionPromises.push(\n              collection.decrypt().then((decCol) => {\n                decCollections.push(decCol);\n              })\n            );\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((ciphers) => {\n        const cipherPromises: any = [];\n        if (ciphers != null && ciphers.data != null && ciphers.data.length > 0) {\n          ciphers.data\n            .filter((c) => c.deletedDate === null)\n            .forEach((c) => {\n              const cipher = new Cipher(new CipherData(c));\n              cipherPromises.push(\n                cipher.decrypt().then((decCipher) => {\n                  decCiphers.push(decCipher);\n                })\n              );\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const collectionsMap = new Map<string, CollectionView>();\n      decCollections.forEach((c) => {\n        collectionsMap.set(c.id, c);\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.collections = [];\n        if (c.collectionIds != null) {\n          cipher.collections = c.collectionIds\n            .filter((id) => collectionsMap.has(id))\n            .map((id) => collectionsMap.get(id).name);\n        }\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        collections: [],\n        items: [],\n      };\n\n      decCollections.forEach((c) => {\n        const collection = new CollectionExport();\n        collection.build(c);\n        jsonDoc.collections.push(collection);\n      });\n\n      decCiphers.forEach((c) => {\n        const cipher = new CipherExport();\n        cipher.build(c);\n        jsonDoc.items.push(cipher);\n      });\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        const collectionPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        const cipherPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n\n  private buildCommonCipher(cipher: any, c: CipherView) {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f: any) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import { LogService } from \"../abstractions/log.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n      ? a.month - b.month\n      : a.day !== b.day\n      ? a.day - b.day\n      : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class BitwardenFileUploadService {\n  constructor(private apiService: ApiService) {}\n\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"../abstractions/fileUpload.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { FileUploadType } from \"../enums/fileUploadType\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\n\nimport { AzureFileUploadService } from \"./azureFileUpload.service\";\nimport { BitwardenFileUploadService } from \"./bitwardenFileUpload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(private logService: LogService, private apiService: ApiService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService(apiService);\n  }\n\n  async uploadSendFile(\n    uploadData: SendFileUploadDataResponse,\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) =>\n              this.apiService.postSendFile(\n                uploadData.sendResponse.id,\n                uploadData.sendResponse.file.id,\n                fd\n              )\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewSendFileUploadUrl(\n              uploadData.sendResponse.id,\n              uploadData.sendResponse.file.id\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await this.apiService.deleteSend(uploadData.sendResponse.id);\n      throw e;\n    }\n  }\n\n  async uploadCipherAttachment(\n    admin: boolean,\n    uploadData: AttachmentUploadDataResponse,\n    encryptedFileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    const response = admin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            encryptedFileName.encryptedString,\n            encryptedFileData,\n            (fd) => this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, fd)\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewAttachmentUploadUrl(\n              response.id,\n              uploadData.attachmentId\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type.\");\n      }\n    } catch (e) {\n      if (admin) {\n        await this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        await this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n      throw e;\n    }\n  }\n}\n","import { FolderResponse } from \"../response/folderResponse\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: FolderResponse) {\n    this.name = response.name;\n    this.id = response.id;\n    this.revisionDate = response.revisionDate;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"@bitwarden/common/models/data/folderData\";\nimport { Folder } from \"@bitwarden/common/models/domain/folder\";\nimport { FolderRequest } from \"@bitwarden/common/models/request/folderRequest\";\nimport { FolderResponse } from \"@bitwarden/common/models/response/folderResponse\";\n\nexport class FolderApiService implements FolderApiServiceAbstraction {\n  constructor(private folderService: InternalFolderService, private apiService: ApiService) {}\n\n  async save(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.folderService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteFolder(id);\n    await this.folderService.delete(id);\n  }\n\n  async get(id: string): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  private async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  private deleteFolder(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { I18nService } from \"../../abstractions/i18n.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { CipherData } from \"../../models/data/cipherData\";\nimport { FolderData } from \"../../models/data/folderData\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { FolderView } from \"../../models/view/folderView\";\n\nexport class FolderService implements InternalFolderServiceAbstraction {\n  private _folders: BehaviorSubject<Folder[]> = new BehaviorSubject([]);\n  private _folderViews: BehaviorSubject<FolderView[]> = new BehaviorSubject([]);\n\n  folders$ = this._folders.asObservable();\n  folderViews$ = this._folderViews.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService\n  ) {\n    this.stateService.activeAccountUnlocked.subscribe(async (unlocked) => {\n      if ((Utils.global as any).bitwardenContainerService == null) {\n        return;\n      }\n\n      if (!unlocked) {\n        this._folders.next([]);\n        this._folderViews.next([]);\n        return;\n      }\n\n      const data = await this.stateService.getEncryptedFolders();\n\n      await this.updateObservables(data);\n    });\n  }\n\n  async clearCache(): Promise<void> {\n    this._folderViews.next([]);\n  }\n\n  // TODO: This should be moved to EncryptService or something\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = this._folders.getValue();\n\n    return folders.find((folder) => folder.id === id);\n  }\n\n  /**\n   * @deprecated Only use in CLI!\n   */\n  async getAllDecryptedFromState(): Promise<FolderView[]> {\n    const data = await this.stateService.getEncryptedFolders();\n    const folders = Object.values(data || {}).map((f) => new Folder(f));\n\n    return this.decryptFolders(folders);\n  }\n\n  async upsert(folder: FolderData | FolderData[]): Promise<void> {\n    let folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      folders = {};\n    }\n\n    if (folder instanceof FolderData) {\n      const f = folder as FolderData;\n      folders[f.id] = f;\n    } else {\n      (folder as FolderData[]).forEach((f) => {\n        folders[f.id] = f;\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<void> {\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._folders.next([]);\n      this._folderViews.next([]);\n    }\n    await this.stateService.setEncryptedFolders(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (folders[id] == null) {\n        return;\n      }\n      delete folders[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete folders[i];\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  private async updateObservables(foldersMap: { [id: string]: FolderData }) {\n    const folders = Object.values(foldersMap || {}).map((f) => new Folder(f));\n\n    this._folders.next(folders);\n\n    if (await this.cryptoService.hasKey()) {\n      this._folderViews.next(await this.decryptFolders(folders));\n    }\n  }\n\n  private async decryptFolders(folders: Folder[]) {\n    const decryptFolderPromises = folders.map((f) => f.decrypt());\n    const decryptedFolders = await Promise.all(decryptFolderPromises);\n\n    decryptedFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decryptedFolders.push(noneFolder);\n\n    return decryptedFolders;\n  }\n}\n","import { KdfType } from \"../../../enums/kdfType\";\nimport { KeysRequest } from \"../keysRequest\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    orgIdentifier: string,\n    keys: KeysRequest\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfIterations;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private logoutCallback: (expired: boolean, userId?: string) => void\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const key = await this.cryptoService.getKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(key.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  async getAndSetKey(url: string) {\n    try {\n      const userKeyResponse = await this.apiService.getUserKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(userKeyResponse.key);\n      const k = new SymmetricCryptoKey(keyArr);\n      await this.cryptoService.setKey(k);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    const { kdf, kdfIterations, keyConnectorUrl } = tokenResponse;\n    const password = await this.cryptoFunctionService.randomBytes(64);\n\n    const k = await this.cryptoService.makeKey(\n      Utils.fromBufferToB64(password),\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfIterations\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(k.encKeyB64);\n    await this.cryptoService.setKey(k);\n\n    const encKey = await this.cryptoService.makeEncKey(k);\n    await this.cryptoService.setEncKey(encKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      encKey[1].encryptedString,\n      kdf,\n      kdfIterations,\n      orgId,\n      keys\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\n\nexport class MemoryStorageService implements AbstractStorageService {\n  private store = new Map<string, any>();\n\n  get<T>(key: string): Promise<T> {\n    if (this.store.has(key)) {\n      const obj = this.store.get(key);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return this.get(key) != null;\n  }\n\n  save(key: string, obj: any): Promise<any> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    this.store.set(key, obj);\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<any> {\n    this.store.delete(key);\n    return Promise.resolve();\n  }\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n}\n","import { NotificationType } from \"../../enums/notificationType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Deactivated = -1,\n}\n","export enum Permissions {\n  AccessEventLogs,\n  AccessImportExport,\n  AccessReports,\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  ManageAllCollections,\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  ManageAssignedCollections,\n  ManageGroups,\n  ManageOrganization,\n  ManagePolicies,\n  ManageProvider,\n  ManageUsers,\n  ManageUsersPassword,\n  CreateNewCollections,\n  EditAnyCollection,\n  DeleteAnyCollection,\n  EditAssignedCollections,\n  DeleteAssignedCollections,\n  ManageSso,\n  ManageBilling,\n  ManageScim,\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService } from \"../abstractions/auth.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService } from \"../abstractions/sync.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { NotificationType } from \"../enums/notificationType\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private logService: LogService,\n    private stateService: StateService,\n    private authService: AuthService\n  ) {\n    this.environmentService.urls.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = this.environmentService.getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data))\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { Permissions } from \"../../enums/permissions\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { OrganizationData } from \"../data/organizationData\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useScim = obj.useScim;\n    this.useResetPassword = obj.useResetPassword;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.isProviderUser = obj.isProviderUser;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n  }\n\n  get canAccess() {\n    if (this.type === OrganizationUserType.Owner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  get isManager() {\n    return (\n      this.type === OrganizationUserType.Manager ||\n      this.type === OrganizationUserType.Owner ||\n      this.type === OrganizationUserType.Admin\n    );\n  }\n\n  get isAdmin() {\n    return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;\n  }\n\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return this.isAdmin || this.permissions.accessEventLogs;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.createNewCollections ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canEditAnyCollection() {\n    return (\n      this.isAdmin || (this.permissions.editAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canDeleteAnyCollection() {\n    return (\n      this.isAdmin ||\n      (this.permissions.deleteAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canViewAllCollections() {\n    return this.canCreateNewCollections || this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  get canEditAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.editAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canDeleteAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.deleteAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return this.isAdmin || this.permissions.manageGroups;\n  }\n\n  get canManageSso() {\n    return this.isAdmin || this.permissions.manageSso;\n  }\n\n  get canManageScim() {\n    return this.isAdmin || this.permissions.manageScim;\n  }\n\n  get canManagePolicies() {\n    return this.isAdmin || this.permissions.managePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  hasAnyPermission(permissions: Permissions[]) {\n    const specifiedPermissions =\n      (permissions.includes(Permissions.AccessEventLogs) && this.canAccessEventLogs) ||\n      (permissions.includes(Permissions.AccessImportExport) && this.canAccessImportExport) ||\n      (permissions.includes(Permissions.AccessReports) && this.canAccessReports) ||\n      (permissions.includes(Permissions.CreateNewCollections) && this.canCreateNewCollections) ||\n      (permissions.includes(Permissions.EditAnyCollection) && this.canEditAnyCollection) ||\n      (permissions.includes(Permissions.DeleteAnyCollection) && this.canDeleteAnyCollection) ||\n      (permissions.includes(Permissions.EditAssignedCollections) &&\n        this.canEditAssignedCollections) ||\n      (permissions.includes(Permissions.DeleteAssignedCollections) &&\n        this.canDeleteAssignedCollections) ||\n      (permissions.includes(Permissions.ManageGroups) && this.canManageGroups) ||\n      (permissions.includes(Permissions.ManageOrganization) && this.isOwner) ||\n      (permissions.includes(Permissions.ManagePolicies) && this.canManagePolicies) ||\n      (permissions.includes(Permissions.ManageUsers) && this.canManageUsers) ||\n      (permissions.includes(Permissions.ManageUsersPassword) && this.canManageUsersPassword) ||\n      (permissions.includes(Permissions.ManageSso) && this.canManageSso) ||\n      (permissions.includes(Permissions.ManageScim) && this.canManageScim) ||\n      (permissions.includes(Permissions.ManageBilling) && this.canManageBilling);\n\n    return specifiedPermissions && (this.enabled || this.isOwner);\n  }\n\n  get canManageBilling() {\n    return this.isOwner && (this.isProviderUser || !this.hasProvider);\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n}\n","import { OrganizationService as OrganizationServiceAbstraction } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport class OrganizationService implements OrganizationServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Organization> {\n    const organizations = await this.stateService.getOrganizations();\n    // eslint-disable-next-line\n    if (organizations == null || !organizations.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Organization(organizations[id]);\n  }\n\n  async getByIdentifier(identifier: string): Promise<Organization> {\n    const organizations = await this.getAll();\n    if (organizations == null || organizations.length === 0) {\n      return null;\n    }\n\n    return organizations.find((o) => o.identifier === identifier);\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    const organizations = await this.stateService.getOrganizations({ userId: userId });\n    const response: Organization[] = [];\n    for (const id in organizations) {\n      // eslint-disable-next-line\n      if (organizations.hasOwnProperty(id) && !organizations[id].isProviderUser) {\n        response.push(new Organization(organizations[id]));\n      }\n    }\n    const sortedResponse = response.sort((a, b) => a.name.localeCompare(b.name));\n    return sortedResponse;\n  }\n\n  async save(organizations: { [id: string]: OrganizationData }) {\n    return await this.stateService.setOrganizations(organizations);\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    const orgs = await this.getAll();\n    return orgs.some(\n      (o) => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null\n    );\n  }\n\n  async hasOrganizations(userId?: string): Promise<boolean> {\n    const organizations = await this.getAll(userId);\n    return organizations.length > 0;\n  }\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EEFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  defaultType = \"\";\n  minLength = 0;\n  useUppercase = false;\n  useLowercase = false;\n  useNumbers = false;\n  numberCount = 0;\n  useSpecial = false;\n  specialCount = 0;\n  minNumberWords = 0;\n  capitalize = false;\n  includeNumber = false;\n\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"../abstractions/passwordGeneration.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncString } from \"../models/domain/encString\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { PasswordGeneratorPolicyOptions } from \"../models/domain/passwordGeneratorPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\n\nconst DefaultOptions = {\n  length: 14,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 1,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async generatePassword(options: any): Promise<string> {\n    // overload defaults with given options\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.type === \"passphrase\") {\n      return this.generatePassphrase(options);\n    }\n\n    // sanitize\n    this.sanitizePasswordLength(o, true);\n\n    const minLength: number = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;\n    if (o.length < minLength) {\n      o.length = minLength;\n    }\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {\n      o.wordSeparator = \" \";\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EEFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EEFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: any\n  ): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let enforcedPolicyOptions = await this.getPasswordGeneratorPolicyOptions();\n    if (enforcedPolicyOptions != null) {\n      if (options.length < enforcedPolicyOptions.minLength) {\n        options.length = enforcedPolicyOptions.minLength;\n      }\n\n      if (enforcedPolicyOptions.useUppercase) {\n        options.uppercase = true;\n      }\n\n      if (enforcedPolicyOptions.useLowercase) {\n        options.lowercase = true;\n      }\n\n      if (enforcedPolicyOptions.useNumbers) {\n        options.number = true;\n      }\n\n      if (options.minNumber < enforcedPolicyOptions.numberCount) {\n        options.minNumber = enforcedPolicyOptions.numberCount;\n      }\n\n      if (enforcedPolicyOptions.useSpecial) {\n        options.special = true;\n      }\n\n      if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n        options.minSpecial = enforcedPolicyOptions.specialCount;\n      }\n\n      // Must normalize these fields because the receiving call expects all options to pass the current rules\n      if (options.minSpecial + options.minNumber > options.length) {\n        options.minSpecial = options.length - options.minNumber;\n      }\n\n      if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n        options.numWords = enforcedPolicyOptions.minNumberWords;\n      }\n\n      if (enforcedPolicyOptions.capitalize) {\n        options.capitalize = true;\n      }\n\n      if (enforcedPolicyOptions.includeNumber) {\n        options.includeNumber = true;\n      }\n\n      // Force default type if password/passphrase selected via policy\n      if (\n        enforcedPolicyOptions.defaultType === \"password\" ||\n        enforcedPolicyOptions.defaultType === \"passphrase\"\n      ) {\n        options.type = enforcedPolicyOptions.defaultType;\n      }\n    } else {\n      // UI layer expects an instantiated object to prevent more explicit null checks\n      enforcedPolicyOptions = new PasswordGeneratorPolicyOptions();\n    }\n    return [options, enforcedPolicyOptions];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies: Policy[] =\n      this.policyService == null\n        ? null\n        : await this.policyService.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<any> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    await this.stateService.setDecryptedPasswordGenerationHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  passwordStrength(password: string, userInputs: string[] = null): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    let globalUserInputs = [\"bitwarden\", \"bit\", \"warden\"];\n    if (userInputs != null && userInputs.length > 0) {\n      globalUserInputs = globalUserInputs.concat(userInputs);\n    }\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  normalizeOptions(options: any, enforcedPolicyOptions: PasswordGeneratorPolicyOptions) {\n    options.minLowercase = 0;\n    options.minUppercase = 0;\n\n    if (!options.length || options.length < 5) {\n      options.length = 5;\n    } else if (options.length > 128) {\n      options.length = 128;\n    }\n\n    if (options.length < enforcedPolicyOptions.minLength) {\n      options.length = enforcedPolicyOptions.minLength;\n    }\n\n    if (!options.minNumber) {\n      options.minNumber = 0;\n    } else if (options.minNumber > options.length) {\n      options.minNumber = options.length;\n    } else if (options.minNumber > 9) {\n      options.minNumber = 9;\n    }\n\n    if (options.minNumber < enforcedPolicyOptions.numberCount) {\n      options.minNumber = enforcedPolicyOptions.numberCount;\n    }\n\n    if (!options.minSpecial) {\n      options.minSpecial = 0;\n    } else if (options.minSpecial > options.length) {\n      options.minSpecial = options.length;\n    } else if (options.minSpecial > 9) {\n      options.minSpecial = 9;\n    }\n\n    if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n      options.minSpecial = enforcedPolicyOptions.specialCount;\n    }\n\n    if (options.minSpecial + options.minNumber > options.length) {\n      options.minSpecial = options.length - options.minNumber;\n    }\n\n    if (options.numWords == null || options.length < 3) {\n      options.numWords = 3;\n    } else if (options.numWords > 20) {\n      options.numWords = 20;\n    }\n\n    if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n      options.numWords = enforcedPolicyOptions.minNumberWords;\n    }\n\n    if (options.wordSeparator != null && options.wordSeparator.length > 1) {\n      options.wordSeparator = options.wordSeparator[0];\n    }\n\n    this.sanitizePasswordLength(options, false);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  private sanitizePasswordLength(options: any, forGeneration: boolean) {\n    let minUppercaseCalc = 0;\n    let minLowercaseCalc = 0;\n    let minNumberCalc: number = options.minNumber;\n    let minSpecialCalc: number = options.minSpecial;\n\n    if (options.uppercase && options.minUppercase <= 0) {\n      minUppercaseCalc = 1;\n    } else if (!options.uppercase) {\n      minUppercaseCalc = 0;\n    }\n\n    if (options.lowercase && options.minLowercase <= 0) {\n      minLowercaseCalc = 1;\n    } else if (!options.lowercase) {\n      minLowercaseCalc = 0;\n    }\n\n    if (options.number && options.minNumber <= 0) {\n      minNumberCalc = 1;\n    } else if (!options.number) {\n      minNumberCalc = 0;\n    }\n\n    if (options.special && options.minSpecial <= 0) {\n      minSpecialCalc = 1;\n    } else if (!options.special) {\n      minSpecialCalc = 0;\n    }\n\n    // This should never happen but is a final safety net\n    if (!options.length || options.length < 1) {\n      options.length = 10;\n    }\n\n    const minLength: number = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;\n    // Normalize and Generation both require this modification\n    if (options.length < minLength) {\n      options.length = minLength;\n    }\n\n    // Apply other changes if the options object passed in is for generation\n    if (forGeneration) {\n      options.minUppercase = minUppercaseCalc;\n      options.minLowercase = minLowercaseCalc;\n      options.minNumber = minNumberCalc;\n      options.minSpecial = minSpecialCalc;\n    }\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyResponse } from \"../response/policyResponse\";\n\nexport class PolicyData {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: PolicyResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../data/policyData\";\n\nimport Domain from \"./domainBase\";\n\nexport class Policy extends Domain {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Deactivated = -1, // Not used, compile-time support only\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { PolicyService as PolicyServiceAbstraction } from \"../abstractions/policy.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationUserStatusType } from \"../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../models/domain/masterPasswordPolicyOptions\";\nimport { Organization } from \"../models/domain/organization\";\nimport { Policy } from \"../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\n\nexport class PolicyService implements PolicyServiceAbstraction {\n  policyCache: Policy[];\n\n  constructor(\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private apiService: ApiService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedPolicies(null);\n  }\n\n  async getAll(type?: PolicyType, userId?: string): Promise<Policy[]> {\n    let response: Policy[] = [];\n    const decryptedPolicies = await this.stateService.getDecryptedPolicies({ userId: userId });\n    if (decryptedPolicies != null) {\n      response = decryptedPolicies;\n    } else {\n      const diskPolicies = await this.stateService.getEncryptedPolicies({ userId: userId });\n      for (const id in diskPolicies) {\n        // eslint-disable-next-line\n        if (diskPolicies.hasOwnProperty(id)) {\n          response.push(new Policy(diskPolicies[id]));\n        }\n      }\n      await this.stateService.setDecryptedPolicies(response, { userId: userId });\n    }\n    if (type != null) {\n      return response.filter((policy) => policy.type === type);\n    } else {\n      return response;\n    }\n  }\n\n  async getPolicyForOrganization(policyType: PolicyType, organizationId: string): Promise<Policy> {\n    const org = await this.organizationService.get(organizationId);\n    if (org?.isProviderUser) {\n      const orgPolicies = await this.apiService.getPolicies(organizationId);\n      const policy = orgPolicies.data.find((p) => p.organizationId === organizationId);\n\n      if (policy == null) {\n        return null;\n      }\n\n      return new Policy(new PolicyData(policy));\n    }\n\n    const policies = await this.getAll(policyType);\n    return policies.find((p) => p.organizationId === organizationId);\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null, { userId: userId });\n    await this.stateService.setEncryptedPolicies(null, { userId: userId });\n  }\n\n  async getMasterPasswordPoliciesForInvitedUsers(\n    orgId: string\n  ): Promise<MasterPasswordPolicyOptions> {\n    const userId = await this.stateService.getUserId();\n    const response = await this.apiService.getPoliciesByInvitedUser(orgId, userId);\n    const policies = await this.mapPoliciesFromToken(response);\n    return this.getMasterPasswordPolicyOptions(policies);\n  }\n\n  async getMasterPasswordPolicyOptions(policies?: Policy[]): Promise<MasterPasswordPolicyOptions> {\n    let enforcedOptions: MasterPasswordPolicyOptions = null;\n\n    if (policies == null) {\n      policies = await this.getAll(PolicyType.MasterPassword);\n    } else {\n      policies = policies.filter((p) => p.type === PolicyType.MasterPassword);\n    }\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new MasterPasswordPolicyOptions();\n      }\n\n      if (\n        currentPolicy.data.minComplexity != null &&\n        currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n      ) {\n        enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.requireUpper) {\n        enforcedOptions.requireUpper = true;\n      }\n\n      if (currentPolicy.data.requireLower) {\n        enforcedOptions.requireLower = true;\n      }\n\n      if (currentPolicy.data.requireNumbers) {\n        enforcedOptions.requireNumbers = true;\n      }\n\n      if (currentPolicy.data.requireSpecial) {\n        enforcedOptions.requireSpecial = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  mapPoliciesFromToken(policiesResponse: ListResponse<PolicyResponse>): Policy[] {\n    if (policiesResponse == null || policiesResponse.data == null) {\n      return null;\n    }\n\n    const policiesData = policiesResponse.data.map((p) => new PolicyData(p));\n    return policiesData.map((p) => new Policy(p));\n  }\n\n  async policyAppliesToUser(\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const policies = await this.getAll(policyType, userId);\n    const organizations = await this.organizationService.getAll(userId);\n    let filteredPolicies;\n\n    if (policyFilter != null) {\n      filteredPolicies = policies.filter((p) => p.enabled && policyFilter(p));\n    } else {\n      filteredPolicies = policies.filter((p) => p.enabled);\n    }\n\n    const policySet = new Set(filteredPolicies.map((p) => p.organizationId));\n\n    return organizations.some(\n      (o) =>\n        o.enabled &&\n        o.status >= OrganizationUserStatusType.Accepted &&\n        o.usePolicies &&\n        !this.isExcemptFromPolicies(o, policyType) &&\n        policySet.has(o.id)\n    );\n  }\n\n  private isExcemptFromPolicies(organization: Organization, policyType: PolicyType) {\n    if (policyType === PolicyType.MaximumVaultTimeout) {\n      return organization.type === OrganizationUserType.Owner;\n    }\n\n    return organization.isExemptFromPolicies;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProviderData } from \"../data/providerData\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Provider> {\n    const providers = await this.stateService.getProviders();\n    // eslint-disable-next-line\n    if (providers == null || !providers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Provider(providers[id]);\n  }\n\n  async getAll(): Promise<Provider[]> {\n    const providers = await this.stateService.getProviders();\n    const response: Provider[] = [];\n    for (const id in providers) {\n      // eslint-disable-next-line\n      if (providers.hasOwnProperty(id)) {\n        response.push(new Provider(providers[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(providers: { [id: string]: ProviderData }) {\n    await this.stateService.setProviders(providers);\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as lunr from \"lunr\";\n\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private readonly immediateSearchLocales: string[] = [\"zh-CN\", \"zh-TW\", \"ja\", \"ko\", \"vi\"];\n  private readonly defaultSearchableMinLength: number = 2;\n  private searchableMinLength: number = this.defaultSearchableMinLength;\n\n  constructor(\n    private cipherService: CipherService,\n    private logService: LogService,\n    private i18nService: I18nService\n  ) {\n    this.i18nService.locale$.subscribe((locale) => {\n      if (this.immediateSearchLocales.indexOf(locale) !== -1) {\n        this.searchableMinLength = 1;\n      } else {\n        this.searchableMinLength = this.defaultSearchableMinLength;\n      }\n    });\n\n    //register lunr pipeline function\n    lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    query = SearchService.normalizeSearchQuery(query);\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  async indexCiphers(indexedEntityId?: string, ciphers?: CipherView[]): Promise<void> {\n    if (this.indexing) {\n      return;\n    }\n\n    this.logService.time(\"search indexing\");\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || (await this.cipherService.getAllDecrypted());\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.timeEnd(\"search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[] = null\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = await this.cipherService.getAllDecrypted();\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        c.login &&\n        c.login.hasUris &&\n        c.login.uris.some((loginUri) => loginUri.uri.toLowerCase().indexOf(query) > -1)\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchType.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { SendFileApi } from \"../api/sendFileApi\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/sendTextApi\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendResponse } from \"../response/sendResponse\";\n\nimport { SendFileData } from \"./sendFileData\";\nimport { SendTextData } from \"./sendTextData\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendFile } from \"../domain/sendFile\";\n\nimport { View } from \"./view\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { SendText } from \"../domain/sendText\";\n\nimport { View } from \"./view\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { Send } from \"../domain/send\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { SendFileView } from \"./sendFileView\";\nimport { SendTextView } from \"./sendTextView\";\nimport { View } from \"./view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: ArrayBuffer;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n}\n","import { SendFileData } from \"../data/sendFileData\";\nimport { SendFileView } from \"../view/sendFileView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key\n    );\n    return view;\n  }\n}\n","import { SendTextData } from \"../data/sendTextData\";\nimport { SendTextView } from \"../view/sendTextView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      []\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key\n    );\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { SendData } from \"../data/sendData\";\nimport { SendView } from \"../view/sendView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SendFile } from \"./sendFile\";\nimport { SendText } from \"./sendText\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"]\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { SendService as SendServiceAbstraction } from \"../abstractions/send.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SEND_KDF_ITERATIONS } from \"../enums/kdfType\";\nimport { SendType } from \"../enums/sendType\";\nimport { Utils } from \"../misc/utils\";\nimport { SendData } from \"../models/data/sendData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/sendFile\";\nimport { SendText } from \"../models/domain/sendText\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SendService implements SendServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedSends(null);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      model.key = await this.cryptoFunctionService.randomBytes(16);\n      model.cryptoKey = await this.cryptoService.makeSendKey(model.key);\n    }\n    if (password != null) {\n      const passwordHash = await this.cryptoFunctionService.pbkdf2(\n        password,\n        model.key,\n        \"sha256\",\n        SEND_KDF_ITERATIONS\n      );\n      send.password = Utils.fromBufferToB64(passwordHash);\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  async get(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async saveWithServer(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.apiService.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.apiService.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n\n          await this.fileUploadService.uploadSendFile(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1]\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.apiService.putSend(sendData[0].id, request);\n    }\n\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.apiService.postSendFileLegacy(fd);\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  async clear(): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(null);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteSend(id);\n    await this.delete(id);\n  }\n\n  async removePasswordWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(data, key);\n    return [encFileName, encFileData];\n  }\n}\n","import { SettingsService as SettingsServiceAbstraction } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\n\nconst Keys = {\n  settingsPrefix: \"settings_\",\n  equivalentDomains: \"equivalentDomains\",\n};\n\nexport class SettingsService implements SettingsServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setSettings(null);\n  }\n\n  getEquivalentDomains(): Promise<any> {\n    return this.getSettingsKey(Keys.equivalentDomains);\n  }\n\n  async setEquivalentDomains(equivalentDomains: string[][]): Promise<void> {\n    await this.setSettingsKey(Keys.equivalentDomains, equivalentDomains);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setSettings(null, { userId: userId });\n  }\n\n  // Helpers\n\n  private async getSettings(): Promise<any> {\n    const settings = await this.stateService.getSettings();\n    if (settings == null) {\n      // eslint-disable-next-line\n      const userId = await this.stateService.getUserId();\n    }\n    return settings;\n  }\n\n  private async getSettingsKey(key: string): Promise<any> {\n    const settings = await this.getSettings();\n    if (settings != null && settings[key]) {\n      return settings[key];\n    }\n    return null;\n  }\n\n  private async setSettingsKey(key: string, value: any): Promise<void> {\n    let settings = await this.getSettings();\n    if (!settings) {\n      settings = {};\n    }\n\n    settings[key] = value;\n    await this.stateService.setSettings(settings);\n  }\n}\n","import { StateService } from \"../abstractions/state.service\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { Utils } from \"../misc/utils\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class TokenService implements TokenServiceAbstraction {\n  static decodeToken(token: string): Promise<any> {\n    if (token == null) {\n      throw new Error(\"Token not provided.\");\n    }\n\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      throw new Error(\"JWT must have 3 parts\");\n    }\n\n    const decoded = Utils.fromUrlB64ToUtf8(parts[1]);\n    if (decoded == null) {\n      throw new Error(\"Cannot decode the token\");\n    }\n\n    const decodedToken = JSON.parse(decoded);\n    return decodedToken;\n  }\n\n  constructor(private stateService: StateService) {}\n\n  async setTokens(\n    accessToken: string,\n    refreshToken: string,\n    clientIdClientSecret: [string, string]\n  ): Promise<any> {\n    await this.setToken(accessToken);\n    await this.setRefreshToken(refreshToken);\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0]);\n      await this.setClientSecret(clientIdClientSecret[1]);\n    }\n  }\n\n  async setClientId(clientId: string): Promise<any> {\n    return await this.stateService.setApiKeyClientId(clientId);\n  }\n\n  async getClientId(): Promise<string> {\n    return await this.stateService.getApiKeyClientId();\n  }\n\n  async setClientSecret(clientSecret: string): Promise<any> {\n    return await this.stateService.setApiKeyClientSecret(clientSecret);\n  }\n\n  async getClientSecret(): Promise<string> {\n    return await this.stateService.getApiKeyClientSecret();\n  }\n\n  async setToken(token: string): Promise<void> {\n    await this.stateService.setAccessToken(token);\n  }\n\n  async getToken(): Promise<string> {\n    return await this.stateService.getAccessToken();\n  }\n\n  async setRefreshToken(refreshToken: string): Promise<any> {\n    return await this.stateService.setRefreshToken(refreshToken);\n  }\n\n  async getRefreshToken(): Promise<string> {\n    return await this.stateService.getRefreshToken();\n  }\n\n  async setTwoFactorToken(tokenResponse: IdentityTokenResponse): Promise<any> {\n    return await this.stateService.setTwoFactorToken(tokenResponse.twoFactorToken);\n  }\n\n  async getTwoFactorToken(): Promise<string> {\n    return await this.stateService.getTwoFactorToken();\n  }\n\n  async clearTwoFactorToken(): Promise<any> {\n    return await this.stateService.setTwoFactorToken(null);\n  }\n\n  async clearToken(userId?: string): Promise<any> {\n    await this.stateService.setAccessToken(null, { userId: userId });\n    await this.stateService.setRefreshToken(null, { userId: userId });\n    await this.stateService.setApiKeyClientId(null, { userId: userId });\n    await this.stateService.setApiKeyClientSecret(null, { userId: userId });\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeToken(token?: string): Promise<any> {\n    const storedToken = await this.stateService.getDecodedToken();\n    if (token === null && storedToken != null) {\n      return storedToken;\n    }\n\n    token = token ?? (await this.stateService.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Token not found.\");\n    }\n\n    return TokenService.decodeToken(token);\n  }\n\n  async getTokenExpirationDate(): Promise<Date> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.exp === \"undefined\") {\n      return null;\n    }\n\n    const d = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    d.setUTCSeconds(decoded.exp);\n    return d;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const d = await this.getTokenExpirationDate();\n    if (d == null) {\n      return 0;\n    }\n\n    const msRemaining = d.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.sub === \"undefined\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as string;\n  }\n\n  async getEmail(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email === \"undefined\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email as string;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email_verified === \"undefined\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified as boolean;\n  }\n\n  async getName(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.name === \"undefined\") {\n      return null;\n    }\n\n    return decoded.name as string;\n  }\n\n  async getIssuer(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.iss === \"undefined\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss as string;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n}\n","import { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StateVersion } from \"../enums/stateVersion\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountSettings } from \"../models/domain/account\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\n\nimport { TokenService } from \"./token.service\";\n\n// Originally (before January 2022) storage was handled as a flat key/value pair store.\n// With the move to a typed object for state storage these keys should no longer be in use anywhere outside of this migration.\nconst v1Keys: { [key: string]: string } = {\n  accessToken: \"accessToken\",\n  alwaysShowDock: \"alwaysShowDock\",\n  autoConfirmFingerprints: \"autoConfirmFingerprints\",\n  autoFillOnPageLoadDefault: \"autoFillOnPageLoadDefault\",\n  biometricAwaitingAcceptance: \"biometricAwaitingAcceptance\",\n  biometricFingerprintValidated: \"biometricFingerprintValidated\",\n  biometricText: \"biometricText\",\n  biometricUnlock: \"biometric\",\n  clearClipboard: \"clearClipboardKey\",\n  clientId: \"apikey_clientId\",\n  clientSecret: \"apikey_clientSecret\",\n  collapsedGroupings: \"collapsedGroupings\",\n  convertAccountToKeyConnector: \"convertAccountToKeyConnector\",\n  defaultUriMatch: \"defaultUriMatch\",\n  disableAddLoginNotification: \"disableAddLoginNotification\",\n  disableAutoBiometricsPrompt: \"noAutoPromptBiometrics\",\n  disableAutoTotpCopy: \"disableAutoTotpCopy\",\n  disableBadgeCounter: \"disableBadgeCounter\",\n  disableChangedPasswordNotification: \"disableChangedPasswordNotification\",\n  disableContextMenuItem: \"disableContextMenuItem\",\n  disableFavicon: \"disableFavicon\",\n  disableGa: \"disableGa\",\n  dontShowCardsCurrentTab: \"dontShowCardsCurrentTab\",\n  dontShowIdentitiesCurrentTab: \"dontShowIdentitiesCurrentTab\",\n  emailVerified: \"emailVerified\",\n  enableAlwaysOnTop: \"enableAlwaysOnTopKey\",\n  enableAutoFillOnPageLoad: \"enableAutoFillOnPageLoad\",\n  enableBiometric: \"enabledBiometric\",\n  enableBrowserIntegration: \"enableBrowserIntegration\",\n  enableBrowserIntegrationFingerprint: \"enableBrowserIntegrationFingerprint\",\n  enableCloseToTray: \"enableCloseToTray\",\n  enableFullWidth: \"enableFullWidth\",\n  enableGravatars: \"enableGravatars\",\n  enableMinimizeToTray: \"enableMinimizeToTray\",\n  enableStartToTray: \"enableStartToTrayKey\",\n  enableTray: \"enableTray\",\n  encKey: \"encKey\", // Generated Symmetric Key\n  encOrgKeys: \"encOrgKeys\",\n  encPrivate: \"encPrivateKey\",\n  encProviderKeys: \"encProviderKeys\",\n  entityId: \"entityId\",\n  entityType: \"entityType\",\n  environmentUrls: \"environmentUrls\",\n  equivalentDomains: \"equivalentDomains\",\n  eventCollection: \"eventCollection\",\n  forcePasswordReset: \"forcePasswordReset\",\n  history: \"generatedPasswordHistory\",\n  installedVersion: \"installedVersion\",\n  kdf: \"kdf\",\n  kdfIterations: \"kdfIterations\",\n  key: \"key\", // Master Key\n  keyHash: \"keyHash\",\n  lastActive: \"lastActive\",\n  localData: \"sitesLocalData\",\n  locale: \"locale\",\n  mainWindowSize: \"mainWindowSize\",\n  minimizeOnCopyToClipboard: \"minimizeOnCopyToClipboardKey\",\n  neverDomains: \"neverDomains\",\n  noAutoPromptBiometricsText: \"noAutoPromptBiometricsText\",\n  openAtLogin: \"openAtLogin\",\n  passwordGenerationOptions: \"passwordGenerationOptions\",\n  pinProtected: \"pinProtectedKey\",\n  protectedPin: \"protectedPin\",\n  refreshToken: \"refreshToken\",\n  ssoCodeVerifier: \"ssoCodeVerifier\",\n  ssoIdentifier: \"ssoOrgIdentifier\",\n  ssoState: \"ssoState\",\n  stamp: \"securityStamp\",\n  theme: \"theme\",\n  userEmail: \"userEmail\",\n  userId: \"userId\",\n  usesConnector: \"usesKeyConnector\",\n  vaultTimeoutAction: \"vaultTimeoutAction\",\n  vaultTimeout: \"lockOption\",\n  rememberedEmail: \"rememberedEmail\",\n};\n\nconst v1KeyPrefixes: { [key: string]: string } = {\n  ciphers: \"ciphers_\",\n  collections: \"collections_\",\n  folders: \"folders_\",\n  lastSync: \"lastSync_\",\n  policies: \"policies_\",\n  twoFactorToken: \"twoFactorToken_\",\n  organizations: \"organizations_\",\n  providers: \"providers_\",\n  sends: \"sends_\",\n  settings: \"settings_\",\n};\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateMigrationService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>\n  ) {}\n\n  async needsMigration(): Promise<boolean> {\n    const currentStateVersion = await this.getCurrentStateVersion();\n    return currentStateVersion == null || currentStateVersion < StateVersion.Latest;\n  }\n\n  async migrate(): Promise<void> {\n    let currentStateVersion = await this.getCurrentStateVersion();\n    while (currentStateVersion < StateVersion.Latest) {\n      switch (currentStateVersion) {\n        case StateVersion.One:\n          await this.migrateStateFrom1To2();\n          break;\n        case StateVersion.Two:\n          await this.migrateStateFrom2To3();\n          break;\n        case StateVersion.Three:\n          await this.migrateStateFrom3To4();\n          break;\n        case StateVersion.Four: {\n          const authenticatedAccounts = await this.getAuthenticatedAccounts();\n          for (const account of authenticatedAccounts) {\n            const migratedAccount = await this.migrateAccountFrom4To5(account);\n            await this.set(account.profile.userId, migratedAccount);\n          }\n          await this.setCurrentStateVersion(StateVersion.Five);\n          break;\n        }\n      }\n\n      currentStateVersion += 1;\n    }\n  }\n\n  protected async migrateStateFrom1To2(): Promise<void> {\n    const clearV1Keys = async (clearingUserId?: string) => {\n      for (const key in v1Keys) {\n        if (key == null) {\n          continue;\n        }\n        await this.set(v1Keys[key], null);\n      }\n      if (clearingUserId != null) {\n        for (const keyPrefix in v1KeyPrefixes) {\n          if (keyPrefix == null) {\n            continue;\n          }\n          await this.set(v1KeyPrefixes[keyPrefix] + userId, null);\n        }\n      }\n    };\n\n    // Some processes, like biometrics, may have already defined a value before migrations are run.\n    // We don't want to null out those values if they don't exist in the old storage scheme (like for new installs)\n    // So, the OOO for migration is that we:\n    // 1. Check for an existing storage value from the old storage structure OR\n    // 2. Check for a value already set by processes that run before migration OR\n    // 3. Assign the default value\n    const globals =\n      (await this.get<GlobalState>(keys.global)) ?? this.stateFactory.createGlobal(null);\n    globals.stateVersion = StateVersion.Two;\n    globals.environmentUrls =\n      (await this.get<EnvironmentUrls>(v1Keys.environmentUrls)) ?? globals.environmentUrls;\n    globals.locale = (await this.get<string>(v1Keys.locale)) ?? globals.locale;\n    globals.noAutoPromptBiometrics =\n      (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n      globals.noAutoPromptBiometrics;\n    globals.noAutoPromptBiometricsText =\n      (await this.get<string>(v1Keys.noAutoPromptBiometricsText)) ??\n      globals.noAutoPromptBiometricsText;\n    globals.ssoCodeVerifier =\n      (await this.get<string>(v1Keys.ssoCodeVerifier)) ?? globals.ssoCodeVerifier;\n    globals.ssoOrganizationIdentifier =\n      (await this.get<string>(v1Keys.ssoIdentifier)) ?? globals.ssoOrganizationIdentifier;\n    globals.ssoState = (await this.get<any>(v1Keys.ssoState)) ?? globals.ssoState;\n    globals.rememberedEmail =\n      (await this.get<string>(v1Keys.rememberedEmail)) ?? globals.rememberedEmail;\n    globals.theme = (await this.get<ThemeType>(v1Keys.theme)) ?? globals.theme;\n    globals.vaultTimeout = (await this.get<number>(v1Keys.vaultTimeout)) ?? globals.vaultTimeout;\n    globals.vaultTimeoutAction =\n      (await this.get<string>(v1Keys.vaultTimeoutAction)) ?? globals.vaultTimeoutAction;\n    globals.window = (await this.get<any>(v1Keys.mainWindowSize)) ?? globals.window;\n    globals.enableTray = (await this.get<boolean>(v1Keys.enableTray)) ?? globals.enableTray;\n    globals.enableMinimizeToTray =\n      (await this.get<boolean>(v1Keys.enableMinimizeToTray)) ?? globals.enableMinimizeToTray;\n    globals.enableCloseToTray =\n      (await this.get<boolean>(v1Keys.enableCloseToTray)) ?? globals.enableCloseToTray;\n    globals.enableStartToTray =\n      (await this.get<boolean>(v1Keys.enableStartToTray)) ?? globals.enableStartToTray;\n    globals.openAtLogin = (await this.get<boolean>(v1Keys.openAtLogin)) ?? globals.openAtLogin;\n    globals.alwaysShowDock =\n      (await this.get<boolean>(v1Keys.alwaysShowDock)) ?? globals.alwaysShowDock;\n    globals.enableBrowserIntegration =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegration)) ??\n      globals.enableBrowserIntegration;\n    globals.enableBrowserIntegrationFingerprint =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegrationFingerprint)) ??\n      globals.enableBrowserIntegrationFingerprint;\n\n    const userId =\n      (await this.get<string>(v1Keys.userId)) ?? (await this.get<string>(v1Keys.entityId));\n\n    const defaultAccount = this.stateFactory.createAccount(null);\n    const accountSettings: AccountSettings = {\n      autoConfirmFingerPrints:\n        (await this.get<boolean>(v1Keys.autoConfirmFingerprints)) ??\n        defaultAccount.settings.autoConfirmFingerPrints,\n      autoFillOnPageLoadDefault:\n        (await this.get<boolean>(v1Keys.autoFillOnPageLoadDefault)) ??\n        defaultAccount.settings.autoFillOnPageLoadDefault,\n      biometricLocked: null,\n      biometricUnlock:\n        (await this.get<boolean>(v1Keys.biometricUnlock)) ??\n        defaultAccount.settings.biometricUnlock,\n      clearClipboard:\n        (await this.get<number>(v1Keys.clearClipboard)) ?? defaultAccount.settings.clearClipboard,\n      defaultUriMatch:\n        (await this.get<any>(v1Keys.defaultUriMatch)) ?? defaultAccount.settings.defaultUriMatch,\n      disableAddLoginNotification:\n        (await this.get<boolean>(v1Keys.disableAddLoginNotification)) ??\n        defaultAccount.settings.disableAddLoginNotification,\n      disableAutoBiometricsPrompt:\n        (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n        defaultAccount.settings.disableAutoBiometricsPrompt,\n      disableAutoTotpCopy:\n        (await this.get<boolean>(v1Keys.disableAutoTotpCopy)) ??\n        defaultAccount.settings.disableAutoTotpCopy,\n      disableBadgeCounter:\n        (await this.get<boolean>(v1Keys.disableBadgeCounter)) ??\n        defaultAccount.settings.disableBadgeCounter,\n      disableChangedPasswordNotification:\n        (await this.get<boolean>(v1Keys.disableChangedPasswordNotification)) ??\n        defaultAccount.settings.disableChangedPasswordNotification,\n      disableContextMenuItem:\n        (await this.get<boolean>(v1Keys.disableContextMenuItem)) ??\n        defaultAccount.settings.disableContextMenuItem,\n      disableGa: (await this.get<boolean>(v1Keys.disableGa)) ?? defaultAccount.settings.disableGa,\n      dontShowCardsCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowCardsCurrentTab)) ??\n        defaultAccount.settings.dontShowCardsCurrentTab,\n      dontShowIdentitiesCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowIdentitiesCurrentTab)) ??\n        defaultAccount.settings.dontShowIdentitiesCurrentTab,\n      enableAlwaysOnTop:\n        (await this.get<boolean>(v1Keys.enableAlwaysOnTop)) ??\n        defaultAccount.settings.enableAlwaysOnTop,\n      enableAutoFillOnPageLoad:\n        (await this.get<boolean>(v1Keys.enableAutoFillOnPageLoad)) ??\n        defaultAccount.settings.enableAutoFillOnPageLoad,\n      enableBiometric:\n        (await this.get<boolean>(v1Keys.enableBiometric)) ??\n        defaultAccount.settings.enableBiometric,\n      enableFullWidth:\n        (await this.get<boolean>(v1Keys.enableFullWidth)) ??\n        defaultAccount.settings.enableFullWidth,\n      enableGravitars:\n        (await this.get<boolean>(v1Keys.enableGravatars)) ??\n        defaultAccount.settings.enableGravitars,\n      environmentUrls: globals.environmentUrls ?? defaultAccount.settings.environmentUrls,\n      equivalentDomains:\n        (await this.get<any>(v1Keys.equivalentDomains)) ??\n        defaultAccount.settings.equivalentDomains,\n      minimizeOnCopyToClipboard:\n        (await this.get<boolean>(v1Keys.minimizeOnCopyToClipboard)) ??\n        defaultAccount.settings.minimizeOnCopyToClipboard,\n      neverDomains:\n        (await this.get<any>(v1Keys.neverDomains)) ?? defaultAccount.settings.neverDomains,\n      passwordGenerationOptions:\n        (await this.get<any>(v1Keys.passwordGenerationOptions)) ??\n        defaultAccount.settings.passwordGenerationOptions,\n      pinProtected: {\n        decrypted: null,\n        encrypted: await this.get<string>(v1Keys.pinProtected),\n      },\n      protectedPin: await this.get<string>(v1Keys.protectedPin),\n      settings: userId == null ? null : await this.get<any>(v1KeyPrefixes.settings + userId),\n      vaultTimeout:\n        (await this.get<number>(v1Keys.vaultTimeout)) ?? defaultAccount.settings.vaultTimeout,\n      vaultTimeoutAction:\n        (await this.get<string>(v1Keys.vaultTimeoutAction)) ??\n        defaultAccount.settings.vaultTimeoutAction,\n    };\n\n    // (userId == null) = no logged in user (so no known userId) and we need to temporarily store account specific settings in state to migrate on first auth\n    // (userId != null) = we have a currently authed user (so known userId) with encrypted data and other key settings we can move, no need to temporarily store account settings\n    if (userId == null) {\n      await this.set(keys.tempAccountSettings, accountSettings);\n      await this.set(keys.global, globals);\n      await this.set(keys.authenticatedAccounts, []);\n      await this.set(keys.activeUserId, null);\n      await clearV1Keys();\n      return;\n    }\n\n    globals.twoFactorToken = await this.get<string>(v1KeyPrefixes.twoFactorToken + userId);\n    await this.set(keys.global, globals);\n    await this.set(userId, {\n      data: {\n        addEditCipherInfo: null,\n        ciphers: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CipherData }>(v1KeyPrefixes.ciphers + userId),\n        },\n        collapsedGroupings: null,\n        collections: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CollectionData }>(\n            v1KeyPrefixes.collections + userId\n          ),\n        },\n        eventCollection: await this.get<EventData[]>(v1Keys.eventCollection),\n        folders: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: FolderData }>(v1KeyPrefixes.folders + userId),\n        },\n        localData: null,\n        organizations: await this.get<{ [id: string]: OrganizationData }>(\n          v1KeyPrefixes.organizations + userId\n        ),\n        passwordGenerationHistory: {\n          decrypted: null,\n          encrypted: await this.get<GeneratedPasswordHistory[]>(v1Keys.history),\n        },\n        policies: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: PolicyData }>(v1KeyPrefixes.policies + userId),\n        },\n        providers: await this.get<{ [id: string]: ProviderData }>(v1KeyPrefixes.providers + userId),\n        sends: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: SendData }>(v1KeyPrefixes.sends + userId),\n        },\n      },\n      keys: {\n        apiKeyClientSecret: await this.get<string>(v1Keys.clientSecret),\n        cryptoMasterKey: null,\n        cryptoMasterKeyAuto: null,\n        cryptoMasterKeyB64: null,\n        cryptoMasterKeyBiometric: null,\n        cryptoSymmetricKey: {\n          encrypted: await this.get<string>(v1Keys.encKey),\n          decrypted: null,\n        },\n        legacyEtmKey: null,\n        organizationKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encOrgKeys),\n        },\n        privateKey: {\n          decrypted: null,\n          encrypted: await this.get<string>(v1Keys.encPrivate),\n        },\n        providerKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encProviderKeys),\n        },\n        publicKey: null,\n      },\n      profile: {\n        apiKeyClientId: await this.get<string>(v1Keys.clientId),\n        authenticationStatus: null,\n        convertAccountToKeyConnector: await this.get<boolean>(v1Keys.convertAccountToKeyConnector),\n        email: await this.get<string>(v1Keys.userEmail),\n        emailVerified: await this.get<boolean>(v1Keys.emailVerified),\n        entityId: null,\n        entityType: null,\n        everBeenUnlocked: null,\n        forcePasswordReset: null,\n        hasPremiumPersonally: null,\n        kdfIterations: await this.get<number>(v1Keys.kdfIterations),\n        kdfType: await this.get<KdfType>(v1Keys.kdf),\n        keyHash: await this.get<string>(v1Keys.keyHash),\n        lastSync: null,\n        userId: userId,\n        usesKeyConnector: null,\n      },\n      settings: accountSettings,\n      tokens: {\n        accessToken: await this.get<string>(v1Keys.accessToken),\n        decodedToken: null,\n        refreshToken: await this.get<string>(v1Keys.refreshToken),\n        securityStamp: null,\n      },\n    });\n\n    await this.set(keys.authenticatedAccounts, [userId]);\n    await this.set(keys.activeUserId, userId);\n\n    const accountActivity: { [userId: string]: number } = {\n      [userId]: await this.get<number>(v1Keys.lastActive),\n    };\n    accountActivity[userId] = await this.get<number>(v1Keys.lastActive);\n    await this.set(keys.accountActivity, accountActivity);\n\n    await clearV1Keys(userId);\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"biometric\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.biometricKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"biometric\" }),\n        { keySuffix: \"biometric\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"biometric\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"auto\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.autoKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"auto\" }),\n        { keySuffix: \"auto\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"auto\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key)) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.masterKey}`,\n        await this.secureStorageService.get(v1Keys.key)\n      );\n      await this.secureStorageService.remove(v1Keys.key);\n    }\n  }\n\n  protected async migrateStateFrom2To3(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (\n          account?.profile?.hasPremiumPersonally === null &&\n          account.tokens?.accessToken != null\n        ) {\n          const decodedToken = await TokenService.decodeToken(account.tokens.accessToken);\n          account.profile.hasPremiumPersonally = decodedToken.premium;\n          await this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Three;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateStateFrom3To4(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (account?.profile?.everBeenUnlocked != null) {\n          delete account.profile.everBeenUnlocked;\n          return this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Four;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateAccountFrom4To5(account: TAccount): Promise<TAccount> {\n    const encryptedOrgKeys = account.keys?.organizationKeys?.encrypted;\n    if (encryptedOrgKeys != null) {\n      for (const [orgId, encKey] of Object.entries(encryptedOrgKeys)) {\n        encryptedOrgKeys[orgId] = {\n          type: \"organization\",\n          key: encKey as unknown as string, // Account v4 does not reflect the current account model so we have to cast\n        };\n      }\n    }\n\n    return account;\n  }\n\n  protected get options(): StorageOptions {\n    return { htmlStorageLocation: HtmlStorageLocation.Local };\n  }\n\n  protected get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key, this.options);\n  }\n\n  protected set(key: string, value: any): Promise<any> {\n    if (value == null) {\n      return this.storageService.remove(key, this.options);\n    }\n    return this.storageService.save(key, value, this.options);\n  }\n\n  protected async getGlobals(): Promise<TGlobalState> {\n    return await this.get<TGlobalState>(keys.global);\n  }\n\n  protected async getCurrentStateVersion(): Promise<StateVersion> {\n    return (await this.getGlobals())?.stateVersion ?? StateVersion.One;\n  }\n\n  protected async setCurrentStateVersion(newVersion: StateVersion): Promise<void> {\n    const globals = await this.getGlobals();\n    globals.stateVersion = newVersion;\n    await this.set(keys.global, globals);\n  }\n\n  protected async getAuthenticatedAccounts(): Promise<TAccount[]> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    return Promise.all(authenticatedUserIds.map((id) => this.get<TAccount>(id)));\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { ProfileOrganizationResponse } from \"../response/profileOrganizationResponse\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: ProfileOrganizationResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useScim = response.useScim;\n    this.useResetPassword = response.useResetPassword;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProfileProviderResponse } from \"../response/profileProviderResponse\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderApiServiceAbstraction } from \"../abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { ProviderService } from \"../abstractions/provider.service\";\nimport { SendService } from \"../abstractions/send.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService as SyncServiceAbstraction } from \"../abstractions/sync.service\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  constructor(\n    private apiService: ApiService,\n    private settingsService: SettingsService,\n    private folderService: InternalFolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: PolicyService,\n    private sendService: SendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private providerService: ProviderService,\n    private folderApiService: FolderApiServiceAbstraction,\n    private logoutCallback: (expired: boolean) => Promise<void>\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.folderApiService.get(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getFullCipherDetails(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = await this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.apiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setEncKey(response.key);\n    await this.cryptoService.setEncPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n    await this.stateService.setHasPremiumPersonally(response.premiumPersonally);\n    await this.stateService.setHasPremiumFromOrganization(response.premiumFromOrganization);\n    await this.stateService.setForcePasswordReset(response.forcePasswordReset);\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o);\n    });\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o);\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.save(organizations);\n    await this.providerService.save(providers);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.settingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService\n  ) {}\n\n  async startProcessReload(): Promise<void> {\n    if (\n      (await this.stateService.getDecryptedPinProtected()) != null ||\n      (await this.stateService.getBiometricLocked()) ||\n      this.reloadInterval != null\n    ) {\n      return;\n    }\n    this.cancelProcessReload();\n    this.reloadInterval = setInterval(async () => {\n      let doRefresh = false;\n      const lastActive = await this.stateService.getLastActive();\n      if (lastActive != null) {\n        const diffSeconds = new Date().getTime() - lastActive;\n        // Don't refresh if they are still active in the window\n        doRefresh = diffSeconds >= 5000;\n      }\n      const biometricLockedFingerprintValidated =\n        (await this.stateService.getBiometricFingerprintValidated()) &&\n        (await this.stateService.getBiometricLocked());\n      if (doRefresh && !biometricLockedFingerprintValidated) {\n        clearInterval(this.reloadInterval);\n        this.reloadInterval = null;\n        this.messagingService.send(\"reloadProcess\");\n        if (this.reloadCallback != null) {\n          await this.reloadCallback();\n        }\n      }\n    }, 10000);\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n    await this.stateService.getClearClipboard().then((clearSeconds) => {\n      if (clearSeconds == null) {\n        return;\n      }\n      if (timeoutMs == null) {\n        timeoutMs = clearSeconds * 1000;\n      }\n      this.clearClipboardTimeoutFunction = async () => {\n        const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n        if (clipboardValue === clipboardValueNow) {\n          this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n        }\n      };\n      this.clearClipboardTimeout = setTimeout(async () => {\n        await this.clearPendingClipboard();\n      }, timeoutMs);\n    });\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","import { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\nimport { Utils } from \"../misc/utils\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\"\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { I18nService } from \"../abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../enums/twoFactorProviderType\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: true,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../abstractions/userVerification.service\";\nimport { VerificationType } from \"../enums/verificationType\";\nimport { VerifyOTPRequest } from \"../models/request/account/verifyOTPRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { Verification } from \"../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private apiService: ApiService\n  ) {}\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: Verification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean\n  ) {\n    this.validateInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashPassword(verification.secret, null);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify the Master Password client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (Master Password or OTP)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    this.validateInput(verification);\n\n    if (verification.type === VerificationType.OTP) {\n      const request = new VerifyOTPRequest(verification.secret);\n      try {\n        await this.apiService.postAccountVerifyOTP(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n      }\n    } else {\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        null\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n    }\n    return true;\n  }\n\n  async requestOTP() {\n    await this.apiService.postAccountRequestOTP();\n  }\n\n  private validateInput(verification: Verification) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      if (verification.type === VerificationType.OTP) {\n        throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n      } else {\n        throw new Error(this.i18nService.t(\"masterPassRequired\"));\n      }\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { UsernameGenerationService as BaseUsernameGenerationService } from \"../abstractions/usernameGeneration.service\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\n\nconst DefaultOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"simplelogin\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n};\n\nexport class UsernameGenerationService implements BaseUsernameGenerationService {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService\n  ) {}\n\n  generateUsername(options: any): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EEFLongWordList.length - 1);\n    let word = EEFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    if (o.forwardedService === \"simplelogin\") {\n      if (o.forwardedSimpleLoginApiKey == null || o.forwardedSimpleLoginApiKey === \"\") {\n        return null;\n      }\n      return this.generateSimpleLoginAlias(o.forwardedSimpleLoginApiKey, o.website);\n    } else if (o.forwardedService === \"anonaddy\") {\n      if (\n        o.forwardedAnonAddyApiToken == null ||\n        o.forwardedAnonAddyApiToken === \"\" ||\n        o.forwardedAnonAddyDomain == null ||\n        o.forwardedAnonAddyDomain == \"\"\n      ) {\n        return null;\n      }\n      return this.generateAnonAddyAlias(\n        o.forwardedAnonAddyApiToken,\n        o.forwardedAnonAddyDomain,\n        o.website\n      );\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      if (o.forwardedFirefoxApiToken == null || o.forwardedFirefoxApiToken === \"\") {\n        return null;\n      }\n      return this.generateFirefoxRelayAlias(o.forwardedFirefoxApiToken, o.website);\n    }\n\n    return null;\n  }\n\n  async getOptions(): Promise<any> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n\n  private async generateSimpleLoginAlias(apiKey: string, website: string): Promise<string> {\n    if (apiKey == null || apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = \"https://app.simplelogin.io/api/alias/random/new\";\n    if (website != null) {\n      url += \"?hostname=\" + website;\n    }\n    requestInit.body = JSON.stringify({\n      note: (website != null ? \"Website: \" + website + \". \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    try {\n      const json = await response.json();\n      if (json?.error != null) {\n        throw \"SimpleLogin error:\" + json.error;\n      }\n    } catch {\n      // Do nothing...\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n\n  private async generateAnonAddyAlias(\n    apiToken: string,\n    domain: string,\n    websiteNote: string\n  ): Promise<string> {\n    if (apiToken == null || apiToken === \"\") {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + apiToken,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://app.anonaddy.com/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: domain,\n      description:\n        (websiteNote != null ? \"Website: \" + websiteNote + \". \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    throw \"Unknown AnonAddy error occurred.\";\n  }\n\n  private async generateFirefoxRelayAlias(apiToken: string, website: string): Promise<string> {\n    if (apiToken == null || apiToken === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + apiToken,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: website,\n      description: (website != null ? website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await this.apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as forge from \"node-forge\";\n\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { Utils } from \"../misc/utils\";\nimport { DecryptParameters } from \"../models/domain/decryptParameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n\n  constructor(win: Window) {\n    this.crypto = typeof win.crypto !== \"undefined\" ? win.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof win.crypto.subtle !== \"undefined\" ? win.crypto.subtle : null;\n  }\n\n  async pbkdf2(\n    password: string | ArrayBuffer,\n    salt: string | ArrayBuffer,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number\n  ): Promise<ArrayBuffer> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"]\n    );\n    return await this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);\n  }\n\n  async hkdf(\n    ikm: ArrayBuffer,\n    salt: string | ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    return await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t.buffer, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize).buffer;\n  }\n\n  async hash(\n    value: string | ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"\n  ): Promise<ArrayBuffer> {\n    if (algorithm === \"md5\") {\n      const md = algorithm === \"md5\" ? forge.md.md5.create() : forge.md.sha1.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data).buffer;\n    }\n\n    const valueBuf = this.toBuf(value);\n    return await this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);\n  }\n\n  async hmac(\n    value: ArrayBuffer,\n    key: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    return await this.subtle.sign(signingAlgorithm, impKey, value);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: ArrayBuffer, b: ArrayBuffer): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>): Promise<string> {\n    const dataBuffer = forge.util.createBuffer(parameters.data);\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", parameters.encKey);\n    decipher.start({ iv: parameters.iv });\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    return await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  async rsaEncrypt(\n    data: ArrayBuffer,\n    publicKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    return await this.subtle.encrypt(rsaParams, impKey, data);\n  }\n\n  async rsaDecrypt(\n    data: ArrayBuffer,\n    privateKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    return await this.subtle.decrypt(rsaParams, impKey, data);\n  }\n\n  async rsaExtractPublicKey(privateKey: ArrayBuffer): Promise<ArrayBuffer> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.exportKey(\"spki\", impPublicKey);\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[ArrayBuffer, ArrayBuffer]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = (await this.subtle.generateKey(rsaParams, true, [\n      \"encrypt\",\n      \"decrypt\",\n    ])) as CryptoKeyPair;\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [publicKey, privateKey];\n  }\n\n  randomBytes(length: number): Promise<ArrayBuffer> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr.buffer);\n  }\n\n  private toBuf(value: string | ArrayBuffer): ArrayBuffer {\n    let buf: ArrayBuffer;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value).buffer;\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | ArrayBuffer): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n}\n","export class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs: any[]) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null\n  ): Promise<any[]> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage(\n    tab: chrome.tabs.Tab,\n    obj: any,\n    options: chrome.tabs.MessageSendOptions = null\n  ): Promise<any> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  static getBackgroundPage(): any {\n    return chrome.extension.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(chrome.extension.getViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, extensionPage = false, active = true) {\n    chrome.tabs.create({ url: url, active: active });\n  }\n\n  static messageListener(\n    name: string,\n    callback: (message: any, sender: chrome.runtime.MessageSender, response: any) => void\n  ) {\n    chrome.runtime.onMessage.addListener(\n      (msg: any, sender: chrome.runtime.MessageSender, response: any) => {\n        callback(msg, sender, response);\n      }\n    );\n  }\n\n  static async closeLoginTab() {\n    const tabs = await BrowserApi.tabsQuery({\n      active: true,\n      title: \"Bitwarden\",\n      windowType: \"normal\",\n      currentWindow: true,\n    });\n\n    if (tabs.length === 0) {\n      return;\n    }\n\n    const tabToClose = tabs[tabs.length - 1].id;\n    chrome.tabs.remove(tabToClose);\n  }\n\n  static async focusSpecifiedTab(tabId: number) {\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage(win: Window) {\n    return chrome.i18n.getUILanguage();\n  }\n\n  static reloadExtension(win: Window) {\n    if (win != null) {\n      return win.location.reload(true);\n    } else {\n      return chrome.runtime.reload();\n    }\n  }\n\n  static reloadOpenWindows() {\n    const views = chrome.extension.getViews() as Window[];\n    views\n      .filter((w) => w.location.href != null)\n      .forEach((w) => {\n        w.location.reload();\n      });\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve, reject) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n}\n","import { BrowserApi } from \"./browserApi\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","export class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n}\n","import { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n}\n","import { SendType } from \"@bitwarden/common/enums/sendType\";\nimport { SendView } from \"@bitwarden/common/models/view/sendView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n}\n","import {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"@bitwarden/common/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\n\n@Injectable()\nexport class PopupUtilsService {\n  constructor(private privateMode: boolean = false) {}\n\n  inSidebar(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=sidebar\") > -1;\n  }\n\n  inTab(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=tab\") > -1;\n  }\n\n  inPopout(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=popout\") > -1;\n  }\n\n  inPopup(win: Window): boolean {\n    return (\n      win.location.search === \"\" ||\n      win.location.search.indexOf(\"uilocation=\") === -1 ||\n      win.location.search.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  inPrivateMode(): boolean {\n    return this.privateMode;\n  }\n\n  getContentScrollY(win: Window, scrollingContainer = \"main\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  setContentScrollY(win: Window, scrollY: number, scrollingContainer = \"main\"): void {\n    if (scrollY != null) {\n      const content = win.document.getElementsByTagName(scrollingContainer)[0];\n      content.scrollTop = scrollY;\n    }\n  }\n\n  popOut(win: Window, href: string = null): void {\n    if (href === null) {\n      href = win.location.href;\n    }\n\n    if (typeof chrome !== \"undefined\" && chrome.windows && chrome.windows.create) {\n      if (href.indexOf(\"?uilocation=\") > -1) {\n        href = href\n          .replace(\"uilocation=popup\", \"uilocation=popout\")\n          .replace(\"uilocation=tab\", \"uilocation=popout\")\n          .replace(\"uilocation=sidebar\", \"uilocation=popout\");\n      } else {\n        const hrefParts = href.split(\"#\");\n        href =\n          hrefParts[0] + \"?uilocation=popout\" + (hrefParts.length > 0 ? \"#\" + hrefParts[1] : \"\");\n      }\n\n      const bodyRect = document.querySelector(\"body\").getBoundingClientRect();\n      chrome.windows.create({\n        url: href,\n        type: \"popup\",\n        width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),\n        height: Math.round(bodyRect.height || 600),\n      });\n\n      if (this.inPopup(win)) {\n        BrowserApi.closePopup(win);\n      }\n    } else if (typeof chrome !== \"undefined\" && chrome.tabs && chrome.tabs.create) {\n      href = href\n        .replace(\"uilocation=popup\", \"uilocation=tab\")\n        .replace(\"uilocation=popout\", \"uilocation=tab\")\n        .replace(\"uilocation=sidebar\", \"uilocation=tab\");\n      chrome.tabs.create({\n        url: href,\n      });\n    }\n  }\n}\n","export default class AutofillScript {\n  script: string[][] = [];\n  documentUUID: any = {};\n  properties: any = {};\n  options: any = {};\n  metadata: any = {};\n  autosubmit: any = null;\n\n  constructor(documentUUID: string) {\n    this.documentUUID = documentUUID;\n  }\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly PasswordFieldIgnoreList: string[] = [\n    \"onetimepassword\",\n    \"captcha\",\n    \"findanything\",\n    \"forgot\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\"honorific-prefix\", \"prefix\", \"title\"];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { FieldType } from \"@bitwarden/common/enums/fieldType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { FieldView } from \"@bitwarden/common/models/view/fieldView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport AutofillField from \"../models/autofillField\";\nimport AutofillPageDetails from \"../models/autofillPageDetails\";\nimport AutofillScript from \"../models/autofillScript\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport { AutofillService as AutofillServiceInterface } from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofillConstants\";\n\nexport default class AutofillService implements AutofillServiceInterface {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventService: EventService,\n    private logService: LogService\n  ) {}\n\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): any[] {\n    const formData: any[] = [];\n\n    const passwordFields = this.loadPasswordFields(pageDetails, true, true, false, false);\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  async doAutoFill(options: any) {\n    let totpPromise: Promise<string> = null;\n    const tab = await this.getActiveTab();\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    let didAutofill = false;\n    options.pageDetails.forEach((pd: any) => {\n      // make sure we're still on correct tab\n      if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n        return;\n      }\n\n      const fillScript = this.generateFillScript(pd.details, {\n        skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n        onlyEmptyFields: options.onlyEmptyFields || false,\n        onlyVisibleFields: options.onlyVisibleFields || false,\n        fillNewPassword: options.fillNewPassword || false,\n        cipher: options.cipher,\n      });\n\n      if (!fillScript || !fillScript.script || !fillScript.script.length) {\n        return;\n      }\n\n      // Add a small delay between operations\n      fillScript.properties.delay_between_operations = 20;\n\n      didAutofill = true;\n      if (!options.skipLastUsed) {\n        this.cipherService.updateLastUsedDate(options.cipher.id);\n      }\n\n      BrowserApi.tabSendMessage(\n        tab,\n        {\n          command: \"fillForm\",\n          fillScript: fillScript,\n          url: tab.url,\n        },\n        { frameId: pd.frameId }\n      );\n\n      if (\n        options.cipher.type !== CipherType.Login ||\n        totpPromise ||\n        !options.cipher.login.totp ||\n        (!canAccessPremium && !options.cipher.organizationUseTotp)\n      ) {\n        return;\n      }\n\n      totpPromise = this.stateService.getDisableAutoTotpCopy().then((disabled) => {\n        if (!disabled) {\n          return this.totpService.getCode(options.cipher.login.totp);\n        }\n        return null;\n      });\n    });\n\n    if (didAutofill) {\n      this.eventService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totpPromise != null) {\n        return await totpPromise;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  async doAutoFillActiveTab(pageDetails: any, fromCommand: boolean) {\n    const tab = await this.getActiveTab();\n    if (!tab || !tab.url) {\n      return;\n    }\n\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n\n      if (cipher == null) {\n        return null;\n      }\n    }\n\n    if (cipher.reprompt !== CipherRepromptType.None) {\n      return;\n    }\n\n    const totpCode = await this.doAutoFill({\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n    });\n\n    // Update last used index as autofill has succeed\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  // Helpers\n\n  private async getActiveTab(): Promise<any> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  private generateFillScript(pageDetails: AutofillPageDetails, options: any): AutofillScript {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript(pageDetails.documentUUID);\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f: any) => {\n        if (this.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field: any) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId);\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          this.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  private generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    const login = options.cipher.login;\n\n    if (!login.password || login.password === \"\") {\n      // No password for this login. Maybe they just wanted to auto-fill some custom fields?\n      fillScript = this.setFillScriptForFocus(filledFields, fillScript);\n      return fillScript;\n    }\n\n    let passwordFields = this.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = this.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const passwordFieldsForForm: AutofillField[] = [];\n      passwordFields.forEach((passField) => {\n        if (formKey === passField.form) {\n          passwordFieldsForForm.push(passField);\n        }\n      });\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n    }\n\n    if (!passwordFields.length && !options.skipUsernameOnlyFill) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f: any) => {\n        if (\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          this.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      this.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      this.fillByOpid(fillScript, p, login.password);\n    });\n\n    fillScript = this.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f: any) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          this.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          this.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && this.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      this.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && this.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      this.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (fillFields.exp && this.hasValue(card.expMonth) && this.hasValue(card.expYear)) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private fieldAttrsContain(field: any, containsVal: string) {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: any,\n    filledFields: { [id: string]: AutofillField },\n    options: any\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f: any) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          this.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          this.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          this.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (this.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (this.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (this.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && this.hasValue(identity.address1)) {\n      let address = \"\";\n      if (this.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (this.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (this.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  private isFieldMatch(value: string, options: string[], containsOptions?: string[]): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields\n    );\n  }\n\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField }\n  ) {\n    let doFill = false;\n    if (this.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (this.hasValue(option[j]) && option[j].toLowerCase() === dataValue.toLowerCase()) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      this.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  private loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean\n  ) {\n    const arr: AutofillField[] = [];\n    pageDetails.fields.forEach((f) => {\n      if (this.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      const isPassword = f.type === \"password\";\n      const valueIsLikePassword = (value: string) => {\n        if (value == null) {\n          return false;\n        }\n        // Removes all whitespace, _ and - characters\n        // eslint-disable-next-line\n        const cleanedValue = value.toLowerCase().replace(/[\\s_\\-]/g, \"\");\n\n        if (cleanedValue.indexOf(\"password\") < 0) {\n          return false;\n        }\n\n        if (AutoFillConstants.PasswordFieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1)) {\n          return false;\n        }\n\n        return true;\n      };\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n        if (valueIsLikePassword(f.htmlID)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.htmlName)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.placeholder)) {\n          return true;\n        }\n        return false;\n      };\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n    return arr;\n  }\n\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ) {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (this.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\"\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!this.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  private fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (this.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (this.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-tag\"]) && this.fuzzyMatch(names, field[\"label-tag\"])) {\n      return true;\n    }\n    if (this.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-left\"]) && this.fuzzyMatch(names, field[\"label-left\"])) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-top\"]) && this.fuzzyMatch(names, field[\"label-top\"])) {\n      return true;\n    }\n    if (this.hasValue(field[\"label-aria\"]) && this.fuzzyMatch(names, field[\"label-aria\"])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private hasValue(str: string): boolean {\n    return str && str !== \"\";\n  }\n\n  private setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  private fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  private forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n}\n","export class EncArrayBuffer {\n  constructor(public buffer: ArrayBuffer) {}\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptedOrganizationKeyData } from \"../../models/data/encryptedOrganizationKeyData\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport abstract class BaseEncryptedOrganizationKey {\n  decrypt: (cryptoService: CryptoService) => Promise<SymmetricCryptoKey>;\n\n  static fromData(data: EncryptedOrganizationKeyData) {\n    switch (data.type) {\n      case \"organization\":\n        return new EncryptedOrganizationKey(data.key);\n\n      case \"provider\":\n        return new ProviderEncryptedOrganizationKey(data.key, data.providerId);\n\n      default:\n        return null;\n    }\n  }\n}\n\nexport class EncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const decValue = await cryptoService.rsaDecrypt(this.key);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"organization\",\n      key: this.key,\n    };\n  }\n}\n\nexport class ProviderEncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string, private providerId: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const providerKey = await cryptoService.getProviderKey(this.providerId);\n    const decValue = await cryptoService.decryptToBytes(new EncString(this.key), providerKey);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"provider\",\n      key: this.key,\n      providerId: this.providerId,\n    };\n  }\n}\n","import * as bigInt from \"big-integer\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { HashPurpose } from \"../enums/hashPurpose\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EncryptedObject } from \"../models/domain/encryptedObject\";\nimport { BaseEncryptedOrganizationKey } from \"../models/domain/encryptedOrganizationKey\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { ProfileOrganizationResponse } from \"../models/response/profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"../models/response/profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"../models/response/profileProviderResponse\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: AbstractEncryptService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService\n  ) {}\n\n  async setKey(key: SymmetricCryptoKey, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(key, { userId: userId });\n    await this.storeKey(key, userId);\n  }\n\n  async setKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async setEncKey(encKey: string): Promise<void> {\n    if (encKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedCryptoSymmetricKey(null);\n    await this.stateService.setEncryptedCryptoSymmetricKey(encKey);\n  }\n\n  async setEncPrivateKey(encPrivateKey: string): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedPrivateKey(null);\n    await this.stateService.setEncryptedPrivateKey(encPrivateKey);\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[] = [],\n    providerOrgs: ProfileProviderOrganizationResponse[] = []\n  ): Promise<void> {\n    const encOrgKeyData: { [orgId: string]: EncryptedOrganizationKeyData } = {};\n\n    orgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"organization\",\n        key: org.key,\n      };\n    });\n\n    providerOrgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"provider\",\n        providerId: org.providerId,\n        key: org.key,\n      };\n    });\n\n    await this.stateService.setDecryptedOrganizationKeys(null);\n    return await this.stateService.setEncryptedOrganizationKeys(encOrgKeyData);\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    const providerKeys: any = {};\n    providers.forEach((provider) => {\n      providerKeys[provider.id] = provider.key;\n    });\n\n    await this.stateService.setDecryptedProviderKeys(null);\n    return await this.stateService.setEncryptedProviderKeys(providerKeys);\n  }\n\n  async getKey(keySuffix?: KeySuffixOptions, userId?: string): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getCryptoMasterKey({ userId: userId });\n\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    keySuffix ||= KeySuffixOptions.Auto;\n    const symmetricKey = await this.getKeyFromStorage(keySuffix, userId);\n\n    if (symmetricKey != null) {\n      // TODO: Refactor here so get key doesn't also set key\n      this.setKey(symmetricKey, userId);\n    }\n\n    return symmetricKey;\n  }\n\n  async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: string\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.retrieveKeyFromStorage(keySuffix, userId);\n    if (key != null) {\n      const symmetricKey = new SymmetricCryptoKey(Utils.fromB64ToArray(key).buffer);\n\n      if (!(await this.validateKey(symmetricKey))) {\n        this.logService.warning(\"Wrong key, throwing away stored key\");\n        await this.clearSecretKeyStore(userId);\n        return null;\n      }\n\n      return symmetricKey;\n    }\n    return null;\n  }\n\n  async getKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, key: SymmetricCryptoKey): Promise<boolean> {\n    const storedKeyHash = await this.getKeyHash();\n    if (masterPassword != null && storedKeyHash != null) {\n      const localKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.LocalAuthorization\n      );\n      if (localKeyHash != null && storedKeyHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.ServerAuthorization\n      );\n      if (serverKeyHash != null && storedKeyHash === serverKeyHash) {\n        await this.setKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @sequentialize(() => \"getEncKey\")\n  getEncKey(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    return this.getEncKeyHelper(key);\n  }\n\n  async getPublicKey(): Promise<ArrayBuffer> {\n    const inMemoryPublicKey = await this.stateService.getPublicKey();\n    if (inMemoryPublicKey != null) {\n      return inMemoryPublicKey;\n    }\n\n    const privateKey = await this.getPrivateKey();\n    if (privateKey == null) {\n      return null;\n    }\n\n    const publicKey = await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    await this.stateService.setPublicKey(publicKey);\n    return publicKey;\n  }\n\n  async getPrivateKey(): Promise<ArrayBuffer> {\n    const decryptedPrivateKey = await this.stateService.getDecryptedPrivateKey();\n    if (decryptedPrivateKey != null) {\n      return decryptedPrivateKey;\n    }\n\n    const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n    if (encPrivateKey == null) {\n      return null;\n    }\n\n    const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), null);\n    await this.stateService.setDecryptedPrivateKey(privateKey);\n    return privateKey;\n  }\n\n  async getFingerprint(userId: string, publicKey?: ArrayBuffer): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      userId,\n      32,\n      \"sha256\"\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const result: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedOrganizationKeys = await this.stateService.getDecryptedOrganizationKeys();\n    if (decryptedOrganizationKeys != null && decryptedOrganizationKeys.size > 0) {\n      return decryptedOrganizationKeys;\n    }\n\n    const encOrgKeyData = await this.stateService.getEncryptedOrganizationKeys();\n    if (encOrgKeyData == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId of Object.keys(encOrgKeyData)) {\n      if (result.has(orgId)) {\n        continue;\n      }\n\n      const encOrgKey = BaseEncryptedOrganizationKey.fromData(encOrgKeyData[orgId]);\n      const decOrgKey = await encOrgKey.decrypt(this);\n      result.set(orgId, decOrgKey);\n\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedOrganizationKeys(result);\n    }\n\n    return result;\n  }\n\n  async getOrgKey(orgId: string): Promise<SymmetricCryptoKey> {\n    if (orgId == null) {\n      return null;\n    }\n\n    const orgKeys = await this.getOrgKeys();\n    if (orgKeys == null || !orgKeys.has(orgId)) {\n      return null;\n    }\n\n    return orgKeys.get(orgId);\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const providerKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedProviderKeys = await this.stateService.getDecryptedProviderKeys();\n    if (decryptedProviderKeys != null && decryptedProviderKeys.size > 0) {\n      return decryptedProviderKeys;\n    }\n\n    const encProviderKeys = await this.stateService.getEncryptedProviderKeys();\n    if (encProviderKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encProviderKeys) {\n      // eslint-disable-next-line\n      if (!encProviderKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encProviderKeys[orgId]);\n      providerKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedProviderKeys(providerKeys);\n    }\n\n    return providerKeys;\n  }\n\n  async getProviderKey(providerId: string): Promise<SymmetricCryptoKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const providerKeys = await this.getProviderKeys();\n    if (providerKeys == null || !providerKeys.has(providerId)) {\n      return null;\n    }\n\n    return providerKeys.get(providerId);\n  }\n\n  async hasKey(): Promise<boolean> {\n    return (\n      (await this.hasKeyInMemory()) ||\n      (await this.hasKeyStored(KeySuffixOptions.Auto)) ||\n      (await this.hasKeyStored(KeySuffixOptions.Biometric))\n    );\n  }\n\n  async hasKeyInMemory(userId?: string): Promise<boolean> {\n    return (await this.stateService.getCryptoMasterKey({ userId: userId })) != null;\n  }\n\n  async hasKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto:\n        return (await this.stateService.getCryptoMasterKeyAuto({ userId: userId })) != null;\n      case KeySuffixOptions.Biometric:\n        return (await this.stateService.hasCryptoMasterKeyBiometric({ userId: userId })) === true;\n      default:\n        return false;\n    }\n  }\n\n  async hasEncKey(): Promise<boolean> {\n    return (await this.stateService.getEncryptedCryptoSymmetricKey()) != null;\n  }\n\n  async clearKey(clearSecretStorage = true, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(null, { userId: userId });\n    await this.stateService.setLegacyEtmKey(null, { userId: userId });\n    if (clearSecretStorage) {\n      await this.clearSecretKeyStore(userId);\n    }\n  }\n\n  async clearStoredKey(keySuffix: KeySuffixOptions) {\n    keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.setCryptoMasterKeyAuto(null)\n      : await this.stateService.setCryptoMasterKeyBiometric(null);\n  }\n\n  async clearKeyHash(userId?: string): Promise<any> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async clearEncKey(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCryptoSymmetricKey(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedCryptoSymmetricKey(null, { userId: userId });\n    }\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: string): Promise<any> {\n    const keysToClear: Promise<void>[] = [\n      this.stateService.setDecryptedPrivateKey(null, { userId: userId }),\n      this.stateService.setPublicKey(null, { userId: userId }),\n    ];\n    if (!memoryOnly) {\n      keysToClear.push(this.stateService.setEncryptedPrivateKey(null, { userId: userId }));\n    }\n    return Promise.all(keysToClear);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedOrganizationKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedOrganizationKeys(null, { userId: userId });\n    }\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedProviderKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedProviderKeys(null, { userId: userId });\n    }\n  }\n\n  async clearPinProtectedKey(userId?: string): Promise<any> {\n    return await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n  }\n\n  async clearKeys(userId?: string): Promise<any> {\n    await this.clearKey(true, userId);\n    await this.clearKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearEncKey(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinProtectedKey(userId);\n  }\n\n  async toggleKey(): Promise<any> {\n    const key = await this.getKey();\n\n    await this.setKey(key);\n  }\n\n  async makeKey(\n    password: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    let key: ArrayBuffer = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfIterations == null) {\n        kdfIterations = 5000;\n      } else if (kdfIterations < 5000) {\n        throw new Error(\"PBKDF2 iteration minimum is 5000.\");\n      }\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfIterations);\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  async makeKeyFromPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    protectedKeyCs: EncString = null\n  ): Promise<SymmetricCryptoKey> {\n    if (protectedKeyCs == null) {\n      const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedKey == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      protectedKeyCs = new EncString(pinProtectedKey);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfIterations);\n    const decKey = await this.decryptToBytes(protectedKeyCs, pinKey);\n    return new SymmetricCryptoKey(decKey);\n  }\n\n  async makeShareKey(): Promise<[EncString, SymmetricCryptoKey]> {\n    const shareKey = await this.cryptoFunctionService.randomBytes(64);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey, publicKey);\n    return [encShareKey, new SymmetricCryptoKey(shareKey)];\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async makePinKey(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    const pinKey = await this.makeKey(pin, salt, kdf, kdfIterations);\n    return await this.stretchKey(pinKey);\n  }\n\n  async makeSendKey(keyMaterial: ArrayBuffer): Promise<SymmetricCryptoKey> {\n    const sendKey = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(sendKey);\n  }\n\n  async hashPassword(\n    password: string,\n    key: SymmetricCryptoKey,\n    hashPurpose?: HashPurpose\n  ): Promise<string> {\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async makeEncKey(key: SymmetricCryptoKey): Promise<[SymmetricCryptoKey, EncString]> {\n    const theKey = await this.getKeyForEncryption(key);\n    const encKey = await this.cryptoFunctionService.randomBytes(64);\n    return this.buildEncKey(theKey, encKey);\n  }\n\n  async remakeEncKey(\n    key: SymmetricCryptoKey,\n    encKey?: SymmetricCryptoKey\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (encKey == null) {\n      encKey = await this.getEncKey();\n    }\n    return this.buildEncKey(key, encKey.key);\n  }\n\n  /**\n   * @deprecated June 22 2022: This method has been moved to encryptService.\n   * All callers should use this service to grab the relevant key and use encryptService for encryption instead.\n   * This method will be removed once all existing code has been refactored to use encryptService.\n   */\n  async encrypt(plainValue: string | ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncString> {\n    key = await this.getKeyForEncryption(key);\n\n    return await this.encryptService.encrypt(plainValue, key);\n  }\n\n  async encryptToBytes(plainValue: ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes.buffer);\n  }\n\n  async rsaEncrypt(data: ArrayBuffer, publicKey?: ArrayBuffer): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: ArrayBuffer): Promise<ArrayBuffer> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]).buffer;\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    const iv = Utils.fromB64ToArray(encString.iv).buffer;\n    const data = Utils.fromB64ToArray(encString.data).buffer;\n    const mac = encString.mac ? Utils.fromB64ToArray(encString.mac).buffer : null;\n    const decipher = await this.aesDecryptToBytes(encString.encryptionType, data, iv, mac, key);\n    if (decipher == null) {\n      return null;\n    }\n\n    return decipher;\n  }\n\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    key = await this.getKeyForEncryption(key);\n    key = await this.resolveLegacyKey(encString.encryptionType, key);\n    return await this.encryptService.decryptToUtf8(encString, key);\n  }\n\n  async decryptFromBytes(encBuf: ArrayBuffer, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (encBuf == null) {\n      throw new Error(\"no encBuf.\");\n    }\n\n    const encBytes = new Uint8Array(encBuf);\n    const encType = encBytes[0];\n    let ctBytes: Uint8Array = null;\n    let ivBytes: Uint8Array = null;\n    let macBytes: Uint8Array = null;\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encBytes.length <= 49) {\n          // 1 + 16 + 32 + ctLength\n          return null;\n        }\n\n        ivBytes = encBytes.slice(1, 17);\n        macBytes = encBytes.slice(17, 49);\n        ctBytes = encBytes.slice(49);\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encBytes.length <= 17) {\n          // 1 + 16 + ctLength\n          return null;\n        }\n\n        ivBytes = encBytes.slice(1, 17);\n        ctBytes = encBytes.slice(17);\n        break;\n      default:\n        return null;\n    }\n\n    return await this.aesDecryptToBytes(\n      encType,\n      ctBytes.buffer,\n      ivBytes.buffer,\n      macBytes != null ? macBytes.buffer : null,\n      key\n    );\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  async validateKey(key: SymmetricCryptoKey) {\n    try {\n      const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n      const encKey = await this.getEncKeyHelper(key);\n      if (encPrivateKey == null || encKey == null) {\n        return false;\n      }\n\n      const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), encKey);\n      await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Helpers\n  protected async storeKey(key: SymmetricCryptoKey, userId?: string) {\n    if (await this.shouldStoreKey(KeySuffixOptions.Auto, userId)) {\n      await this.stateService.setCryptoMasterKeyAuto(key.keyB64, { userId: userId });\n    } else if (await this.shouldStoreKey(KeySuffixOptions.Biometric, userId)) {\n      await this.stateService.setCryptoMasterKeyBiometric(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n      await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: string) {\n    let shouldStoreKey = false;\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n      shouldStoreKey = vaultTimeout == null;\n    } else if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlock = await this.stateService.getBiometricUnlock({ userId: userId });\n      shouldStoreKey = biometricUnlock && this.platformUtilService.supportsSecureStorage();\n    }\n    return shouldStoreKey;\n  }\n\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string) {\n    return keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.getCryptoMasterKeyAuto({ userId: userId })\n      : await this.stateService.getCryptoMasterKeyBiometric({ userId: userId });\n  }\n\n  /**\n   * @deprecated June 22 2022: This method has been moved to encryptService.\n   * All callers should use encryptService instead. This method will be removed once all existing code has been refactored to use encryptService.\n   */\n  private async aesEncrypt(data: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = await this.getKeyForEncryption(key);\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private async aesDecryptToBytes(\n    encType: EncryptionType,\n    data: ArrayBuffer,\n    iv: ArrayBuffer,\n    mac: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<ArrayBuffer> {\n    const keyForEnc = await this.getKeyForEncryption(key);\n    const theKey = await this.resolveLegacyKey(encType, keyForEnc);\n\n    if (theKey.macKey != null && mac == null) {\n      return null;\n    }\n\n    if (theKey.encType !== encType) {\n      return null;\n    }\n\n    if (theKey.macKey != null && mac != null) {\n      const macData = new Uint8Array(iv.byteLength + data.byteLength);\n      macData.set(new Uint8Array(iv), 0);\n      macData.set(new Uint8Array(data), iv.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(\n        macData.buffer,\n        theKey.macKey,\n        \"sha256\"\n      );\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(mac, computedMac);\n      if (!macsMatch) {\n        this.logService.error(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecrypt(data, iv, theKey.encKey);\n  }\n\n  private async getKeyForEncryption(key?: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    if (key != null) {\n      return key;\n    }\n\n    const encKey = await this.getEncKey();\n    if (encKey != null) {\n      return encKey;\n    }\n\n    return await this.getKey();\n  }\n\n  private async resolveLegacyKey(\n    encType: EncryptionType,\n    key: SymmetricCryptoKey\n  ): Promise<SymmetricCryptoKey> {\n    if (\n      encType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      // Old encrypt-then-mac scheme, make a new key\n      let legacyKey = await this.stateService.getLegacyEtmKey();\n      if (legacyKey == null) {\n        legacyKey = new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n        await this.stateService.setLegacyEtmKey(legacyKey);\n      }\n      return legacyKey;\n    }\n\n    return key;\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey.buffer);\n  }\n\n  private async hashPhrase(hash: ArrayBuffer, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EEFLongWordList.length);\n      hashNumber = hashNumber.divide(EEFLongWordList.length);\n      phrase.push(EEFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildEncKey(\n    key: SymmetricCryptoKey,\n    encKey: ArrayBuffer\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    let encKeyEnc: EncString = null;\n    if (key.key.byteLength === 32) {\n      const newKey = await this.stretchKey(key);\n      encKeyEnc = await this.encrypt(encKey, newKey);\n    } else if (key.key.byteLength === 64) {\n      encKeyEnc = await this.encrypt(encKey, key);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(encKey), encKeyEnc];\n  }\n\n  private async clearSecretKeyStore(userId?: string): Promise<void> {\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n  }\n\n  private async getEncKeyHelper(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getDecryptedCryptoSymmetricKey();\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    const encKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    if (encKey == null) {\n      return null;\n    }\n\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (key == null) {\n      return null;\n    }\n\n    let decEncKey: ArrayBuffer;\n    const encKeyCipher = new EncString(encKey);\n    if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_B64) {\n      decEncKey = await this.decryptToBytes(encKeyCipher, key);\n    } else if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(key);\n      decEncKey = await this.decryptToBytes(encKeyCipher, newKey);\n    } else {\n      throw new Error(\"Unsupported encKey type.\");\n    }\n    if (decEncKey == null) {\n      return null;\n    }\n    const symmetricCryptoKey = new SymmetricCryptoKey(decEncKey);\n    await this.stateService.setDecryptedCryptoSymmetricKey(symmetricCryptoKey);\n    return symmetricCryptoKey;\n  }\n}\n","import { KeySuffixOptions } from \"@bitwarden/common/enums/keySuffixOptions\";\nimport { CryptoService } from \"@bitwarden/common/services/crypto.service\";\n\nexport class BrowserCryptoService extends CryptoService {\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions) {\n    if (keySuffix === \"biometric\") {\n      await this.platformUtilService.authenticateBiometric();\n      return (await this.getKey())?.keyB64;\n    }\n\n    return await super.retrieveKeyFromStorage(keySuffix);\n  }\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  Mobile = \"mobile\",\n  Cli = \"cli\",\n  DirectoryConnector = \"connector\",\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\n\nexport default abstract class AbstractChromeStorageService implements AbstractStorageService {\n  protected abstract chromeStorageApi: any;\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return new Promise<void>((resolve) => {\n        this.chromeStorageApi.remove(key, () => {\n          resolve();\n        });\n      });\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import AbstractChromeStorageService from \"./abstractChromeStorageApi.service\";\n\nexport default class BrowserLocalStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi: any = chrome.storage.local;\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    chrome.runtime.sendMessage(message);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { ClientType } from \"@bitwarden/common/enums/clientType\";\nimport { DeviceType } from \"@bitwarden/common/enums/deviceType\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst DialogPromiseExpiration = 600000; // 10 minutes\n\nexport default class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private showDialogResolves = new Map<number, { resolve: (value: boolean) => void; date: Date }>();\n  private passwordDialogResolves = new Map<\n    number,\n    { tryResolve: (canceled: boolean, password: string) => Promise<boolean>; date: Date }\n  >();\n  private deviceCache: DeviceType = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private stateService: StateService,\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>\n  ) {}\n\n  getDevice(): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    ) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (\n      (!!(window as any).opr && !!opr.addons) ||\n      !!(window as any).opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    ) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (navigator.userAgent.indexOf(\" Edg/\") !== -1) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (navigator.userAgent.indexOf(\" Vivaldi/\") !== -1) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if ((window as any).chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (navigator.userAgent.indexOf(\" Safari/\") !== -1) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  async isViewOpen(): Promise<boolean> {\n    if (await BrowserApi.isPopupOpen()) {\n      return true;\n    }\n\n    if (this.isSafari()) {\n      return false;\n    }\n\n    const sidebarView = this.sidebarViewName();\n    const sidebarOpen =\n      sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;\n    if (sidebarOpen) {\n      return true;\n    }\n\n    const tabOpen = chrome.extension.getViews({ type: \"tab\" }).length > 0;\n    return tabOpen;\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n\n  showDialog(\n    body: string,\n    title?: string,\n    confirmText?: string,\n    cancelText?: string,\n    type?: string,\n    bodyIsHtml = false\n  ) {\n    const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.messagingService.send(\"showDialog\", {\n      text: bodyIsHtml ? null : body,\n      html: bodyIsHtml ? body : null,\n      title: title,\n      confirmText: confirmText,\n      cancelText: cancelText,\n      type: type,\n      dialogId: dialogId,\n    });\n    return new Promise<boolean>((resolve) => {\n      this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });\n    });\n  }\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  copyToClipboard(text: string, options?: any): void {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n    const clearing = options ? !!options.clearing : false;\n    const clearMs: number = options && options.clearMs ? options.clearMs : null;\n\n    if (this.isSafari()) {\n      SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.writeText\n    ) {\n      (win as any).navigator.clipboard.writeText(text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if ((win as any).clipboardData && (win as any).clipboardData.setData) {\n      // IE specific code path to prevent textarea being shown while dialog is visible.\n      (win as any).clipboardData.setData(\"Text\", text);\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"copy\")) {\n      if (this.isChrome() && text === \"\") {\n        text = \"\\u0000\";\n      }\n\n      const textarea = doc.createElement(\"textarea\");\n      textarea.textContent = text == null || text === \"\" ? \" \" : text;\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"copy\") && !clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Copy to clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n  }\n\n  async readFromClipboard(options?: any): Promise<string> {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.readText\n    ) {\n      return await (win as any).navigator.clipboard.readText();\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"paste\")) {\n      const textarea = doc.createElement(\"textarea\");\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.focus();\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"paste\")) {\n          return textarea.value;\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Read from clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n    return null;\n  }\n\n  resolveDialogPromise(dialogId: number, confirmed: boolean) {\n    if (this.showDialogResolves.has(dialogId)) {\n      const resolveObj = this.showDialogResolves.get(dialogId);\n      resolveObj.resolve(confirmed);\n      this.showDialogResolves.delete(dialogId);\n    }\n\n    // Clean up old promises\n    this.showDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.showDialogResolves.delete(key);\n      }\n    });\n  }\n\n  async resolvePasswordDialogPromise(\n    dialogId: number,\n    canceled: boolean,\n    password: string\n  ): Promise<boolean> {\n    let result = false;\n    if (this.passwordDialogResolves.has(dialogId)) {\n      const resolveObj = this.passwordDialogResolves.get(dialogId);\n      if (await resolveObj.tryResolve(canceled, password)) {\n        this.passwordDialogResolves.delete(dialogId);\n        result = true;\n      }\n    }\n\n    // Clean up old promises\n    this.passwordDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.passwordDialogResolves.delete(key);\n      }\n    });\n\n    return result;\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"android\") {\n      return false;\n    }\n\n    if (this.isFirefox()) {\n      return parseInt((await browser.runtime.getBrowserInfo()).version.split(\".\")[0], 10) >= 87;\n    }\n\n    return true;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  sidebarViewName(): string {\n    if ((window as any).chrome.sidebarAction && this.isFirefox()) {\n      return \"sidebar\";\n    } else if (this.isOpera() && typeof opr !== \"undefined\" && opr.sidebarAction) {\n      return \"sidebar_panel\";\n    }\n\n    return null;\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n}\n","import { I18nService as BaseI18nService } from \"@bitwarden/common/services/i18n.service\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string) {\n    super(systemLanguage, null, async (formattedLocale: string) => {\n      // Deprecated\n      const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n      return await file.json();\n    });\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"nb\",\n      \"nl\",\n      \"nn\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { Observable, ReplaySubject } from \"rxjs\";\n\nimport { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\n\nexport class I18nService implements I18nServiceAbstraction {\n  private _locale = new ReplaySubject<string>(1);\n  locale$: Observable<string> = this._locale.asObservable();\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.translationLocale = locale != null ? locale : this.systemLanguage;\n    this._locale.next(this.translationLocale);\n\n    try {\n      this.collator = new Intl.Collator(this.translationLocale, {\n        numeric: true,\n        sensitivity: \"base\",\n      });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.supportedTranslationLocales[0];\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.supportedTranslationLocales[0]) {\n        await this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1);\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2);\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3);\n      }\n    }\n\n    return result;\n  }\n\n  private async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent\n          );\n        }\n      }\n    }\n  }\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstractKeyGeneration.service\";\n\nexport class KeyGenerationService implements AbstractKeyGenerationService {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async makeEphemeralKey(numBytes = 16): Promise<SymmetricCryptoKey> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(numBytes);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-ephemeral\",\n      \"ephemeral\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(key);\n  }\n}\n","import AbstractChromeStorageService from \"./abstractChromeStorageApi.service\";\n\nexport default class BrowserMemoryStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi: any = (chrome.storage as any).session;\n}\n","import { AbstractEncryptService } from \"@bitwarden/common/abstractions/abstractEncrypt.service\";\nimport { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstractKeyGeneration.service\";\nimport BrowserLocalStorageService from \"./browserLocalStorage.service\";\nimport BrowserMemoryStorageService from \"./browserMemoryStorage.service\";\n\nconst keys = {\n  encKey: \"localEncryptionKey\",\n  sessionKey: \"session\",\n};\n\nexport class LocalBackedSessionStorageService extends AbstractStorageService {\n  private cache = new Map<string, any>();\n  private localStorage = new BrowserLocalStorageService();\n  private sessionStorage = new BrowserMemoryStorageService();\n\n  constructor(\n    private encryptService: AbstractEncryptService,\n    private keyGenerationService: AbstractKeyGenerationService\n  ) {\n    super();\n  }\n\n  async get<T>(key: string): Promise<T> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n\n    const session = await this.getLocalSession(await this.getSessionEncKey());\n    if (session == null || !Object.keys(session).includes(key)) {\n      return null;\n    }\n\n    this.cache.set(key, session[key]);\n    return this.cache.get(key);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    if (obj == null) {\n      this.cache.delete(key);\n    } else {\n      this.cache.set(key, obj);\n    }\n\n    const sessionEncKey = await this.getSessionEncKey();\n    const localSession = (await this.getLocalSession(sessionEncKey)) ?? {};\n    localSession[key] = obj;\n    await this.setLocalSession(localSession, sessionEncKey);\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.save(key, null);\n  }\n\n  async getLocalSession(encKey: SymmetricCryptoKey): Promise<any> {\n    const local = await this.localStorage.get<string>(keys.sessionKey);\n\n    if (local == null) {\n      return null;\n    }\n\n    const sessionJson = await this.encryptService.decryptToUtf8(new EncString(local), encKey);\n    if (sessionJson == null) {\n      // Error with decryption -- session is lost, delete state and key and start over\n      await this.setSessionEncKey(null);\n      await this.localStorage.remove(keys.sessionKey);\n      return null;\n    }\n    return JSON.parse(sessionJson);\n  }\n\n  async setLocalSession(session: any, key: SymmetricCryptoKey) {\n    const jsonSession = JSON.stringify(session);\n    const encSession = await this.encryptService.encrypt(jsonSession, key);\n\n    if (encSession == null) {\n      return await this.localStorage.remove(keys.sessionKey);\n    }\n    await this.localStorage.save(keys.sessionKey, encSession.encryptedString);\n  }\n\n  async getSessionEncKey(): Promise<SymmetricCryptoKey> {\n    let storedKey = (await this.sessionStorage.get(keys.encKey)) as SymmetricCryptoKey;\n    if (storedKey == null || Object.keys(storedKey).length == 0) {\n      storedKey = await this.keyGenerationService.makeEphemeralKey();\n      await this.setSessionEncKey(storedKey);\n    }\n    return SymmetricCryptoKey.initFromJson(\n      Object.create(SymmetricCryptoKey.prototype, Object.getOwnPropertyDescriptors(storedKey))\n    );\n  }\n\n  async setSessionEncKey(input: SymmetricCryptoKey): Promise<void> {\n    if (input == null) {\n      await this.sessionStorage.remove(keys.encKey);\n    } else {\n      await this.sessionStorage.save(keys.encKey, input);\n    }\n  }\n}\n","import { StorageOptions } from \"../models/domain/storageOptions\";\n\nexport abstract class AbstractStorageService {\n  abstract get<T>(key: string, options?: StorageOptions): Promise<T>;\n  abstract has(key: string, options?: StorageOptions): Promise<boolean>;\n  abstract save<T>(key: string, obj: T, options?: StorageOptions): Promise<void>;\n  abstract remove(key: string, options?: StorageOptions): Promise<void>;\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","import { Account } from \"./account\";\nimport { GlobalState } from \"./globalState\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService as StateServiceAbstraction } from \"../abstractions/state.service\";\nimport { StateMigrationService } from \"../abstractions/stateMigration.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StorageLocation } from \"../enums/storageLocation\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountData, AccountSettings } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { Policy } from \"../models/domain/policy\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { SendView } from \"../models/view/sendView\";\n\nconst keys = {\n  state: \"state\",\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> implements StateServiceAbstraction<TAccount>\n{\n  accounts = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  activeAccount = new BehaviorSubject<string>(null);\n  activeAccountUnlocked = new BehaviorSubject<boolean>(false);\n\n  private hasBeenInited = false;\n  private isRecoveredSession = false;\n\n  private accountDiskCache = new Map<string, TAccount>();\n\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected memoryStorageService: AbstractStorageService,\n    protected logService: LogService,\n    protected stateMigrationService: StateMigrationService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected useAccountCache: boolean = true\n  ) {\n    // If the account gets changed, verify the new account is unlocked\n    this.activeAccount.subscribe(async (userId) => {\n      if (userId == null && this.activeAccountUnlocked.getValue() == false) {\n        return;\n      } else if (userId == null) {\n        this.activeAccountUnlocked.next(false);\n      }\n\n      // FIXME: This should be refactored into AuthService or a similar service,\n      //  as checking for the existance of the crypto key is a low level\n      //  implementation detail.\n      this.activeAccountUnlocked.next((await this.getCryptoMasterKey()) != null);\n    });\n  }\n\n  async init(): Promise<void> {\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (await this.stateMigrationService.needsMigration()) {\n      await this.stateMigrationService.migrate();\n    }\n\n    await this.state().then(async (state) => {\n      if (state == null) {\n        await this.setState(new State<TGlobalState, TAccount>(this.createGlobals()));\n      } else {\n        this.isRecoveredSession = true;\n      }\n    });\n    await this.initAccountState();\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    if (this.isRecoveredSession) {\n      return;\n    }\n\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts =\n        (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n      for (const i in state.authenticatedAccounts) {\n        if (i != null) {\n          await this.syncAccountFromDisk(state.authenticatedAccounts[i]);\n        }\n      }\n      const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n      if (storedActiveUser != null) {\n        state.activeUserId = storedActiveUser;\n      }\n      await this.pushAccounts();\n      this.activeAccount.next(state.activeUserId);\n\n      return state;\n    });\n  }\n\n  async syncAccountFromDisk(userId: string) {\n    if (userId == null) {\n      return;\n    }\n    await this.updateState(async (state) => {\n      state.accounts[userId] = this.createAccount();\n      const diskAccount = await this.getAccountFromDisk({ userId: userId });\n      state.accounts[userId].profile = diskAccount.profile;\n      return state;\n    });\n  }\n\n  async addAccount(account: TAccount) {\n    account = await this.setAccountEnvironmentUrls(account);\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts.push(account.profile.userId);\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n      state.accounts[account.profile.userId] = account;\n      return state;\n    });\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    await this.setActiveUser(account.profile.userId);\n    this.activeAccount.next(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    this.clearDecryptedDataForActiveUser();\n    await this.updateState(async (state) => {\n      state.activeUserId = userId;\n      await this.storageService.save(keys.activeUserId, userId);\n      this.activeAccount.next(state.activeUserId);\n      return state;\n    });\n\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultInMemoryOptions());\n    await this.deAuthenticateAccount(options.userId);\n    if (options.userId === (await this.state())?.activeUserId) {\n      await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n  }\n\n  async getAccessToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.accessToken;\n  }\n\n  async setAccessToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.accessToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.addEditCipherInfo;\n  }\n\n  async setAddEditCipherInfo(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getAlwaysShowDock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.alwaysShowDock ?? false\n    );\n  }\n\n  async setAlwaysShowDock(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.alwaysShowDock = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getApiKeyClientId(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.profile?.apiKeyClientId;\n  }\n\n  async setApiKeyClientId(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.profile.apiKeyClientId = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getApiKeyClientSecret(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.keys?.apiKeyClientSecret;\n  }\n\n  async setApiKeyClientSecret(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.keys.apiKeyClientSecret = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAutoConfirmFingerPrints(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoConfirmFingerPrints ?? false\n    );\n  }\n\n  async setAutoConfirmFingerprints(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoConfirmFingerPrints = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getAutoFillOnPageLoadDefault(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoFillOnPageLoadDefault ?? true\n    );\n  }\n\n  async setAutoFillOnPageLoadDefault(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoFillOnPageLoadDefault = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricAwaitingAcceptance(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricAwaitingAcceptance ?? false\n    );\n  }\n\n  async setBiometricAwaitingAcceptance(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricAwaitingAcceptance = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricLocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.settings?.biometricLocked ?? false\n    );\n  }\n\n  async setBiometricLocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.settings.biometricLocked = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getBiometricText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.biometricText;\n  }\n\n  async setBiometricText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricUnlock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.biometricUnlock ?? false\n    );\n  }\n\n  async setBiometricUnlock(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.biometricUnlock = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCanAccessPremium(options?: StorageOptions): Promise<boolean> {\n    if (!(await this.getIsAuthenticated(options))) {\n      return false;\n    }\n\n    return (\n      (await this.getHasPremiumPersonally(options)) ||\n      (await this.getHasPremiumFromOrganization(options))\n    );\n  }\n\n  async getHasPremiumPersonally(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.profile?.hasPremiumPersonally;\n  }\n\n  async setHasPremiumPersonally(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumPersonally = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getHasPremiumFromOrganization(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    if (account.profile?.hasPremiumFromOrganization) {\n      return true;\n    }\n\n    // TODO: older server versions won't send the hasPremiumFromOrganization flag, so we're keeping the old logic\n    // for backwards compatibility. It can be removed after everyone has upgraded.\n    const organizations = await this.getOrganizations(options);\n    if (organizations == null) {\n      return false;\n    }\n\n    for (const id of Object.keys(organizations)) {\n      const o = organizations[id];\n      if (o.enabled && o.usersGetPremium && !o.isProviderUser) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setHasPremiumFromOrganization(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumFromOrganization = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getClearClipboard(options?: StorageOptions): Promise<number> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.clearClipboard ?? null\n    );\n  }\n\n  async setClearClipboard(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.clearClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getCollapsedGroupings(options?: StorageOptions): Promise<string[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.collapsedGroupings;\n  }\n\n  async setCollapsedGroupings(value: string[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.collapsedGroupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototype(SymmetricCryptoKey, SymmetricCryptoKey.initFromJson)\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.cryptoMasterKey;\n  }\n\n  async setCryptoMasterKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoMasterKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n\n    if (options.userId == this.activeAccount.getValue()) {\n      const nextValue = value != null;\n\n      // Avoid emitting if we are already unlocked\n      if (this.activeAccountUnlocked.getValue() != nextValue) {\n        this.activeAccountUnlocked.next(nextValue);\n      }\n    }\n  }\n\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.autoKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyBiometric(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  async getDecodedToken(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.decodedToken;\n  }\n\n  async setDecodedToken(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.tokens.decodedToken = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(CipherView)\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(CollectionView)\n  async getDecryptedCollections(options?: StorageOptions): Promise<CollectionView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.collections?.decrypted;\n  }\n\n  async setDecryptedCollections(value: CollectionView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.collections.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(SymmetricCryptoKey, SymmetricCryptoKey.initFromJson)\n  async getDecryptedCryptoSymmetricKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.cryptoSymmetricKey?.decrypted;\n  }\n\n  async setDecryptedCryptoSymmetricKey(\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoSymmetricKey.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForMap(SymmetricCryptoKey, SymmetricCryptoKey.initFromJson)\n  async getDecryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.organizationKeys?.decrypted;\n  }\n\n  async setDecryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.organizationKeys.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(EncString)\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.settings?.pinProtected?.decrypted;\n  }\n\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(Policy)\n  async getDecryptedPolicies(options?: StorageOptions): Promise<Policy[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.policies?.decrypted;\n  }\n\n  async setDecryptedPolicies(value: Policy[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.policies.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedPrivateKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    const privateKey = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.privateKey;\n    let result = privateKey?.decrypted;\n    if (result == null && privateKey?.decryptedSerialized != null) {\n      result = Utils.fromByteStringToArray(privateKey.decryptedSerialized);\n    }\n    return result;\n  }\n\n  async setDecryptedPrivateKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.privateKey.decrypted = value;\n    account.keys.privateKey.decryptedSerialized =\n      value == null ? null : Utils.fromBufferToByteString(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForMap(SymmetricCryptoKey, SymmetricCryptoKey.initFromJson)\n  async getDecryptedProviderKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.providerKeys?.decrypted;\n  }\n\n  async setDecryptedProviderKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.providerKeys.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(SendView)\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDefaultUriMatch(options?: StorageOptions): Promise<UriMatchType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.defaultUriMatch;\n  }\n\n  async setDefaultUriMatch(value: UriMatchType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.defaultUriMatch = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAddLoginNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAddLoginNotification ?? false\n    );\n  }\n\n  async setDisableAddLoginNotification(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAddLoginNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoBiometricsPrompt(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoBiometricsPrompt ?? false\n    );\n  }\n\n  async setDisableAutoBiometricsPrompt(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoBiometricsPrompt = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoTotpCopy(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoTotpCopy ?? false\n    );\n  }\n\n  async setDisableAutoTotpCopy(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoTotpCopy = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableBadgeCounter(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableBadgeCounter ?? false\n    );\n  }\n\n  async setDisableBadgeCounter(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableBadgeCounter = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableChangedPasswordNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableChangedPasswordNotification ?? false\n    );\n  }\n\n  async setDisableChangedPasswordNotification(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableChangedPasswordNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableContextMenuItem(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableContextMenuItem ?? false\n    );\n  }\n\n  async setDisableContextMenuItem(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableContextMenuItem = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableFavicon(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.disableFavicon ?? false\n    );\n  }\n\n  async setDisableFavicon(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.disableFavicon = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowCardsCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowCardsCurrentTab ?? false\n    );\n  }\n\n  async setDontShowCardsCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowCardsCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowIdentitiesCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowIdentitiesCurrentTab ?? false\n    );\n  }\n\n  async setDontShowIdentitiesCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowIdentitiesCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.email = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAlwaysOnTop(options?: StorageOptions): Promise<boolean> {\n    const accountPreference = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.enableAlwaysOnTop;\n    const globalPreference = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.enableAlwaysOnTop;\n    return accountPreference ?? globalPreference ?? false;\n  }\n\n  async setEnableAlwaysOnTop(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAlwaysOnTop = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableAlwaysOnTop = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAutoFillOnPageLoad(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.enableAutoFillOnPageLoad ?? false\n    );\n  }\n\n  async setEnableAutoFillOnPageLoad(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAutoFillOnPageLoad = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBiometric(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBiometrics ?? false\n    );\n  }\n\n  async setEnableBiometric(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableCloseToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableCloseToTray ?? false\n    );\n  }\n\n  async setEnableCloseToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableCloseToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableFullWidth(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableFullWidth ?? false\n    );\n  }\n\n  async setEnableFullWidth(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableFullWidth = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableGravitars(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableGravitars ?? false\n    );\n  }\n\n  async setEnableGravitars(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableGravitars = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableMinimizeToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableMinimizeToTray ?? false\n    );\n  }\n\n  async setEnableMinimizeToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableMinimizeToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableStartToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableStartToTray ?? false\n    );\n  }\n\n  async setEnableStartToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableStartToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableTray ?? false\n    );\n  }\n\n  async setEnableTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CipherData)\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CollectionData)\n  async getEncryptedCollections(\n    options?: StorageOptions\n  ): Promise<{ [id: string]: CollectionData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.collections?.encrypted;\n  }\n\n  async setEncryptedCollections(\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.collections.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  async setEncryptedCryptoSymmetricKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.cryptoSymmetricKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(FolderData)\n  async getEncryptedFolders(options?: StorageOptions): Promise<{ [id: string]: FolderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.folders?.encrypted;\n  }\n\n  async setEncryptedFolders(\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.folders.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<{ [orgId: string]: EncryptedOrganizationKeyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.organizationKeys.encrypted;\n  }\n\n  async setEncryptedOrganizationKeys(\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.organizationKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(PolicyData)\n  async getEncryptedPolicies(options?: StorageOptions): Promise<{ [id: string]: PolicyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.policies?.encrypted;\n  }\n\n  async setEncryptedPolicies(\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.policies.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPrivateKey(options?: StorageOptions): Promise<string> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.keys?.privateKey?.encrypted;\n  }\n\n  async setEncryptedPrivateKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.privateKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedProviderKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.providerKeys?.encrypted;\n  }\n\n  async setEncryptedProviderKeys(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.providerKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(SendData)\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEntityId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityId;\n  }\n\n  async setEntityId(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityId = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEntityType(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityType;\n  }\n\n  async setEntityType(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  @withPrototype(EnvironmentUrls)\n  async getEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    if ((await this.state())?.activeUserId == null) {\n      return await this.getGlobalEnvironmentUrls(options);\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.environmentUrls ?? new EnvironmentUrls();\n  }\n\n  async setEnvironmentUrls(value: EnvironmentUrls, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting environement values before an account is active, while still allowing individual accounts to have their own environments.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.environmentUrls = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEquivalentDomains(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.equivalentDomains;\n  }\n\n  async setEquivalentDomains(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.equivalentDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(EventData)\n  async getEventCollection(options?: StorageOptions): Promise<EventData[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.eventCollection;\n  }\n\n  async setEventCollection(value: EventData[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.eventCollection = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getForcePasswordReset(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.forcePasswordReset ?? false\n    );\n  }\n\n  async setForcePasswordReset(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.forcePasswordReset = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (await this.getAccessToken(options)) != null && (await this.getUserId(options)) != null;\n  }\n\n  async getKdfIterations(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n  }\n\n  async setKdfIterations(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfIterations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  @withPrototype(SymmetricCryptoKey, SymmetricCryptoKey.initFromJson)\n  async getLegacyEtmKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.legacyEtmKey;\n  }\n\n  async setLegacyEtmKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.legacyEtmKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n  async setLocalData(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getLocale(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.locale;\n  }\n\n  async setLocale(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.locale = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getMainWindowSize(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.mainWindowSize;\n  }\n\n  async setMainWindowSize(value: number, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.mainWindowSize = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNeverDomains(options?: StorageOptions): Promise<{ [id: string]: any }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.neverDomains;\n  }\n\n  async setNeverDomains(value: { [id: string]: any }, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.neverDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometrics(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.noAutoPromptBiometrics ?? false\n    );\n  }\n\n  async setNoAutoPromptBiometrics(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometricsText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.noAutoPromptBiometricsText;\n  }\n\n  async setNoAutoPromptBiometricsText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometricsText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOpenAtLogin(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.openAtLogin ?? false\n    );\n  }\n\n  async setOpenAtLogin(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.openAtLogin = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getOrganizations(options?: StorageOptions): Promise<{ [id: string]: OrganizationData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.organizations;\n  }\n\n  async setOrganizations(\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.organizations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(ProviderData)\n  async getProviders(options?: StorageOptions): Promise<{ [id: string]: ProviderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.providers;\n  }\n\n  async setProviders(\n    value: { [id: string]: ProviderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.providers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPublicKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    const keys = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys;\n    let result = keys?.publicKey;\n    if (result == null && keys?.publicKeySerialized != null) {\n      result = Utils.fromByteStringToArray(keys.publicKeySerialized);\n    }\n    return result;\n  }\n\n  async setPublicKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.publicKey = value;\n    account.keys.publicKeySerialized = value == null ? null : Utils.fromBufferToByteString(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getRefreshToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.refreshToken;\n  }\n\n  async setRefreshToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.refreshToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getSettings(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.settings?.settings;\n  }\n\n  async setSettings(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.settings.settings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getSsoCodeVerifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoCodeVerifier;\n  }\n\n  async setSsoCodeVerifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoCodeVerifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getSsoOrgIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.ssoOrganizationIdentifier;\n  }\n\n  async setSsoOrganizationIdentifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.ssoOrganizationIdentifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSsoState(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoState;\n  }\n\n  async setSsoState(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoState = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getTheme(options?: StorageOptions): Promise<ThemeType> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.theme;\n  }\n\n  async setTheme(value: ThemeType, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.theme = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getTwoFactorToken(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.twoFactorToken;\n  }\n\n  async setTwoFactorToken(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.twoFactorToken = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    const globalVaultTimeoutAction = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.vaultTimeoutAction;\n    return accountVaultTimeoutAction ?? globalVaultTimeoutAction;\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getStateVersion(): Promise<number> {\n    return (await this.getGlobals(await this.defaultOnDiskLocalOptions())).stateVersion ?? 1;\n  }\n\n  async setStateVersion(value: number): Promise<void> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    globals.stateVersion = value;\n    await this.saveGlobals(globals, await this.defaultOnDiskOptions());\n  }\n\n  async getWindow(): Promise<WindowState> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    return globals?.window != null && Object.keys(globals.window).length > 0\n      ? globals.window\n      : new WindowState();\n  }\n\n  async setWindow(value: WindowState, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.window = value;\n    return await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = await this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    return globals ?? this.createGlobals();\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected async getGlobalsFromMemory(): Promise<TGlobalState> {\n    return (await this.state()).globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected async saveGlobalsToMemory(globals: TGlobalState): Promise<void> {\n    await this.updateState(async (state) => {\n      state.globals = globals;\n      return state;\n    });\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = await this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected async getAccountFromMemory(options: StorageOptions): Promise<TAccount> {\n    return await this.state().then(async (state) => {\n      if (state.accounts == null) {\n        return null;\n      }\n      return state.accounts[await this.getUserIdFromMemory(options)];\n    });\n  }\n\n  protected async getUserIdFromMemory(options: StorageOptions): Promise<string> {\n    return await this.state().then((state) => {\n      return options?.userId != null\n        ? state.accounts[options.userId]?.profile?.userId\n        : state.activeUserId;\n    });\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && (await this.state())?.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.get(options.userId);\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local })\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.set(options.userId, account);\n    }\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    }\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(options.userId);\n    }\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if (this.getAccountFromMemory({ userId: account.profile.userId }) !== null) {\n      await this.updateState((state) => {\n        return new Promise((resolve) => {\n          state.accounts[account.profile.userId] = account;\n          resolve(state);\n        });\n      });\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n    // EnvironmentUrls are set before authenticating and should override whatever is stored from any previous session\n    const environmentUrls = account.settings.environmentUrls;\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<AccountSettings>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n    account.settings.environmentUrls = environmentUrls;\n    if (account.settings.vaultTimeoutAction === \"logOut\" && account.settings.vaultTimeout != null) {\n      account.tokens.accessToken = null;\n      account.tokens.refreshToken = null;\n      account.profile.apiKeyClientId = null;\n      account.keys.apiKeyClientSecret = null;\n    }\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n  }\n  //\n\n  protected async pushAccounts(): Promise<void> {\n    await this.pruneInMemoryAccounts();\n    await this.state().then((state) => {\n      if (state.accounts == null || Object.keys(state.accounts).length < 1) {\n        this.accounts.next(null);\n        return;\n      }\n\n      this.accounts.next(state.accounts);\n    });\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected async defaultInMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Memory,\n      userId: (await this.state()).activeUserId,\n    };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: (await this.state())?.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected async removeAccountFromMemory(userId: string = null): Promise<void> {\n    await this.updateState(async (state) => {\n      userId = userId ?? state.activeUserId;\n      delete state.accounts[userId];\n\n      if (this.useAccountCache) {\n        this.accountDiskCache.delete(userId);\n      }\n\n      return state;\n    });\n  }\n\n  protected async pruneInMemoryAccounts() {\n    // We preserve settings for logged out accounts, but we don't want to consider them when thinking about active account state\n    for (const userId in (await this.state())?.accounts) {\n      if (!(await this.getIsAuthenticated({ userId: userId }))) {\n        await this.removeAccountFromMemory(userId);\n      }\n    }\n  }\n\n  // settings persist even on reset, and are not effected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = { settings: account.settings };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  protected async setAccountEnvironmentUrls(account: TAccount): Promise<TAccount> {\n    account.settings.environmentUrls = await this.getGlobalEnvironmentUrls();\n    return account;\n  }\n\n  protected async getGlobalEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).environmentUrls ?? new EnvironmentUrls();\n  }\n\n  protected async clearDecryptedDataForActiveUser(): Promise<void> {\n    await this.updateState(async (state) => {\n      const userId = state?.activeUserId;\n      if (userId != null && state?.accounts[userId]?.data != null) {\n        state.accounts[userId].data = new AccountData();\n      }\n\n      return state;\n    });\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string): Promise<void> {\n    await this.setAccessToken(null, { userId: userId });\n    await this.setLastActive(null, { userId: userId });\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts = state.authenticatedAccounts.filter((id) => id !== userId);\n\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n\n      return state;\n    });\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async dynamicallySetActiveUser() {\n    const accounts = (await this.state())?.accounts;\n    if (accounts == null || Object.keys(accounts).length < 1) {\n      await this.setActiveUser(null);\n      return;\n    }\n    for (const userId in accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        await this.setActiveUser(userId);\n        break;\n      }\n      await this.setActiveUser(null);\n    }\n  }\n\n  private async getTimeoutBasedStorageOptions(options?: StorageOptions): Promise<StorageOptions> {\n    const timeoutAction = await this.getVaultTimeoutAction({ userId: options?.userId });\n    const timeout = await this.getVaultTimeout({ userId: options?.userId });\n    const defaultOptions =\n      timeoutAction === \"logOut\" && timeout != null\n        ? await this.defaultInMemoryOptions()\n        : await this.defaultOnDiskOptions();\n    return this.reconcileOptions(options, defaultOptions);\n  }\n\n  private async saveSecureStorageKey(key: string, value: string, options?: StorageOptions) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n\n  protected state(): Promise<State<TGlobalState, TAccount>> {\n    return this.memoryStorageService.get<State<TGlobalState, TAccount>>(keys.state);\n  }\n\n  private async setState(state: State<TGlobalState, TAccount>): Promise<void> {\n    await this.memoryStorageService.save(keys.state, state);\n  }\n\n  protected async updateState(\n    stateUpdater: (state: State<TGlobalState, TAccount>) => Promise<State<TGlobalState, TAccount>>\n  ) {\n    await this.state().then(async (state) => {\n      const updatedState = await stateUpdater(state);\n      if (updatedState == null) {\n        throw new Error(\"Attempted to update state to null value\");\n      }\n\n      await this.setState(updatedState);\n    });\n  }\n}\n\nexport function withPrototype<T>(\n  constructor: new (...args: any[]) => T,\n  converter: (input: T) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<T> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          return result == null ||\n            result.constructor.name === constructor.prototype.constructor.name\n            ? converter(result as T)\n            : converter(\n                Object.create(constructor.prototype, Object.getOwnPropertyDescriptors(result)) as T\n              );\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForArrayMembers<T>(\n  memberConstructor: new (...args: any[]) => T,\n  memberConverter: (input: T) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T[]> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any[]> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (!(result instanceof Array)) {\n            throw new Error(\n              `Attempted to retrieve non array type from state as an array for method ${String(\n                propertyKey\n              )}`\n            );\n          } else {\n            return result.map((r) => {\n              return r == null ||\n                r.constructor.name === memberConstructor.prototype.constructor.name\n                ? memberConverter(r)\n                : memberConverter(\n                    Object.create(memberConstructor.prototype, Object.getOwnPropertyDescriptors(r))\n                  );\n            });\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForObjectValues<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: T) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<{ [key: string]: T }> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<{ [key: string]: T }> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else {\n            for (const [key, val] of Object.entries(result)) {\n              result[key] =\n                val == null || val.constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(val)\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(val)\n                      )\n                    );\n            }\n\n            return result as { [key: string]: T };\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForMap<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: T) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<Map<string, T>> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (result instanceof Map) {\n            return result;\n          } else {\n            for (const key in Object.keys(result)) {\n              result[key] =\n                result[key] == null ||\n                result[key].constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(result[key])\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(result[key])\n                      )\n                    );\n            }\n            return new Map<string, T>(Object.entries(result));\n          }\n        });\n      },\n    };\n  };\n}\n","import { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { StorageOptions } from \"@bitwarden/common/models/domain/storageOptions\";\nimport {\n  StateService as BaseStateService,\n  withPrototype,\n} from \"@bitwarden/common/services/state.service\";\n\nimport { Account } from \"../models/account\";\nimport { BrowserComponentState } from \"../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../models/browserSendComponentState\";\n\nimport { StateService as StateServiceAbstraction } from \"./abstractions/state.service\";\n\nexport class StateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(await this.defaultInMemoryOptions())) != null\n    );\n  }\n\n  @withPrototype(BrowserGroupingsComponentState)\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserGroupingsComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.groupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserComponentState)\n  async getBrowserCipherComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.ciphers;\n  }\n\n  async setBrowserCipherComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.ciphers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserSendComponentState)\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.send = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserComponentState)\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.sendType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n}\n","import { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport type VaultFilterFunction = (cipher: CipherView) => boolean;\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollection = false; // This is needed because of how the \"Unassigned\" collection works. It has a null id.\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollection = false;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n\n  buildFilter(): VaultFilterFunction {\n    return (cipher) => {\n      let cipherPassesFilter = true;\n      if (this.status === \"favorites\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.favorite;\n      }\n      if (this.status === \"trash\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.isDeleted;\n      }\n      if (this.cipherType != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.type === this.cipherType;\n      }\n      if (this.selectedFolder && this.selectedFolderId == null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId == null;\n      }\n      if (this.selectedFolder && this.selectedFolderId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId === this.selectedFolderId;\n      }\n      if (this.selectedCollection && this.selectedCollectionId == null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.organizationId != null &&\n          (cipher.collectionIds == null || cipher.collectionIds.length === 0);\n      }\n      if (this.selectedCollection && this.selectedCollectionId != null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.collectionIds != null && cipher.collectionIds.includes(this.selectedCollectionId);\n      }\n      if (this.selectedOrganizationId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === this.selectedOrganizationId;\n      }\n      if (this.myVaultOnly && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === null;\n      }\n      return cipherPassesFilter;\n    };\n  }\n}\n","import { TreeNode } from \"@bitwarden/common/models/domain/treeNode\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nexport class DynamicTreeNode<T extends CollectionView | FolderView> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\n\nimport { KdfType } from \"../enums/kdfType\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { Policy } from \"../models/domain/policy\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts: BehaviorSubject<{ [userId: string]: T }>;\n  activeAccount: BehaviorSubject<string>;\n\n  activeAccountUnlocked: Observable<boolean>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<void>;\n  init: () => Promise<void>;\n\n  getAccessToken: (options?: StorageOptions) => Promise<string>;\n  setAccessToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<any>;\n  setAddEditCipherInfo: (value: any, options?: StorageOptions) => Promise<void>;\n  getAlwaysShowDock: (options?: StorageOptions) => Promise<boolean>;\n  setAlwaysShowDock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientId: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientId: (value: string, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientSecret: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientSecret: (value: string, options?: StorageOptions) => Promise<void>;\n  getAutoConfirmFingerPrints: (options?: StorageOptions) => Promise<boolean>;\n  setAutoConfirmFingerprints: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAutoFillOnPageLoadDefault: (options?: StorageOptions) => Promise<boolean>;\n  setAutoFillOnPageLoadDefault: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricAwaitingAcceptance: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricAwaitingAcceptance: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricLocked: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricLocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricText: (options?: StorageOptions) => Promise<string>;\n  setBiometricText: (value: string, options?: StorageOptions) => Promise<void>;\n  getBiometricUnlock: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricUnlock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCanAccessPremium: (options?: StorageOptions) => Promise<boolean>;\n  getHasPremiumPersonally: (options?: StorageOptions) => Promise<boolean>;\n  setHasPremiumPersonally: (value: boolean, options?: StorageOptions) => Promise<void>;\n  setHasPremiumFromOrganization: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getHasPremiumFromOrganization: (options?: StorageOptions) => Promise<boolean>;\n  getClearClipboard: (options?: StorageOptions) => Promise<number>;\n  setClearClipboard: (value: number, options?: StorageOptions) => Promise<void>;\n  getCollapsedGroupings: (options?: StorageOptions) => Promise<string[]>;\n  setCollapsedGroupings: (value: string[], options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setCryptoMasterKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyB64: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyB64: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setCryptoMasterKeyBiometric: (value: string, options?: StorageOptions) => Promise<void>;\n  getDecodedToken: (options?: StorageOptions) => Promise<any>;\n  setDecodedToken: (value: any, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCollections: (options?: StorageOptions) => Promise<CollectionView[]>;\n  setDecryptedCollections: (value: CollectionView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setDecryptedCryptoSymmetricKey: (\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  getDecryptedPolicies: (options?: StorageOptions) => Promise<Policy[]>;\n  setDecryptedPolicies: (value: Policy[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPrivateKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setDecryptedPrivateKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getDecryptedProviderKeys: (options?: StorageOptions) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedProviderKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDefaultUriMatch: (options?: StorageOptions) => Promise<UriMatchType>;\n  setDefaultUriMatch: (value: UriMatchType, options?: StorageOptions) => Promise<void>;\n  getDisableAddLoginNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAddLoginNotification: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoBiometricsPrompt: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoBiometricsPrompt: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoTotpCopy: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoTotpCopy: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableBadgeCounter: (options?: StorageOptions) => Promise<boolean>;\n  setDisableBadgeCounter: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableChangedPasswordNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableChangedPasswordNotification: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDisableContextMenuItem: (options?: StorageOptions) => Promise<boolean>;\n  setDisableContextMenuItem: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableFavicon: (options?: StorageOptions) => Promise<boolean>;\n  setDisableFavicon: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowCardsCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowCardsCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowIdentitiesCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowIdentitiesCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAlwaysOnTop: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAlwaysOnTop: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAutoFillOnPageLoad: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAutoFillOnPageLoad: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBiometric: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableCloseToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableCloseToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableFullWidth: (options?: StorageOptions) => Promise<boolean>;\n  setEnableFullWidth: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableGravitars: (options?: StorageOptions) => Promise<boolean>;\n  setEnableGravitars: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableMinimizeToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableMinimizeToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableStartToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableStartToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCollections: (options?: StorageOptions) => Promise<{ [id: string]: CollectionData }>;\n  setEncryptedCollections: (\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedCryptoSymmetricKey: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  getEncryptedFolders: (options?: StorageOptions) => Promise<{ [id: string]: FolderData }>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  setEncryptedFolders: (\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<{ [orgId: string]: EncryptedOrganizationKeyData }>;\n  setEncryptedOrganizationKeys: (\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedPolicies: (options?: StorageOptions) => Promise<{ [id: string]: PolicyData }>;\n  setEncryptedPolicies: (\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPrivateKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPrivateKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedProviderKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedProviderKeys: (value: any, options?: StorageOptions) => Promise<void>;\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEntityId: (options?: StorageOptions) => Promise<string>;\n  setEntityId: (value: string, options?: StorageOptions) => Promise<void>;\n  getEntityType: (options?: StorageOptions) => Promise<any>;\n  setEntityType: (value: string, options?: StorageOptions) => Promise<void>;\n  getEnvironmentUrls: (options?: StorageOptions) => Promise<EnvironmentUrls>;\n  setEnvironmentUrls: (value: EnvironmentUrls, options?: StorageOptions) => Promise<void>;\n  getEquivalentDomains: (options?: StorageOptions) => Promise<any>;\n  setEquivalentDomains: (value: string, options?: StorageOptions) => Promise<void>;\n  getEventCollection: (options?: StorageOptions) => Promise<EventData[]>;\n  setEventCollection: (value: EventData[], options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForcePasswordReset: (options?: StorageOptions) => Promise<boolean>;\n  setForcePasswordReset: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfIterations: (options?: StorageOptions) => Promise<number>;\n  setKdfIterations: (value: number, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLegacyEtmKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setLegacyEtmKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<any>;\n  setLocalData: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocale: (options?: StorageOptions) => Promise<string>;\n  setLocale: (value: string, options?: StorageOptions) => Promise<void>;\n  getMainWindowSize: (options?: StorageOptions) => Promise<number>;\n  setMainWindowSize: (value: number, options?: StorageOptions) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNeverDomains: (options?: StorageOptions) => Promise<{ [id: string]: any }>;\n  setNeverDomains: (value: { [id: string]: any }, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometrics: (options?: StorageOptions) => Promise<boolean>;\n  setNoAutoPromptBiometrics: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometricsText: (options?: StorageOptions) => Promise<string>;\n  setNoAutoPromptBiometricsText: (value: string, options?: StorageOptions) => Promise<void>;\n  getOpenAtLogin: (options?: StorageOptions) => Promise<boolean>;\n  setOpenAtLogin: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getOrganizations: (options?: StorageOptions) => Promise<{ [id: string]: OrganizationData }>;\n  setOrganizations: (\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setPasswordGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setUsernameGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<any>;\n  setGeneratorOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getProviders: (options?: StorageOptions) => Promise<{ [id: string]: ProviderData }>;\n  setProviders: (value: { [id: string]: ProviderData }, options?: StorageOptions) => Promise<void>;\n  getPublicKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setPublicKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getRefreshToken: (options?: StorageOptions) => Promise<string>;\n  setRefreshToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  getSettings: (options?: StorageOptions) => Promise<any>;\n  setSettings: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoCodeVerifier: (options?: StorageOptions) => Promise<string>;\n  setSsoCodeVerifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoOrgIdentifier: (options?: StorageOptions) => Promise<string>;\n  setSsoOrganizationIdentifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoState: (options?: StorageOptions) => Promise<string>;\n  setSsoState: (value: string, options?: StorageOptions) => Promise<void>;\n  getTheme: (options?: StorageOptions) => Promise<ThemeType>;\n  setTheme: (value: ThemeType, options?: StorageOptions) => Promise<void>;\n  getTwoFactorToken: (options?: StorageOptions) => Promise<string>;\n  setTwoFactorToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (vaule: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getStateVersion: () => Promise<number>;\n  setStateVersion: (value: number) => Promise<void>;\n  getWindow: () => Promise<WindowState>;\n  setWindow: (value: WindowState) => Promise<void>;\n}\n","import { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport abstract class OrganizationService {\n  get: (id: string) => Promise<Organization>;\n  getByIdentifier: (identifier: string) => Promise<Organization>;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  save: (orgs: { [id: string]: OrganizationData }) => Promise<any>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: (userId?: string) => Promise<boolean>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { FolderData } from \"../../models/data/folderData\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { FolderView } from \"../../models/view/folderView\";\n\nexport abstract class FolderService {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  clearCache: () => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getAllDecryptedFromState: () => Promise<FolderView[]>;\n}\n\nexport abstract class InternalFolderService extends FolderService {\n  upsert: (folder: FolderData | FolderData[]) => Promise<void>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<void>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher?: Cipher\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchType\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  saveWithServer: (cipher: Cipher) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n  deleteManyWithServer: (ids: string[]) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: any, b: any) => number;\n  sortCiphersByLastUsedThenName: (a: any, b: any) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[]) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) => Promise<any>;\n  restoreWithServer: (id: string) => Promise<any>;\n  restoreManyWithServer: (ids: string[]) => Promise<any>;\n}\n","import { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nexport abstract class CollectionService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { PolicyType } from \"../enums/policyType\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\n\nexport abstract class PolicyService {\n  clearCache: () => void;\n  getAll: (type?: PolicyType, userId?: string) => Promise<Policy[]>;\n  getPolicyForOrganization: (policyType: PolicyType, organizationId: string) => Promise<Policy>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<any>;\n  clear: (userId?: string) => Promise<any>;\n  getMasterPasswordPoliciesForInvitedUsers: (orgId: string) => Promise<MasterPasswordPolicyOptions>;\n  getMasterPasswordPolicyOptions: (policies?: Policy[]) => Promise<MasterPasswordPolicyOptions>;\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions\n  ) => boolean;\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string\n  ) => [ResetPasswordPolicyOptions, boolean];\n  mapPoliciesFromToken: (policiesResponse: ListResponse<PolicyResponse>) => Policy[];\n  policyAppliesToUser: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) => Promise<boolean>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { firstValueFrom, from, mergeMap, Observable } from \"rxjs\";\n\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { ServiceUtils } from \"@bitwarden/common/misc/serviceUtils\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/treeNode\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nimport { DynamicTreeNode } from \"./models/dynamic-tree-node.model\";\n\nconst NestingDelimiter = \"/\";\n\n@Injectable()\nexport class VaultFilterService {\n  constructor(\n    protected stateService: StateService,\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.stateService.setCollapsedGroupings(Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return new Set(await this.stateService.getCollapsedGroupings());\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    return await this.organizationService.getAll();\n  }\n\n  buildNestedFolders(organizationId?: string): Observable<DynamicTreeNode<FolderView>> {\n    const transformation = async (storedFolders: FolderView[]) => {\n      let folders: FolderView[];\n      if (organizationId != null) {\n        const ciphers = await this.cipherService.getAllDecrypted();\n        const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n        folders = storedFolders.filter(\n          (f) =>\n            orgCiphers.filter((oc) => oc.folderId == f.id).length > 0 ||\n            ciphers.filter((c) => c.folderId == f.id).length < 1\n        );\n      } else {\n        folders = storedFolders;\n      }\n      const nestedFolders = await this.getAllFoldersNested(folders);\n      return new DynamicTreeNode<FolderView>({\n        fullList: folders,\n        nestedList: nestedFolders,\n      });\n    };\n\n    return this.folderService.folderViews$.pipe(\n      mergeMap((folders) => from(transformation(folders)))\n    );\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.SingleOrg);\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership);\n  }\n\n  protected async getAllFoldersNested(folders: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getFolderNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllFoldersNested(\n      await firstValueFrom(this.folderService.folderViews$)\n    );\n    return ServiceUtils.getTreeNodeObject(folders, id) as TreeNode<FolderView>;\n  }\n}\n","import { VaultFilter } from \"@bitwarden/angular/modules/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"@bitwarden/angular/modules/vault-filter/vault-filter.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"@bitwarden/common/services/vaultTimeout.service\";\n\nimport { SafariApp } from \"../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { AuthService } from \"../abstractions/auth.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { PolicyService } from \"../abstractions/policy.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { PolicyType } from \"../enums/policyType\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    if (await this.platformUtilsService.isViewOpen()) {\n      return;\n    }\n\n    for (const userId in this.stateService.accounts.getValue()) {\n      if (userId != null && (await this.shouldLock(userId))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(allowSoftLock = false, userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    if (await this.keyConnectorService.getUsesKeyConnector()) {\n      const pinSet = await this.isPinLockSet();\n      const pinLock =\n        (pinSet[0] && (await this.stateService.getDecryptedPinProtected()) != null) || pinSet[1];\n\n      if (!pinLock && !(await this.isBiometricLockSet())) {\n        await this.logOut(userId);\n      }\n    }\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      await this.folderService.clearCache();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setBiometricLocked(true, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearKey(false, userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n    await this.cryptoService.clearEncKey(true, userId);\n\n    await this.cipherService.clearCache(userId);\n    await this.collectionService.clearCache(userId);\n\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  async setVaultTimeoutOptions(timeout: number, action: string): Promise<void> {\n    await this.stateService.setVaultTimeout(timeout);\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const token = await this.tokenService.getToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n    if ((timeout != null || timeout === 0) && action === \"logOut\" && action !== currentAction) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearToken();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setToken(token);\n    await this.tokenService.setRefreshToken(refreshToken);\n    await this.tokenService.setClientId(clientId);\n    await this.tokenService.setClientSecret(clientSecret);\n\n    await this.cryptoService.toggleKey();\n  }\n\n  async isPinLockSet(): Promise<[boolean, boolean]> {\n    const protectedPin = await this.stateService.getProtectedPin();\n    const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n    return [protectedPin != null, pinProtectedKey != null];\n  }\n\n  async isBiometricLockSet(): Promise<boolean> {\n    return await this.stateService.getBiometricUnlock();\n  }\n\n  async getVaultTimeout(userId?: string): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policy[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policy[0].data.minutes;\n      }\n\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId: userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n  }\n\n  private async shouldLock(userId: string): Promise<boolean> {\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n    timeoutAction === \"logOut\" ? await this.logOut(userId) : await this.lock(true, userId);\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\n      \"commands.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n          await this.processCommand(\n            msg.data.commandToRetry.msg.command,\n            msg.data.commandToRetry.sender\n          );\n        }\n\n        if (this.isVivaldi && msg.command === \"keyboardShortcutTriggered\" && msg.shortcut) {\n          await this.processCommand(msg.shortcut, sender);\n        }\n      }\n    );\n\n    if (!this.isVivaldi && chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock(true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    this.main.openPopup();\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class ContextMenusBackground {\n  private readonly noopCommandSuffix = \"noop\";\n  private contextMenus: any;\n\n  constructor(\n    private main: MainBackground,\n    private cipherService: CipherService,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private authService: AuthService,\n    private eventService: EventService,\n    private totpService: TotpService\n  ) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  async init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener(\n      async (info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) => {\n        if (info.menuItemId === \"generate-password\") {\n          await this.generatePasswordToClipboard();\n        } else if (info.menuItemId === \"copy-identifier\") {\n          await this.getClickedElement(tab, info.frameId);\n        } else if (\n          info.parentMenuItemId === \"autofill\" ||\n          info.parentMenuItemId === \"copy-username\" ||\n          info.parentMenuItemId === \"copy-password\" ||\n          info.parentMenuItemId === \"copy-totp\"\n        ) {\n          await this.cipherAction(tab, info);\n        }\n      }\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          await this.cipherAction(\n            msg.data.commandToRetry.sender.tab,\n            msg.data.commandToRetry.msg.data\n          );\n        }\n      }\n    );\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async getClickedElement(tab: chrome.tabs.Tab, frameId: number) {\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, { command: \"getClickedElement\" }, { frameId: frameId });\n  }\n\n  private async cipherAction(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    const id = info.menuItemId.split(\"_\")[1];\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: this.noopCommandSuffix, data: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    let cipher: CipherView;\n    if (id === this.noopCommandSuffix) {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(tab.url);\n      cipher = ciphers.find((c) => c.reprompt === CipherRepromptType.None);\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find((c) => c.id === id);\n    }\n\n    if (cipher == null) {\n      return;\n    }\n\n    if (info.parentMenuItemId === \"autofill\") {\n      await this.startAutofillPage(tab, cipher);\n    } else if (info.parentMenuItemId === \"copy-username\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });\n    } else if (info.parentMenuItemId === \"copy-password\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });\n      this.eventService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (info.parentMenuItemId === \"copy-totp\") {\n      const totpValue = await this.totpService.getCode(cipher.login.totp);\n      this.platformUtilsService.copyToClipboard(totpValue, { window: window });\n    }\n  }\n\n  private async startAutofillPage(tab: chrome.tabs.Tab, cipher: CipherView) {\n    this.main.loginToAutoFill = cipher;\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, {\n      command: \"collectPageDetails\",\n      tab: tab,\n      sender: \"contextMenu\",\n    });\n  }\n}\n","import { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vaultTimeout.service\";\n\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: any;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: StateService,\n    private notificationsService: NotificationsService\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(async (newState: string) => {\n        if (newState === \"locked\") {\n          // If the screen is locked or the screensaver activates\n          const timeout = await this.stateService.getVaultTimeout();\n          if (timeout === -2) {\n            // On System Lock vault timeout option\n            const action = await this.stateService.getVaultTimeoutAction();\n            if (action === \"logOut\") {\n              await this.vaultTimeoutService.logOut();\n            } else {\n              await this.vaultTimeoutService.lock(true);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { AppIdService } from \"@bitwarden/common/abstractions/appId.service\";\nimport { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: ArrayBuffer = null;\n  private publicKey: ArrayBuffer = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private i18nService: I18nService,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService\n  ) {\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        BrowserApi.reloadExtension(null);\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(\"startDesktop\");\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted.buffer,\n              this.privateKey,\n              EncryptionAlgorithm\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              this.stateService.setBiometricFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n              title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n              confirmText: this.i18nService.t(\"ok\"),\n              type: \"error\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(reason);\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      text: this.i18nService.t(\"nativeMessagingWrongUserDesc\"),\n      title: this.i18nService.t(\"nativeMessagingWrongUserTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"error\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      this.port.postMessage(message);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n        title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n        confirmText: this.i18nService.t(\"ok\"),\n        type: \"error\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret)\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        await this.stateService.setBiometricAwaitingAcceptance(null);\n\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotEnabledDesc\"),\n            title: this.i18nService.t(\"biometricsNotEnabledTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotSupportedDesc\"),\n            title: this.i18nService.t(\"biometricsNotSupportedTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        }\n\n        const enabled = await this.stateService.getBiometricUnlock();\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.stateService.setBiometricUnlock(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          await this.cryptoService.setKey(\n            new SymmetricCryptoKey(Utils.fromB64ToArray(message.keyB64).buffer)\n          );\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKey();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          await this.stateService.setBiometricLocked(false);\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = (\n      await this.cryptoService.getFingerprint(await this.stateService.getUserId(), this.publicKey)\n    ).join(\" \");\n\n    this.messagingService.send(\"showDialog\", {\n      html: `${this.i18nService.t(\n        \"desktopIntegrationVerificationText\"\n      )}<br><br><strong>${fingerprint}</strong>`,\n      title: this.i18nService.t(\"desktopSyncVerificationTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"warning\",\n    });\n  }\n}\n","export enum NotificationQueueMessageType {\n  AddLogin = 0,\n  ChangePassword = 1,\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { LoginUriView } from \"@bitwarden/common/models/view/loginUriView\";\nimport { LoginView } from \"@bitwarden/common/models/view/loginView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport AddChangePasswordQueueMessage from \"./models/addChangePasswordQueueMessage\";\nimport AddLoginQueueMessage from \"./models/addLoginQueueMessage\";\nimport AddLoginRuntimeMessage from \"./models/addLoginRuntimeMessage\";\nimport ChangePasswordRuntimeMessage from \"./models/changePasswordRuntimeMessage\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\nimport { NotificationQueueMessageType } from \"./models/notificationQueueMessageType\";\n\nexport default class NotificationBackground {\n  private notificationQueue: (AddLoginQueueMessage | AddChangePasswordQueueMessage)[] = [];\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: StateService\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    BrowserApi.messageListener(\n      \"notification.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender) => {\n        await this.processMessage(msg, sender);\n      }\n    );\n\n    this.cleanupNotificationQueue();\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"unlockCompleted\":\n        if (msg.data.target !== \"notification.background\") {\n          return;\n        }\n        await this.processMessage(msg.data.commandToRetry.msg, msg.data.commandToRetry.sender);\n        break;\n      case \"bgGetDataForTab\":\n        await this.getDataForTab(sender.tab, msg.responseCommand);\n        break;\n      case \"bgCloseNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n        break;\n      case \"bgAdjustNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", msg.data);\n        break;\n      case \"bgAddLogin\":\n        await this.addLogin(msg.login, sender.tab);\n        break;\n      case \"bgChangedPassword\":\n        await this.changedPassword(msg.data, sender.tab);\n        break;\n      case \"bgAddClose\":\n      case \"bgChangeClose\":\n        this.removeTabFromNotificationQueue(sender.tab);\n        break;\n      case \"bgAddSave\":\n      case \"bgChangeSave\":\n        if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n          const retryMessage: LockedVaultPendingNotificationsItem = {\n            commandToRetry: {\n              msg: msg,\n              sender: sender,\n            },\n            target: \"notification.background\",\n          };\n          await BrowserApi.tabSendMessageData(\n            sender.tab,\n            \"addToLockedVaultPendingNotifications\",\n            retryMessage\n          );\n          await BrowserApi.tabSendMessageData(sender.tab, \"promptForLogin\");\n          return;\n        }\n        await this.saveOrUpdateCredentials(sender.tab, msg.folder);\n        break;\n      case \"bgNeverSave\":\n        await this.saveNever(sender.tab);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"notificationBar\": {\n            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);\n            await BrowserApi.tabSendMessageData(msg.tab, \"notificationBarPageDetails\", {\n              details: msg.details,\n              forms: forms,\n            });\n            break;\n          }\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes\n  }\n\n  private doNotificationQueueCheck(tab: chrome.tabs.Tab): void {\n    if (tab == null) {\n      return;\n    }\n\n    const tabDomain = Utils.getDomain(tab.url);\n    if (tabDomain == null) {\n      return;\n    }\n\n    for (let i = 0; i < this.notificationQueue.length; i++) {\n      if (\n        this.notificationQueue[i].tabId !== tab.id ||\n        this.notificationQueue[i].domain !== tabDomain\n      ) {\n        continue;\n      }\n\n      if (this.notificationQueue[i].type === NotificationQueueMessageType.AddLogin) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"add\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.ChangePassword) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"change\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      }\n      break;\n    }\n  }\n\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tabId === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  private async addLogin(loginInfo: AddLoginRuntimeMessage, tab: chrome.tabs.Tab) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    let normalizedUsername = loginInfo.username;\n    if (normalizedUsername != null) {\n      normalizedUsername = normalizedUsername.toLowerCase();\n    }\n\n    const disabledAddLogin = await this.stateService.getDisableAddLoginNotification();\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername\n    );\n    if (usernameMatches.length === 0) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab);\n    } else if (\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      const disabledChangePassword =\n        await this.stateService.getDisableChangedPasswordNotification();\n      if (disabledChangePassword) {\n        return;\n      }\n      this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginRuntimeMessage,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async changedPassword(changeData: ChangePasswordRuntimeMessage, tab: chrome.tabs.Tab) {\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const changePasswordMessage = queueMessage as AddChangePasswordQueueMessage;\n        const cipher = await this.getDecryptedCipherById(changePasswordMessage.cipherId);\n        if (cipher == null) {\n          return;\n        }\n        await this.updateCipher(cipher, changePasswordMessage.newPassword);\n        return;\n      }\n\n      if (queueMessage.type === NotificationQueueMessageType.AddLogin) {\n        if (!queueMessage.wasVaultLocked) {\n          await this.createNewCipher(queueMessage as AddLoginQueueMessage, folderId);\n          BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n          return;\n        }\n\n        // If the vault was locked, check if a cipher needs updating instead of creating a new one\n        const addLoginMessage = queueMessage as AddLoginQueueMessage;\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(addLoginMessage.uri);\n        const usernameMatches = ciphers.filter(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === addLoginMessage.username\n        );\n\n        if (usernameMatches.length >= 1) {\n          await this.updateCipher(usernameMatches[0], addLoginMessage.password);\n          return;\n        }\n\n        await this.createNewCipher(addLoginMessage, folderId);\n        BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n      }\n    }\n  }\n\n  private async createNewCipher(queueMessage: AddLoginQueueMessage, folderId: string) {\n    const loginModel = new LoginView();\n    const loginUri = new LoginUriView();\n    loginUri.uri = queueMessage.uri;\n    loginModel.uris = [loginUri];\n    loginModel.username = queueMessage.username;\n    loginModel.password = queueMessage.password;\n    const model = new CipherView();\n    model.name = Utils.getHostname(queueMessage.uri) || queueMessage.domain;\n    model.name = model.name.replace(/^www\\./, \"\");\n    model.type = CipherType.Login;\n    model.login = loginModel;\n\n    if (!Utils.isNullOrWhitespace(folderId)) {\n      const folders = await firstValueFrom(this.folderService.folderViews$);\n      if (folders.some((x) => x.id === folderId)) {\n        model.folderId = folderId;\n      }\n    }\n\n    const cipher = await this.cipherService.encrypt(model);\n    await this.cipherService.saveWithServer(cipher);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt();\n    }\n    return null;\n  }\n\n  private async updateCipher(cipher: CipherView, newPassword: string) {\n    if (cipher != null && cipher.type === CipherType.Login) {\n      cipher.login.password = newPassword;\n      const newCipher = await this.cipherService.encrypt(cipher);\n      await this.cipherService.saveWithServer(newCipher);\n    }\n  }\n\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  private async getDataForTab(tab: chrome.tabs.Tab, responseCommand: string) {\n    const responseData: any = {};\n    if (responseCommand === \"notificationBarGetFoldersList\") {\n      responseData.folders = await firstValueFrom(this.folderService.folderViews$);\n    }\n\n    await BrowserApi.tabSendMessageData(tab, responseCommand, responseData);\n  }\n\n  private async allowPersonalOwnership(): Promise<boolean> {\n    return !(await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership));\n  }\n}\n","import { EnvironmentService } from \"@bitwarden/common/abstractions/environment.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { SystemService } from \"@bitwarden/common/abstractions/system.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsItem[] = [];\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private systemService: SystemService,\n    private environmentService: EnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = async (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => {\n      await this.processMessage(msg, sender, sendResponse);\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.isPrivateMode) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: any, sendResponse: any) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsItem;\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          await BrowserApi.closeLoginTab();\n\n          item = this.lockedVaultPendingNotifications.pop();\n          if (item.commandToRetry.sender?.tab?.id) {\n            await BrowserApi.focusSpecifiedTab(item.commandToRetry.sender.tab.id);\n          }\n        }\n\n        await this.main.setIcon();\n        await this.main.refreshBadgeAndMenu(false);\n        this.notificationsService.updateConnection(msg.command === \"unlocked\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => await this.main.refreshBadgeAndMenu(), 2000);\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"promptForLogin\":\n        await BrowserApi.createNewTab(\"popup/index.html?uilocation=popout\", true, true);\n        break;\n      case \"showDialogResolve\":\n        this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadgeAndMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\"\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n            }\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        try {\n          BrowserApi.createNewTab(\n            \"popup/index.html?uilocation=popout#/sso?code=\" +\n              encodeURIComponent(msg.code) +\n              \"&state=\" +\n              encodeURIComponent(msg.state)\n          );\n        } catch {\n          this.logService.error(\"Unable to open sso popout tab\");\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        const params =\n          `webAuthnResponse=${encodeURIComponent(msg.data)};` +\n          `remember=${encodeURIComponent(msg.remember)}`;\n        BrowserApi.createNewTab(\n          `popup/index.html?uilocation=popout#/2fa;${params}`,\n          undefined,\n          false\n        );\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          dialogId: \"emailVerificationRequired\",\n          title: this.i18nService.t(\"emailVerificationRequired\"),\n          text: this.i18nService.t(\"emailVerificationRequiredDesc\"),\n          confirmText: this.i18nService.t(\"ok\"),\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async autofillPage() {\n    const totpCode = await this.autofillService.doAutoFill({\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n}\n","import MainBackground from \"./main.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground\n  ) {}\n\n  private focusedWindowId: number;\n\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    chrome.windows.onFocusChanged.addListener(async (windowId: number) => {\n      if (windowId === null || windowId < 0) {\n        return;\n      }\n\n      this.focusedWindowId = windowId;\n      this.main.messagingService.send(\"windowChanged\");\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo: chrome.tabs.TabActiveInfo) => {\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onReplaced.addListener(async (addedTabId: number, removedTabId: number) => {\n      if (this.main.onReplacedRan) {\n        return;\n      }\n      this.main.onReplacedRan = true;\n\n      await this.notificationBackground.checkNotificationQueue();\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onUpdated.addListener(\n      async (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => {\n        if (this.focusedWindowId > 0 && tab.windowId != this.focusedWindowId) {\n          return;\n        }\n\n        if (!tab.active) {\n          return;\n        }\n\n        if (this.main.onUpdatedRan) {\n          return;\n        }\n        this.main.onUpdatedRan = true;\n\n        await this.notificationBackground.checkNotificationQueue(tab);\n        await this.main.refreshBadgeAndMenu();\n        this.main.messagingService.send(\"tabChanged\");\n      }\n    );\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { UriMatchType } from \"@bitwarden/common/enums/uriMatchType\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService\n  ) {\n    this.webRequest = (window as any).chrome.webRequest;\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"]\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      }\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchType.Host\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","import MainBackground from \"./background/main.background\";\n\nconst bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\nbitwardenMain.bootstrap().then(() => {\n  // Finished bootstrapping\n});\n","import { ApiService as ApiServiceAbstraction } from \"@bitwarden/common/abstractions/api.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"@bitwarden/common/abstractions/appId.service\";\nimport { AuditService as AuditServiceAbstraction } from \"@bitwarden/common/abstractions/audit.service\";\nimport { AuthService as AuthServiceAbstraction } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService as CipherServiceAbstraction } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"@bitwarden/common/abstractions/collection.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EnvironmentService as EnvironmentServiceAbstraction } from \"@bitwarden/common/abstractions/environment.service\";\nimport { EventService as EventServiceAbstraction } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService as ExportServiceAbstraction } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/abstractions/fileUpload.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { I18nService as I18nServiceAbstraction } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"@bitwarden/common/abstractions/keyConnector.service\";\nimport { LogService as LogServiceAbstraction } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { OrganizationService as OrganizationServiceAbstraction } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService as PolicyServiceAbstraction } from \"@bitwarden/common/abstractions/policy.service\";\nimport { ProviderService as ProviderServiceAbstraction } from \"@bitwarden/common/abstractions/provider.service\";\nimport { SearchService as SearchServiceAbstraction } from \"@bitwarden/common/abstractions/search.service\";\nimport { SendService as SendServiceAbstraction } from \"@bitwarden/common/abstractions/send.service\";\nimport { SettingsService as SettingsServiceAbstraction } from \"@bitwarden/common/abstractions/settings.service\";\nimport { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { SyncService as SyncServiceAbstraction } from \"@bitwarden/common/abstractions/sync.service\";\nimport { SystemService as SystemServiceAbstraction } from \"@bitwarden/common/abstractions/system.service\";\nimport { TokenService as TokenServiceAbstraction } from \"@bitwarden/common/abstractions/token.service\";\nimport { TotpService as TotpServiceAbstraction } from \"@bitwarden/common/abstractions/totp.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"@bitwarden/common/abstractions/twoFactor.service\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"@bitwarden/common/abstractions/userVerification.service\";\nimport { UsernameGenerationService as UsernameGenerationServiceAbstraction } from \"@bitwarden/common/abstractions/usernameGeneration.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"@bitwarden/common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\nimport { AppIdService } from \"@bitwarden/common/services/appId.service\";\nimport { AuditService } from \"@bitwarden/common/services/audit.service\";\nimport { AuthService } from \"@bitwarden/common/services/auth.service\";\nimport { CipherService } from \"@bitwarden/common/services/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/services/collection.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { ContainerService } from \"@bitwarden/common/services/container.service\";\nimport { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\nimport { EnvironmentService } from \"@bitwarden/common/services/environment.service\";\nimport { EventService } from \"@bitwarden/common/services/event.service\";\nimport { ExportService } from \"@bitwarden/common/services/export.service\";\nimport { FileUploadService } from \"@bitwarden/common/services/fileUpload.service\";\nimport { FolderApiService } from \"@bitwarden/common/services/folder/folder-api.service\";\nimport { FolderService } from \"@bitwarden/common/services/folder/folder.service\";\nimport { KeyConnectorService } from \"@bitwarden/common/services/keyConnector.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/services/memoryStorage.service\";\nimport { NotificationsService } from \"@bitwarden/common/services/notifications.service\";\nimport { OrganizationService } from \"@bitwarden/common/services/organization.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/services/passwordGeneration.service\";\nimport { PolicyService } from \"@bitwarden/common/services/policy.service\";\nimport { ProviderService } from \"@bitwarden/common/services/provider.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { SendService } from \"@bitwarden/common/services/send.service\";\nimport { SettingsService } from \"@bitwarden/common/services/settings.service\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\nimport { SyncService } from \"@bitwarden/common/services/sync.service\";\nimport { SystemService } from \"@bitwarden/common/services/system.service\";\nimport { TokenService } from \"@bitwarden/common/services/token.service\";\nimport { TotpService } from \"@bitwarden/common/services/totp.service\";\nimport { TwoFactorService } from \"@bitwarden/common/services/twoFactor.service\";\nimport { UserVerificationService } from \"@bitwarden/common/services/userVerification.service\";\nimport { UsernameGenerationService } from \"@bitwarden/common/services/usernameGeneration.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/services/webCryptoFunction.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { PopupUtilsService } from \"../popup/services/popup-utils.service\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../services/abstractions/autofill.service\";\nimport { StateService as StateServiceAbstraction } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserLocalStorageService from \"../services/browserLocalStorage.service\";\nimport BrowserMessagingService from \"../services/browserMessaging.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../services/browserMessagingPrivateModeBackground.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { KeyGenerationService } from \"../services/keyGeneration.service\";\nimport { LocalBackedSessionStorageService } from \"../services/localBackedSessionStorage.service\";\nimport { StateService } from \"../services/state.service\";\nimport { VaultFilterService } from \"../services/vaultFilter.service\";\nimport VaultTimeoutService from \"../services/vaultTimeout.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport ContextMenusBackground from \"./contextMenus.background\";\nimport IdleBackground from \"./idle.background\";\nimport IconDetails from \"./models/iconDetails\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport NotificationBackground from \"./notification.background\";\nimport RuntimeBackground from \"./runtime.background\";\nimport TabsBackground from \"./tabs.background\";\nimport WebRequestBackground from \"./webRequest.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: AbstractStorageService;\n  secureStorageService: AbstractStorageService;\n  memoryStorageService: AbstractStorageService;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: EnvironmentServiceAbstraction;\n  settingsService: SettingsServiceAbstraction;\n  cipherService: CipherServiceAbstraction;\n  folderService: InternalFolderServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  exportService: ExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  stateMigrationService: StateMigrationService;\n  systemService: SystemServiceAbstraction;\n  eventService: EventServiceAbstraction;\n  policyService: PolicyServiceAbstraction;\n  popupUtilsService: PopupUtilsService;\n  sendService: SendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  organizationService: OrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n  encryptService: EncryptService;\n  folderApiService: FolderApiServiceAbstraction;\n\n  // Passed to the popup for Safari to workaround issues with theming, downloading, etc.\n  backgroundWindow = window;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private sidebarAction: any;\n  private buildingContextMenu: boolean;\n  private menuOptionsLoaded: any[] = [];\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n\n  constructor(public isPrivateMode: boolean = false) {\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        this.notificationsService.updateConnection(false);\n      }\n      await this.setIcon();\n      await this.refreshBadgeAndMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.reloadProcess();\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: string) =>\n      await this.logout(expired, userId);\n\n    this.messagingService = isPrivateMode\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.logService = new ConsoleLogService(false);\n    this.cryptoFunctionService = new WebCryptoFunctionService(window);\n    this.storageService = new BrowserLocalStorageService();\n    this.secureStorageService = new BrowserLocalStorageService();\n    this.memoryStorageService =\n      chrome.runtime.getManifest().manifest_version == 3\n        ? new LocalBackedSessionStorageService(\n            new EncryptService(this.cryptoFunctionService, this.logService, false),\n            new KeyGenerationService(this.cryptoFunctionService)\n          )\n        : new MemoryStorageService();\n    this.stateMigrationService = new StateMigrationService(\n      this.storageService,\n      this.secureStorageService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.stateService = new StateService(\n      this.storageService,\n      this.secureStorageService,\n      this.memoryStorageService,\n      this.logService,\n      this.stateMigrationService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.platformUtilsService = new BrowserPlatformUtilsService(\n      this.messagingService,\n      this.stateService,\n      (clipboardValue, clearMs) => {\n        if (this.systemService != null) {\n          this.systemService.clearClipboard(clipboardValue, clearMs);\n        }\n      },\n      async () => {\n        if (this.nativeMessagingBackground != null) {\n          const promise = this.nativeMessagingBackground.getResponse();\n\n          try {\n            await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n\n          return promise.then((result) => result.response === \"unlocked\");\n        }\n      }\n    );\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(window));\n    this.encryptService = new EncryptService(this.cryptoFunctionService, this.logService, true);\n    this.cryptoService = new BrowserCryptoService(\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService\n    );\n    this.tokenService = new TokenService(this.stateService);\n    this.appIdService = new AppIdService(this.storageService);\n    this.environmentService = new EnvironmentService(this.stateService);\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      (expired: boolean) => this.logout(expired)\n    );\n    this.settingsService = new SettingsService(this.stateService);\n    this.fileUploadService = new FileUploadService(this.logService, this.apiService);\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.settingsService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      () => this.searchService,\n      this.logService,\n      this.stateService\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService\n    );\n    this.folderApiService = new FolderApiService(this.folderService, this.apiService);\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateService\n    );\n    this.searchService = new SearchService(this.cipherService, this.logService, this.i18nService);\n    this.sendService = new SendService(\n      this.cryptoService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.organizationService = new OrganizationService(this.stateService);\n    this.policyService = new PolicyService(\n      this.stateService,\n      this.organizationService,\n      this.apiService\n    );\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.cryptoFunctionService,\n      logoutCallback\n    );\n    this.vaultFilterService = new VaultFilterService(\n      this.stateService,\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        that.runtimeBackground.processMessage(message, that, null);\n      };\n    })();\n    this.authService = new AuthService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService\n    );\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.tokenService,\n      this.policyService,\n      this.keyConnectorService,\n      this.stateService,\n      this.authService,\n      lockedCallback,\n      logoutCallback\n    );\n    this.providerService = new ProviderService(this.stateService);\n    this.syncService = new SyncService(\n      this.apiService,\n      this.settingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.organizationService,\n      this.providerService,\n      this.folderApiService,\n      logoutCallback\n    );\n    this.eventService = new EventService(\n      this.apiService,\n      this.cipherService,\n      this.stateService,\n      this.logService,\n      this.organizationService\n    );\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService\n    );\n    this.totpService = new TotpService(this.cryptoFunctionService, this.logService);\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.totpService,\n      this.eventService,\n      this.logService\n    );\n    this.containerService = new ContainerService(this.cryptoService);\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n    this.exportService = new ExportService(\n      this.folderService,\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService\n    );\n    this.notificationsService = new NotificationsService(\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.logService,\n      this.stateService,\n      this.authService\n    );\n    this.popupUtilsService = new PopupUtilsService(isPrivateMode);\n\n    this.userVerificationService = new UserVerificationService(\n      this.cryptoService,\n      this.i18nService,\n      this.apiService\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? window : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.sidebarAction = this.isSafari\n      ? null\n      : typeof opr !== \"undefined\" && opr.sidebarAction\n      ? opr.sidebarAction\n      : (window as any).chrome.sidebarAction;\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.i18nService,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService\n    );\n\n    this.tabsBackground = new TabsBackground(this, this.notificationBackground);\n    this.contextMenusBackground = new ContextMenusBackground(\n      this,\n      this.cipherService,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.authService,\n      this.eventService,\n      this.totpService\n    );\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService\n    );\n  }\n\n  async bootstrap() {\n    this.containerService.attachToWindow(window);\n\n    await this.stateService.init();\n\n    await (this.vaultTimeoutService as VaultTimeoutService).init(true);\n    await (this.i18nService as I18nService).init();\n    await (this.eventService as EventService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    await this.commandsBackground.init();\n\n    this.twoFactorService.init();\n\n    await this.tabsBackground.init();\n    await this.contextMenusBackground.init();\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n        await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n      });\n\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n          await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.environmentService.setUrlsFromStorage();\n        await this.setIcon();\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async setIcon() {\n    if ((!chrome.browserAction && !this.sidebarAction) || this.isPrivateMode) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    let suffix = \"\";\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      suffix = \"_gray\";\n    } else if (authStatus === AuthenticationStatus.Locked) {\n      suffix = \"_locked\";\n    }\n\n    await this.actionSetIcon(chrome.browserAction, suffix);\n    await this.actionSetIcon(this.sidebarAction, suffix);\n  }\n\n  async refreshBadgeAndMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    const menuDisabled = await this.stateService.getDisableContextMenuItem();\n    if (!menuDisabled) {\n      await this.buildContextMenu();\n    } else {\n      await this.contextMenusRemoveAll();\n    }\n\n    if (forLocked) {\n      await this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.contextMenuReady(tab, !menuDisabled);\n    }\n  }\n\n  async logout(expired: boolean, userId?: string) {\n    await this.eventService.uploadEvents(userId);\n\n    await Promise.all([\n      this.eventService.clearEvents(userId),\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.settingsService.clear(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n    ]);\n\n    await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    await this.setIcon();\n    await this.refreshBadgeAndMenu(true);\n    await this.reseedStorage();\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.reloadProcess();\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    if (currentVaultTimeout == null) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  private async buildContextMenu() {\n    if (!chrome.contextMenus || this.buildingContextMenu) {\n      return;\n    }\n\n    this.buildingContextMenu = true;\n    await this.contextMenusRemoveAll();\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"root\",\n      contexts: [\"all\"],\n      title: \"Bitwarden\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"autofill\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"autoFill\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-username\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyUsername\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyPassword\"),\n    });\n\n    if (await this.stateService.getCanAccessPremium()) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp\",\n        parentId: \"root\",\n        contexts: [\"all\"],\n        title: this.i18nService.t(\"copyVerificationCode\"),\n      });\n    }\n\n    await this.contextMenusCreate({\n      type: \"separator\",\n      parentId: \"root\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"generate-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-identifier\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    });\n\n    this.buildingContextMenu = false;\n  }\n\n  private async contextMenuReady(tab: any, contextMenuEnabled: boolean) {\n    await this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);\n    this.onUpdatedRan = this.onReplacedRan = false;\n  }\n\n  private async loadMenuAndUpdateBadge(url: string, tabId: number, contextMenuEnabled: boolean) {\n    if (!url || (!chrome.browserAction && !this.sidebarAction)) {\n      return;\n    }\n\n    this.actionSetBadgeBackgroundColor(chrome.browserAction);\n    this.actionSetBadgeBackgroundColor(this.sidebarAction);\n\n    this.menuOptionsLoaded = [];\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.Unlocked) {\n      try {\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(url);\n        ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n        if (contextMenuEnabled) {\n          ciphers.forEach((cipher) => {\n            this.loadLoginContextMenuOptions(cipher);\n          });\n        }\n\n        const disableBadgeCounter = await this.stateService.getDisableBadgeCounter();\n        let theText = \"\";\n\n        if (!disableBadgeCounter) {\n          if (ciphers.length > 0 && ciphers.length <= 9) {\n            theText = ciphers.length.toString();\n          } else if (ciphers.length > 0) {\n            theText = \"9+\";\n          }\n        }\n\n        if (contextMenuEnabled && ciphers.length === 0) {\n          await this.loadNoLoginsContextMenuOptions(this.i18nService.t(\"noMatchingLogins\"));\n        }\n\n        this.sidebarActionSetBadgeText(theText, tabId);\n        this.browserActionSetBadgeText(theText, tabId);\n\n        return;\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    await this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);\n  }\n\n  private async loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled: boolean) {\n    if (contextMenuEnabled) {\n      const authed = await this.stateService.getIsAuthenticated();\n      await this.loadNoLoginsContextMenuOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\")\n      );\n    }\n\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach((tab) => {\n        if (tab.id != null) {\n          this.browserActionSetBadgeText(\"\", tab.id);\n          this.sidebarActionSetBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  private async loadLoginContextMenuOptions(cipher: any) {\n    if (\n      cipher == null ||\n      cipher.type !== CipherType.Login ||\n      cipher.reprompt !== CipherRepromptType.None\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n    if (cipher.login.username && cipher.login.username !== \"\") {\n      title += \" (\" + cipher.login.username + \")\";\n    }\n    await this.loadContextMenuOptions(title, cipher.id, cipher);\n  }\n\n  private async loadNoLoginsContextMenuOptions(noLoginsMessage: string) {\n    await this.loadContextMenuOptions(noLoginsMessage, \"noop\", null);\n  }\n\n  private async loadContextMenuOptions(title: string, idSuffix: string, cipher: any) {\n    if (\n      !chrome.contextMenus ||\n      this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||\n      (cipher != null && cipher.type !== CipherType.Login)\n    ) {\n      return;\n    }\n\n    this.menuOptionsLoaded.push(idSuffix);\n\n    if (cipher == null || (cipher.login.password && cipher.login.password !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"autofill_\" + idSuffix,\n        parentId: \"autofill\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (cipher == null || (cipher.login.username && cipher.login.username !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-username_\" + idSuffix,\n        parentId: \"copy-username\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (\n      cipher == null ||\n      (cipher.login.password && cipher.login.password !== \"\" && cipher.viewPassword)\n    ) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-password_\" + idSuffix,\n        parentId: \"copy-password\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== \"\"))) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp_\" + idSuffix,\n        parentId: \"copy-totp\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n  }\n\n  private sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n\n  // Browser API Helpers\n\n  private contextMenusRemoveAll() {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.removeAll(() => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private contextMenusCreate(options: any) {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.create(options, () => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private async actionSetIcon(theAction: any, suffix: string, windowId?: number): Promise<any> {\n    if (!theAction || !theAction.setIcon) {\n      return;\n    }\n\n    const options: IconDetails = {\n      path: {\n        19: \"images/icon19\" + suffix + \".png\",\n        38: \"images/icon38\" + suffix + \".png\",\n      },\n    };\n\n    if (this.platformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n      await theAction.setIcon(options);\n    } else if (this.platformUtilsService.isSafari()) {\n      // Workaround since Safari 14.0.3 returns a pending promise\n      // which doesn't resolve within a reasonable time.\n      theAction.setIcon(options);\n    } else {\n      return new Promise<void>((resolve) => {\n        theAction.setIcon(options, () => resolve());\n      });\n    }\n  }\n\n  private actionSetBadgeBackgroundColor(action: any) {\n    if (action && action.setBadgeBackgroundColor) {\n      action.setBadgeBackgroundColor({ color: \"#294e5f\" });\n    }\n  }\n\n  private browserActionSetBadgeText(text: string, tabId: number) {\n    if (chrome.browserAction && chrome.browserAction.setBadgeText) {\n      chrome.browserAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private sidebarActionSetBadgeText(text: string, tabId: number) {\n    if (!this.sidebarAction) {\n      return;\n    }\n\n    if (this.sidebarAction.setBadgeText) {\n      this.sidebarAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    } else if (this.sidebarAction.setTitle) {\n      let title = \"Bitwarden\";\n      if (text && text !== \"\") {\n        title += \" [\" + text + \"]\";\n      }\n\n      this.sidebarAction.setTitle({\n        title: title,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private async reloadProcess(): Promise<void> {\n    const accounts = this.stateService.accounts.getValue();\n    if (accounts != null) {\n      for (const userId of Object.keys(accounts)) {\n        if ((await this.authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n          return;\n        }\n      }\n    }\n    await this.systemService.startProcessReload();\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(95349)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","AuthenticationStatus","CipherRepromptType","CipherType","StateVersion","ThemeType","DeviceType","AccountFactory","constructor","accountConstructor","this","create","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","EnvironmentUrls","base","api","identity","icons","notifications","events","webVault","keyConnector","WindowState","GlobalState","theme","System","window","stateVersion","One","environmentUrls","nodeURL","Utils","inited","isNode","process","release","name","isBrowser","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","str","Uint8Array","Buffer","from","binaryString","atob","bytes","length","i","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","encodedString","apply","decodeURIComponent","escape","Array","prototype","map","call","x","slice","join","urlB64Str","output","fromB64ToUtf8","utfStr","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","RegExp","test","uriString","url","getUrl","hostname","host","trim","startsWith","httpUrl","indexOf","tldEndingRegex","getUrlObject","tldjs","isValid","validIpAddress","urlDomain","getDomain","domain","search","Map","split","forEach","pair","parts","set","toLowerCase","i18nService","prop","a","b","collator","compare","localeCompare","target","source","Object","assign","obj","filter","k","Number","isNaN","s","charAt","toUpperCase","ipString","win","mobile","navigator","userAgent","vendor","opera","match","URL","hasProtocol","anchor","document","createElement","href","regexpEmojiPresentation","init","DeviceRequest","appId","platformUtilsService","type","getDevice","getDeviceString","identifier","pushToken","TokenRequest","twoFactor","device","alterIdentityTokenHeaders","headers","setTwoFactor","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","deviceName","token","provider","twoFactorToken","twoFactorProvider","twoFactorRemember","remember","ApiTokenRequest","clientSecret","super","grant_type","client_secret","TokenRequestTwoFactor","BaseResponse","response","getResponseProperty","propertyName","exactName","undefined","otherCasePropertyName","ApiKeyResponse","apiKey","revisionDate","Date","AttachmentResponse","fileName","key","size","sizeName","CardApi","data","cardholderName","brand","number","expMonth","expYear","FieldApi","value","linkedId","IdentityApi","title","firstName","middleName","lastName","address1","address2","address3","city","state","postalCode","country","company","email","phone","ssn","username","passportNumber","licenseNumber","LoginUriApi","uri","LoginApi","password","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","SecureNoteApi","PasswordHistoryResponse","lastUsedDate","CipherResponse","organizationId","folderId","notes","favorite","edit","viewPassword","organizationUseTotp","collectionIds","deletedDate","login","card","secureNote","fields","f","attachments","passwordHistory","h","reprompt","None","AttachmentUploadDataResponse","attachmentId","fileUploadType","cipherResponse","cipherMiniResponse","BillingResponse","invoices","transactions","balance","paymentSource","BillingSourceResponse","t","BillingTransactionResponse","BillingInvoiceResponse","cardBrand","description","needsVerification","pdfUrl","paid","date","amount","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","BillingPaymentResponse","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","SelectionReadOnlyResponse","readOnly","hidePasswords","CollectionResponse","externalId","CollectionDetailsResponse","CollectionGroupDetailsResponse","groups","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","equivalentDomains","d","EmergencyAccessGranteeDetailsResponse","granteeId","status","waitTimeDays","creationDate","EmergencyAccessGrantorDetailsResponse","grantorId","EmergencyAccessTakeoverResponse","keyEncrypted","kdf","kdfIterations","EmergencyAccessViewResponse","ciphers","ErrorResponse","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","isNullOrWhitespace","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","push","EventResponse","userId","providerId","cipherId","collectionId","groupId","policyId","organizationUserId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","GroupResponse","accessAll","GroupDetailsResponse","collections","IdentityCaptchaResponse","siteKey","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","resetMasterPassword","privateKey","forcePasswordReset","apiUseKeyConnector","keyConnectorUrl","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","twoFactorProviders","KeyConnectorUserKeyResponse","ListResponse","dr","continuationToken","SsoType","OpenIdConnectRedirectBehavior","Saml2BindingType","Saml2NameIdFormat","Saml2SigningBehavior","SsoConfigApi","configType","keyConnectorEnabled","authority","metadataAddress","redirectBehavior","getClaimsFromUserInfoEndpoint","additionalScopes","additionalUserIdClaimTypes","additionalEmailClaimTypes","additionalNameClaimTypes","acrValues","expectedReturnAcrValue","spNameIdFormat","spOutboundSigningAlgorithm","spSigningBehavior","spMinIncomingSigningAlgorithm","spWantAssertionsSigned","spValidateCertificates","idpEntityId","idpBindingType","idpSingleSignOnServiceUrl","idpSingleLogoutServiceUrl","idpX509PublicCert","idpOutboundSigningAlgorithm","idpAllowUnsolicitedAuthnResponse","idpDisableOutboundLogoutRequests","idpWantAuthnRequestsSigned","view","OpenIdConnect","openId","Saml2","saml","idpAllowOutboundLogoutRequests","OrganizationSsoResponse","enabled","urls","SsoUrls","callbackPath","signedOutCallbackPath","spEntityId","spMetadataUrl","spAcsUrl","OrganizationApiKeyInformationResponse","keyType","OrganizationAutoEnrollStatusResponse","resetPasswordEnabled","OrganizationConnectionResponse","rawConfig","config","KeysResponse","publicKey","OrganizationKeysResponse","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","baseSeats","baseStorageGb","maxCollections","maxUsers","hasAdditionalSeatsOption","maxAdditionalSeats","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","hasTotp","has2fa","hasApi","hasSso","hasResetPassword","usersGetPremium","upgradeSortOrder","displaySortOrder","legacyYear","disabled","stripePlanId","stripeSeatPlanId","stripeStoragePlanId","stripePremiumAccessPlanId","basePrice","seatPrice","additionalStoragePricePerGb","premiumAccessOptionPrice","OrganizationResponse","businessName","businessAddress1","businessAddress2","businessAddress3","businessCountry","businessTaxNumber","billingEmail","plan","planType","seats","maxAutoscaleSeats","maxStorageGb","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useResetPassword","hasPublicAndPrivateKeys","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","SubscriptionResponse","storageName","storageGb","license","expiration","usingInAppPurchase","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","items","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","quantity","interval","sponsoredSubscriptionItem","OrganizationSubscriptionResponse","OrganizationUserBulkPublicKeyResponse","OrganizationUserBulkResponse","error","PermissionsApi","accessEventLogs","accessImportExport","accessReports","manageAllCollections","manageAssignedCollections","createNewCollections","editAnyCollection","deleteAnyCollection","editAssignedCollections","deleteAssignedCollections","manageCiphers","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","manageScim","OrganizationUserResponse","permissions","resetPasswordEnrolled","OrganizationUserUserDetailsResponse","twoFactorEnabled","usesKeyConnector","OrganizationUserDetailsResponse","OrganizationUserResetPasswordDetailsReponse","resetPasswordKey","encryptedPrivateKey","ProfileOrganizationResponse","usePolicies","useSso","useKeyConnector","useScim","selfHost","ssoBound","providerName","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","familySponsorshipLastSyncDateString","familySponsorshipLastSyncDate","familySponsorshipValidUntilString","familySponsorshipValidUntil","familySponsorshipToDelete","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","organizations","providers","providerOrganizations","emailVerified","masterPasswordHint","premiumPersonally","premiumFromOrganization","culture","securityStamp","o","PaymentResponse","userProfile","paymentIntentClientSecret","success","PolicyResponse","PreloginResponse","ProviderOrganizationResponse","settings","ProviderOrganizationOrganizationDetailsResponse","organizationName","ProviderResponse","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","ProviderUserResponse","ProviderUserUserDetailsResponse","SendFileApi","SendTextApi","text","hidden","SendAccessResponse","file","expirationDate","creatorIdentifier","SendFileDownloadDataResponse","SendResponse","accessId","maxAccessCount","accessCount","deletionDate","disable","hideEmail","SendFileUploadDataResponse","sendResponse","SsoPreValidateResponse","FolderResponse","SyncResponse","folders","policies","sends","profile","p","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","extensions","pubKeyCredParams","rp","timeout","user","TwoFactorYubiKeyResponse","key1","key2","key3","key4","key5","nfc","UserKeyResponse","HtmlStorageLocation","ApiService","tokenService","environmentService","appIdService","logoutCallback","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","WindowsDesktop","MacOsDesktop","LinuxDesktop","postIdentityToken","request","Headers","Accept","identityToken","getClientType","fetch","Request","getIdentityUrl","body","qsStringify","credentials","getCredentials","cache","method","responseJson","isJsonResponse","json","TwoFactorProviders2","clearTwoFactorToken","reject","refreshIdentityToken","doAuthRefresh","getProfile","send","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postPrelogin","isDev","getApiUrl","postEmailToken","postEmail","postPassword","setPassword","postSetKeyConnectorKey","postSecurityStamp","deleteAccount","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postIapCheck","postReinstatePremium","postCancelPremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKeys","postAccountKey","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","postAccountRequestOTP","postAccountVerifyOTP","postConvertToKeyConnector","getUserBillingHistory","getUserBillingPayment","getSend","postSendAccess","apiUrl","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","getCipher","getFullCipherDetails","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","path","postImportCiphers","postImportOrganizationCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionDetails","getUserCollections","getCollections","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteCollectionUser","getGroupDetails","getGroups","getGroupUsers","postGroup","putGroup","putGroupUsers","deleteGroup","deleteGroupUser","getPolicy","getPolicies","getPoliciesByToken","getPoliciesByInvitedUser","putPolicy","getOrganizationUser","getOrganizationUserGroups","getOrganizationUsers","getOrganizationUserResetPasswordDetails","getOrganizationAutoEnrollStatus","postOrganizationUserInvite","postOrganizationUserReinvite","postManyOrganizationUserReinvite","postOrganizationUserAccept","postOrganizationUserConfirm","postOrganizationUsersPublicKey","postOrganizationUserBulkConfirm","putOrganizationUser","putOrganizationUserGroups","putOrganizationUserResetPasswordEnrollment","putOrganizationUserResetPassword","deleteOrganizationUser","deleteManyOrganizationUsers","deactivateOrganizationUser","deactivateManyOrganizationUsers","activateOrganizationUser","activateManyOrganizationUsers","getPlans","postImportDirectory","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","deviceResponse","rawId","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","clientDataJSON","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getEmergencyAccessTrusted","getEmergencyAccessGranted","getEmergencyAccess","getEmergencyGrantorPolicies","putEmergencyAccess","deleteEmergencyAccess","postEmergencyAccessInvite","postEmergencyAccessReinvite","postEmergencyAccessAccept","postEmergencyAccessConfirm","postEmergencyAccessInitiate","postEmergencyAccessApprove","postEmergencyAccessReject","postEmergencyAccessTakeover","postEmergencyAccessPassword","postEmergencyAccessView","getOrganization","getOrganizationBilling","getOrganizationSubscription","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","getOrganizationLicense","getOrganizationTaxInfo","getOrganizationSso","postOrganization","putOrganization","putOrganizationTaxInfo","postLeaveOrganization","postOrganizationLicense","postOrganizationLicenseUpdate","postOrganizationApiKey","getOrganizationApiKeyInformation","postOrganizationRotateApiKey","postOrganizationSso","postOrganizationUpgrade","postOrganizationUpdateSubscription","postOrganizationSeat","postOrganizationStorage","postOrganizationPayment","postOrganizationVerifyBank","postOrganizationCancel","postOrganizationReinstate","deleteOrganization","getOrganizationKeys","postOrganizationKeys","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","start","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","JSON","stringify","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","getUserKeyFromKeyConnector","handleError","postUserKeyToKeyConnector","getKeyConnectorAlive","getToken","tokenNeedsRefresh","getApplicationVersion","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","getRefreshToken","doRefreshToken","getClientId","getClientSecret","doApiTokenRefresh","decodedToken","decodeToken","tokenResponse","setTokens","getAppId","deviceRequest","tokenRequest","setToken","authed","hasResponse","alterHeaders","requestUrl","requestInit","FormData","tokenError","isTextResponse","Message","params","hasBaseUrl","typeHeader","get","AppIdService","storageService","makeAndGetAppId","getAnonymousAppId","existingId","htmlStorageLocation","Local","guid","newGuid","save","AuditService","cryptoFunctionService","apiService","passwordLeaked","hashBytes","hash","fromBufferToHex","hashStart","hashEnding","find","v","breachedAccounts","limit","throttleKey","AuthenticationType","KeySuffixOptions","TwoFactorProviderType","propertyKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","exec","onFinally","splice","delete","val","catch","err","EncryptionPair","DataEncryptionPair","TemporaryDataEncryption","AccountData","passwordGenerationHistory","AccountKeys","cryptoSymmetricKey","organizationKeys","providerKeys","AccountProfile","pinProtected","vaultTimeoutAction","AccountTokens","tokens","AuthResult","KeysRequest","LogInStrategy","cryptoService","messagingService","logService","stateService","twoFactorService","captchaBypassToken","logInTwoFactor","captchaResponse","startLogIn","clearSelectedProvider","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","onSuccessfulLogin","buildDeviceRequest","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","accountInformation","addAccount","sub","hasPremiumPersonally","premium","kdfType","result","setTwoFactorToken","setEncKey","setEncPrivateKey","createKeyPairForOldAccount","setBiometricLocked","setProviders","makeKeyPair","encryptedString","HashPurpose","ApiLogInStrategy","keyConnectorService","getKeyConnectorUrl","getAndSetKey","logIn","setApiKeyClientId","setApiKeyClientSecret","PasswordTokenRequest","masterPasswordHash","fromUtf8ToUrlB64","PasswordLogInStrategy","authService","setKey","setKeyHash","localHashedPassword","masterPassword","makePreloginKey","hashPassword","LocalAuthorization","hashedPassword","SsoTokenRequest","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLogInStrategy","newSsoUser","convertNewSsoUserToKeyConnector","orgId","redirectUrl","PreloginRequest","AuthService","logInStrategy","strategy","clearState","Password","Sso","Api","requiresTwoFactor","saveState","requiresCaptcha","logOut","callback","authingWithApiKey","authingWithSso","authingWithPassword","getAuthStatus","getIsAuthenticated","LoggedOut","hasKeyStored","Auto","getEverBeenUnlocked","getKey","hasKeyInMemory","Unlocked","Locked","preloginResponse","makeKey","startSessionTimeout","clearSessionTimeout","sessionTimeout","setTimeout","clearTimeout","FieldType","UriMatchType","EncryptionType","sequentialize","cacheKey","caches","getCache","argsCacheKey","AttachmentData","CardData","FieldData","IdentityData","LoginUriData","LoginData","PasswordHistoryData","SecureNoteData","CipherData","Login","SecureNote","Card","Identity","ph","AttachmentView","EncString","encryptedStringOrType","iv","mac","encType","encryptionType","headerPieces","encPieces","AesCbc128_HmacSha256_B64","AesCbc256_B64","AesCbc256_HmacSha256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","decrypt","decryptedValue","containerService","getCryptoService","getOrgKey","decryptToUtf8","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","self","theProp","mapProp","all","SymmetricCryptoKey","encKey","macKey","keyB64","encKeyB64","macKeyB64","jsonResult","LoginLinkedId","CardLinkedId","IdentityLinkedId","Attachment","orgKey","decValue","decryptToBytes","toAttachmentData","LinkedMetadata","_i18nKey","linkedFieldOption","i18nKey","linkedFieldOptions","ItemView","CardView","_brand","_number","_subTitle","repeat","count","exp","formatYear","year","toCardData","IdentityView","_firstName","_lastName","address","addressPart2","LoginView","l","hasUris","some","canLaunch","launchUri","SecureNoteView","n","CipherView","localData","subTitle","hasAttachments","linkedFieldValue","linkedFieldI18nKey","FieldView","newField","showValue","showCount","Field","toFieldData","toIdentityData","CanLaunchWhitelist","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","RegularExpression","getHostname","getHost","LoginUri","toLoginUriData","toLoginData","toISOString","PasswordHistoryView","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","has","addCiphers","sort","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","clear","lastUsedIndex","max","cipher","lastLaunched","y","valueOf","getNextIndex","CipherBulkDeleteRequest","ids","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherCollectionsRequest","CipherCreateRequest","CipherShareRequest","DomainMatchBlacklist","Set","CipherService","settingsService","fileUploadService","searchService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearIndex","indexCiphers","clearCache","clearDecryptedCiphersState","encrypt","originalCipher","existingCipher","hasFields","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","encryptObjProperty","encryptCipherData","encryptFields","encryptPasswordHistories","encryptAttachments","attachmentsModel","encAttachments","fieldsModel","encFields","encField","encryptField","fieldModel","Boolean","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAll","getAllDecrypted","getUserId","indexedEntityId","decCiphers","hasKey","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","isDeleted","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","eqDomainsPromise","getEquivalentDomains","eqDomains","matches","eqDomain","concat","matchingDomains","getDefaultUriMatch","domainUrlHost","Host","urlHost","Exact","StartsWith","Never","getAllFromApiForOrganization","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","getTime","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","getNeverDomains","setNeverDomains","saveWithServer","upsert","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","encFileName","dataEncKey","makeEncKey","encData","encryptToBytes","fileSize","adminRequest","uploadDataResponse","uploadCipherAttachment","legacyServerAttachmentFileUpload","fd","blob","Blob","append","filepath","contentType","saveCollectionsWithServer","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","attachmentView","attachmentResponse","buf","arrayBuffer","decBuf","decryptFromBytes","theObj","modelProp","loginUri","lastUsed","autofillOnPageLoadDefault","getAutoFillOnPageLoadDefault","clearSortedCiphers","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","CollectionData","CollectionView","Collection","CollectionService","setDecryptedCollections","collection","decryptMany","decCollections","getSortFunction","getEncryptedCollections","decryptedCollections","getDecryptedCollections","getAllNested","nodes","collectionCopy","getNested","setEncryptedCollections","LogLevelType","ConsoleLogService","timersMap","debug","write","Debug","info","Info","warning","Warning","level","console","log","warn","time","label","hrtime","timeEnd","elapsed","ContainerService","attachToWindow","attachToGlobal","bitwardenContainerService","EncryptedObject","EncryptService","logMacFailures","plainValue","plainBuf","encObj","aesEncrypt","encString","fastParams","aesDecryptFastParameters","computedMac","hmacFast","macData","compareFast","logMacFailed","aesDecryptFast","randomBytes","hmac","msg","EnvironmentService","urlsSubject","Subject","scimUrl","activeAccount","subscribe","setUrlsFromStorage","baseUrl","getNotificationsUrl","notificationsUrl","getWebVaultUrl","webVaultUrl","getSendUrl","getIconsUrl","iconsUrl","identityUrl","eventsUrl","getScimUrl","getEnvironmentUrls","envUrls","setUrls","formatUrl","scim","setEnvironmentUrls","next","getUrls","EventData","EventRequest","EventService","cipherService","organizationService","checkOnInterval","uploadEvents","setInterval","collect","eventType","uploadImmediately","orgIds","eventCollection","getEventCollection","event","setEventCollection","clearEvents","KdfType","PBKDF2_SHA256","CardExport","FieldExport","Text","IdentityExport","LoginUriExport","LoginExport","toView","toDomain","SecureNoteType","EventType","SecureNoteExport","Generic","CipherExport","values","build","CipherWithIdExport","CollectionExport","CollectionWithIdExport","EventExport","humanReadableMessage","appIcon","appName","userName","userEmail","ip","FolderView","Folder","FolderExport","FolderWithIdExport","FileUploadType","ExportService","folderService","getExport","format","getOrganizationExport","getEncryptedExport","getDecryptedExport","getPasswordProtectedExport","clearText","salt","makePinKey","encKeyValidation","encText","jsonDoc","encrypted","passwordProtected","encKeyValidation_DO_NOT_EDIT","getOrganizationEncryptedExport","getOrganizationDecryptedExport","getEventExport","getFileName","extension","now","getFullYear","padNumber","getMonth","getDate","getHours","getMinutes","getSeconds","decFolders","firstValueFrom","folderViews$","foldersMap","exportCiphers","buildCommonCipher","folders$","collectionPromises","decCol","cipherPromises","decCipher","collectionsMap","num","width","padCharacter","numString","login_uri","login_username","login_password","login_totp","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","toUTCString","searchParams","blobResponse","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","version","Version","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadSendFile","uploadData","Direct","Azure","FolderData","FolderRequest","FolderApiService","postFolder","putFolder","deleteFolder","OrganizationUserType","FolderService","_folders","BehaviorSubject","_folderViews","asObservable","activeAccountUnlocked","unlocked","getEncryptedFolders","updateObservables","getValue","getAllDecryptedFromState","decryptFolders","setEncryptedFolders","updates","cId","decryptFolderPromises","decryptedFolders","noneFolder","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorUserKeyRequest","KeyConnectorService","setUsesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","organization","keyConnectorRequest","handleKeyConnectorError","userKeyResponse","keyArr","Admin","Owner","isProviderUser","getEmail","pubKey","privKey","setPasswordRequest","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","MemoryStorageService","store","remove","NotificationType","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrgKeys","SyncSettings","LogOut","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","OrganizationUserStatusType","Permissions","NotificationsService","syncService","connected","inactive","reconnectTimer","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","withHubProtocol","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","notification","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","min","floor","Organization","Confirmed","Manager","isAdmin","isManager","canCreateNewCollections","canEditAnyCollection","canDeleteAnyCollection","canDeleteAssignedCollections","canEditAssignedCollections","canManagePolicies","hasAnyPermission","includes","AccessEventLogs","canAccessEventLogs","AccessImportExport","canAccessImportExport","AccessReports","canAccessReports","CreateNewCollections","EditAnyCollection","DeleteAnyCollection","EditAssignedCollections","DeleteAssignedCollections","ManageGroups","canManageGroups","ManageOrganization","isOwner","ManagePolicies","ManageUsers","canManageUsers","ManageUsersPassword","canManageUsersPassword","ManageSso","canManageSso","ManageScim","canManageScim","ManageBilling","canManageBilling","hasProvider","OrganizationService","getOrganizations","getByIdentifier","setOrganizations","canManageSponsorships","hasOrganizations","PolicyType","EEFLongWordList","GeneratedPasswordHistory","PasswordGeneratorPolicyOptions","defaultType","minLength","useUppercase","useLowercase","useNumbers","numberCount","useSpecial","specialCount","minNumberWords","capitalize","includeNumber","inEffect","DefaultOptions","ambiguous","minNumber","uppercase","minUppercase","lowercase","minLowercase","special","minSpecial","numWords","wordSeparator","PasswordGenerationService","policyService","generatePassword","options","generatePassphrase","sanitizePasswordLength","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcedOptions","enforcePasswordGeneratorPoliciesOnOptions","enforcedPolicyOptions","getPasswordGeneratorPolicyOptions","PasswordGenerator","currentPolicy","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decrypted","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","passwordStrength","userInputs","globalUserInputs","finalUserInputs","normalizeOptions","index","history","array","j","forGeneration","minUppercaseCalc","minLowercaseCalc","minNumberCalc","minSpecialCalc","PolicyData","MasterPasswordPolicyOptions","minComplexity","requireUpper","requireLower","requireNumbers","requireSpecial","Policy","ResetPasswordPolicyOptions","autoEnrollEnabled","ProviderUserStatusType","ProviderUserType","PolicyService","setDecryptedPolicies","decryptedPolicies","getDecryptedPolicies","diskPolicies","getEncryptedPolicies","policy","getPolicyForOrganization","policyType","org","setEncryptedPolicies","getMasterPasswordPoliciesForInvitedUsers","mapPoliciesFromToken","getMasterPasswordPolicyOptions","MasterPassword","evaluateMasterPassword","newPassword","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","policiesResponse","policyAppliesToUser","policyFilter","filteredPolicies","policySet","Accepted","isExcemptFromPolicies","MaximumVaultTimeout","isExemptFromPolicies","Provider","isProviderAdmin","ProviderAdmin","ProviderService","getProviders","SendType","SearchService","indexing","immediateSearchLocales","defaultSearchableMinLength","searchableMinLength","locale$","locale","lunr","Pipeline","registerFunction","normalizeAccentsPipelineFunction","isSearchable","query","normalizeSearchQuery","builder","Builder","pipeline","add","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","searchCiphers","results","isArray","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","searchSends","sendsMatched","lowPriorityMatched","joined","protocolIndex","queryIndex","substring","searchableFields","metadata","normalize","SendFileData","SendTextData","SendData","File","SendFileView","SendTextView","SendView","SendFile","SendText","Send","cryptoKey","makeSendKey","SendRequest","fileLength","SendService","setDecryptedSends","fileData","passwordHash","pbkdf2","ArrayBuffer","encryptFileData","parseFile","getEncryptedSends","decSends","getDecryptedSends","sendData","legacyServerSendFileUpload","setEncryptedSends","removePasswordWithServer","Keys","SettingsService","setSettings","getSettingsKey","setEquivalentDomains","setSettingsKey","getSettings","TokenService","decoded","fromUrlB64ToUtf8","parse","clientIdClientSecret","setRefreshToken","setClientId","setClientSecret","getApiKeyClientId","getApiKeyClientSecret","setAccessToken","getAccessToken","clearToken","storedToken","getDecodedToken","getTokenExpirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","msRemaining","round","minutes","getEmailVerified","email_verified","getName","getIssuer","iss","amr","v1Keys","alwaysShowDock","autoConfirmFingerprints","autoFillOnPageLoadDefault","biometricAwaitingAcceptance","biometricFingerprintValidated","biometricText","biometricUnlock","clearClipboard","collapsedGroupings","convertAccountToKeyConnector","defaultUriMatch","disableAddLoginNotification","disableAutoBiometricsPrompt","disableAutoTotpCopy","disableBadgeCounter","disableChangedPasswordNotification","disableContextMenuItem","disableFavicon","disableGa","dontShowCardsCurrentTab","dontShowIdentitiesCurrentTab","enableAlwaysOnTop","enableAutoFillOnPageLoad","enableBiometric","enableBrowserIntegration","enableBrowserIntegrationFingerprint","enableCloseToTray","enableFullWidth","enableGravatars","enableMinimizeToTray","enableStartToTray","enableTray","encOrgKeys","encPrivate","encProviderKeys","entityId","entityType","installedVersion","keyHash","lastActive","mainWindowSize","minimizeOnCopyToClipboard","neverDomains","noAutoPromptBiometricsText","openAtLogin","passwordGenerationOptions","protectedPin","ssoCodeVerifier","ssoIdentifier","ssoState","stamp","usesConnector","vaultTimeout","rememberedEmail","v1KeyPrefixes","lastSync","partialKeys","StateMigrationService","secureStorageService","stateFactory","needsMigration","currentStateVersion","getCurrentStateVersion","Latest","migrate","migrateStateFrom1To2","Two","migrateStateFrom2To3","Three","migrateStateFrom3To4","Four","authenticatedAccounts","getAuthenticatedAccounts","account","migratedAccount","migrateAccountFrom4To5","setCurrentStateVersion","Five","clearV1Keys","clearingUserId","keyPrefix","globals","noAutoPromptBiometrics","ssoOrganizationIdentifier","defaultAccount","accountSettings","autoConfirmFingerPrints","biometricLocked","enableGravitars","addEditCipherInfo","apiKeyClientSecret","cryptoMasterKey","cryptoMasterKeyAuto","cryptoMasterKeyB64","cryptoMasterKeyBiometric","legacyEtmKey","apiKeyClientId","authenticationStatus","everBeenUnlocked","accountActivity","keySuffix","authenticatedUserIds","getGlobals","encryptedOrgKeys","entries","newVersion","OrganizationData","ProviderData","SyncService","collectionService","sendService","providerService","folderApiService","syncInProgress","getLastSync","setLastSync","toJSON","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","shouldUpdate","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setHasPremiumPersonally","setHasPremiumFromOrganization","setForcePasswordReset","SystemService","reloadCallback","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","getDecryptedPinProtected","getBiometricLocked","cancelProcessReload","doRefresh","getLastActive","biometricLockedFingerprintValidated","getBiometricFingerprintValidated","clearInterval","clipboardValue","timeoutMs","getClearClipboard","clearSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","B32Chars","SteamChars","TotpService","getCode","period","alg","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","sign","offset","otp","fullCode","trunc","pow","getTimeInterval","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","signature","TwoFactorProviders","Authenticator","priority","Yubikey","Duo","OrganizationDuo","Email","WebAuthn","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerType","providerPriority","_value","setSelectedProvider","clearProviders","VerificationType","VerifyOTPRequest","OTP","SecretVerificationRequest","UserVerificationService","buildRequest","verification","requestClass","alreadyHashed","validateInput","secret","verifyUser","compareAndUpdateKeyHash","requestOTP","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","website","catchallDomain","startString","forwardedSimpleLoginApiKey","generateSimpleLoginAlias","forwardedAnonAddyApiToken","generateAnonAddyAlias","forwardedFirefoxApiToken","generateFirefoxRelayAlias","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","redirect","Authentication","note","alias","apiToken","websiteNote","generated_for","full_address","DecryptParameters","WebCryptoFunctionService","crypto","subtle","algorithm","iterations","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","hkdf","ikm","outputByteSize","hkdfParams","hkdfExpand","prk","hashLen","infoBuf","infoArr","runningOkmLength","previousT","okm","md","valueBytes","toByteString","update","fromByteStringToArray","digest","valueBuf","signingAlgorithm","mac1","mac2","arr1","arr2","getBytes","rand","Uint32Array","putInt32","meta","encKeyByteString","macKeyByteString","parameters","dataBuffer","decipher","finish","aesDecrypt","rsaEncrypt","rsaParams","rsaDecrypt","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","ext","impPublicKey","rsaGenerateKeyPair","modulusLength","publicExponent","keyPair","generateKey","getRandomValues","fromBufferToByteString","BrowserApi","tabsQueryFirst","active","windowId","chrome","windows","WINDOW_ID_CURRENT","currentWindow","tabsQuery","tabs","tab","command","tabSendMessage","sendMessage","runtime","lastError","browser","incognito","onCreated","addListener","getBackgroundPage","getManifest","getViews","extensionPage","onMessage","sender","windowType","tabToClose","tabId","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","close","i18n","getUILanguage","location","reload","w","application","connectNative","isChromeApi","permission","getPlatformInfo","isSafariApi","SafariApp","resolveNow","messageId","MAX_SAFE_INTEGER","sendNativeMessage","responseData","BrowserComponentState","BrowserGroupingsComponentState","BrowserSendComponentState","AccountSettings","Account","groupings","sendType","PopupUtilsService","privateMode","inSidebar","inTab","inPopout","inPopup","inPrivateMode","getContentScrollY","scrollingContainer","getElementsByTagName","scrollTop","setContentScrollY","scrollY","popOut","hrefParts","bodyRect","querySelector","getBoundingClientRect","height","closePopup","AutofillScript","documentUUID","script","properties","autosubmit","AutoFillConstants","UsernameFieldNames","PasswordFieldIgnoreList","ExcludedAutofillTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventService","getFormsWithPasswordFields","pageDetails","formData","passwordFields","loadPasswordFields","formKey","forms","formPasswordFields","pf","form","uf","findUsernameField","passwords","doAutoFill","totpPromise","getActiveTab","canAccessPremium","getCanAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","fillNewPassword","delay_between_operations","skipLastUsed","frameId","getDisableAutoTotpCopy","Cipher_ClientAutofilled","doAutoFillActiveTab","fromCommand","lastLaunchedCipher","totpCode","getTabFromCurrentWindow","filledFields","fieldNames","hasValue","opid","viewable","tagName","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","setFillScriptForFocus","passwordFieldsForForm","passField","elementNumber","fieldIsFuzzyMatch","fillFields","forCustomFieldsOnly","isExcludedType","attr","isFieldMatch","makeScriptAction","selectInfo","siOptions","option","fieldAttrsContain","maxLength","colonIndex","fullMonth","fullYear","partYear","makeScriptActionWithValue","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","fullName","excludedTypes","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","valueIsLikePassword","cleanedValue","readonly","htmlID","htmlName","placeholder","autoCompleteType","passwordField","withoutForm","usernameField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","property","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","EncArrayBuffer","BaseEncryptedOrganizationKey","EncryptedOrganizationKey","ProviderEncryptedOrganizationKey","toData","providerKey","getProviderKey","CryptoService","encryptService","platformUtilService","setCryptoMasterKey","storeKey","setDecryptedCryptoSymmetricKey","setEncryptedCryptoSymmetricKey","encPrivateKey","setDecryptedPrivateKey","setEncryptedPrivateKey","orgs","providerOrgs","encOrgKeyData","setDecryptedOrganizationKeys","setEncryptedOrganizationKeys","setDecryptedProviderKeys","setEncryptedProviderKeys","inMemoryKey","getCryptoMasterKey","symmetricKey","getKeyFromStorage","retrieveKeyFromStorage","validateKey","clearSecretKeyStore","getKeyHash","storedKeyHash","localKeyHash","serverKeyHash","ServerAuthorization","getEncKey","getEncKeyHelper","getPublicKey","inMemoryPublicKey","getPrivateKey","setPublicKey","decryptedPrivateKey","getDecryptedPrivateKey","getEncryptedPrivateKey","getFingerprint","keyFingerprint","userFingerprint","hashPhrase","getOrgKeys","decryptedOrganizationKeys","getDecryptedOrganizationKeys","getEncryptedOrganizationKeys","encOrgKey","fromData","decOrgKey","orgKeys","getProviderKeys","decryptedProviderKeys","getDecryptedProviderKeys","getEncryptedProviderKeys","Biometric","getCryptoMasterKeyAuto","hasCryptoMasterKeyBiometric","hasEncKey","getEncryptedCryptoSymmetricKey","clearKey","clearSecretStorage","setLegacyEtmKey","clearStoredKey","setCryptoMasterKeyAuto","setCryptoMasterKeyBiometric","clearKeyHash","clearEncKey","memoryOnly","clearKeyPair","keysToClear","clearOrgKeys","clearProviderKeys","clearPinProtectedKey","setEncryptedPinProtected","clearKeys","toggleKey","makeKeyFromPin","pin","protectedKeyCs","pinProtectedKey","getEncryptedPinProtected","pinKey","decKey","makeShareKey","shareKey","stretchKey","keyMaterial","sendKey","hashPurpose","theKey","getKeyForEncryption","buildEncKey","remakeEncKey","encValue","macLen","encBytes","privateKeyValue","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","aesDecryptToBytes","resolveLegacyKey","encBuf","ctBytes","ivBytes","macBytes","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","shouldStoreKey","getVaultTimeout","getBiometricUnlock","supportsSecureStorage","getCryptoMasterKeyBiometric","keyForEnc","legacyKey","getLegacyEtmKey","newKey","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","mod","divide","encKeyEnc","getDecryptedCryptoSymmetricKey","decEncKey","encKeyCipher","symmetricCryptoKey","BrowserCryptoService","authenticateBiometric","ClientType","AbstractChromeStorageService","chromeStorageApi","keyedObj","BrowserLocalStorageService","storage","local","BrowserMessagingService","subscriber","arg","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","DialogPromiseExpiration","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","showDialogResolves","passwordDialogResolves","deviceCache","FirefoxExtension","opr","addons","OperaExtension","EdgeExtension","VivaldiExtension","ChromeExtension","SafariExtension","Browser","isFirefox","isChrome","isEdge","isOpera","isVivaldi","isSafari","isIE","isMacAppStore","isViewOpen","isPopupOpen","sidebarView","sidebarViewName","lockTimeout","createNewTab","PublicKeyCredential","showToast","showDialog","confirmText","cancelText","bodyIsHtml","dialogId","html","doc","clearMs","sendMessageToApp","clipboard","writeText","clipboardData","setData","queryCommandSupported","textarea","textContent","style","position","appendChild","select","execCommand","removeChild","readText","focus","resolveDialogPromise","confirmed","resolvePasswordDialogPromise","canceled","resolveObj","tryResolve","supportsBiometric","os","getBrowserInfo","sidebarAction","I18nService","systemLanguage","localesDirectory","getLocalesJson","_locale","ReplaySubject","supportedTranslationLocales","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","translate","messagesObj","formattedLocale","locales","placeholders","placeProp","content","replaceToken","replaceContent","getMessage","KeyGenerationService","makeEphemeralKey","numBytes","BrowserMemoryStorageService","session","LocalBackedSessionStorageService","keyGenerationService","localStorage","sessionStorage","getLocalSession","getSessionEncKey","sessionEncKey","localSession","setLocalSession","sessionJson","setSessionEncKey","jsonSession","encSession","storedKey","initFromJson","getOwnPropertyDescriptors","input","StorageLocation","State","accounts","memoryStorageService","stateMigrationService","useAccountCache","hasBeenInited","isRecoveredSession","accountDiskCache","setState","createGlobals","initAccountState","updateState","syncAccountFromDisk","storedActiveUser","activeUserId","pushAccounts","diskAccount","getAccountFromDisk","setAccountEnvironmentUrls","scaffoldNewAccountStorage","setLastActive","setActiveUser","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getTimeoutBasedStorageOptions","getAccount","saveAccount","getAddEditCipherInfo","setAddEditCipherInfo","getAlwaysShowDock","defaultOnDiskOptions","setAlwaysShowDock","saveGlobals","getAutoConfirmFingerPrints","setAutoConfirmFingerprints","setAutoFillOnPageLoadDefault","getBiometricAwaitingAcceptance","setBiometricAwaitingAcceptance","setBiometricFingerprintValidated","getBiometricText","setBiometricText","setBiometricUnlock","getHasPremiumPersonally","getHasPremiumFromOrganization","hasPremiumFromOrganization","defaultOnDiskLocalOptions","setClearClipboard","getCollapsedGroupings","setCollapsedGroupings","nextValue","defaultSecureStorageOptions","saveSecureStorageKey","getCryptoMasterKeyB64","setCryptoMasterKeyB64","setDecodedToken","setDecryptedPinProtected","decryptedSerialized","setDefaultUriMatch","getDisableAddLoginNotification","setDisableAddLoginNotification","getDisableAutoBiometricsPrompt","setDisableAutoBiometricsPrompt","setDisableAutoTotpCopy","getDisableBadgeCounter","setDisableBadgeCounter","getDisableChangedPasswordNotification","setDisableChangedPasswordNotification","getDisableContextMenuItem","setDisableContextMenuItem","getDisableFavicon","setDisableFavicon","getDisableGa","setDisableGa","getDontShowCardsCurrentTab","setDontShowCardsCurrentTab","getDontShowIdentitiesCurrentTab","setDontShowIdentitiesCurrentTab","setEmail","getEnableAlwaysOnTop","accountPreference","globalPreference","setEnableAlwaysOnTop","getEnableAutoFillOnPageLoad","setEnableAutoFillOnPageLoad","getEnableBiometric","enableBiometrics","setEnableBiometric","getEnableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","getEnableCloseToTray","setEnableCloseToTray","getEnableFullWidth","setEnableFullWidth","getEnableGravitars","setEnableGravitars","getEnableMinimizeToTray","setEnableMinimizeToTray","getEnableStartToTray","setEnableStartToTray","getEnableTray","setEnableTray","defaultOnDiskMemoryOptions","getEntityId","setEntityId","getEntityType","setEntityType","getGlobalEnvironmentUrls","setEverBeenUnlocked","getForcePasswordReset","getInstalledVersion","setInstalledVersion","getKdfIterations","setKdfIterations","getKdfType","setKdfType","getLocale","setLocale","getMainWindowSize","setMainWindowSize","getMinimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","getNoAutoPromptBiometrics","setNoAutoPromptBiometrics","getNoAutoPromptBiometricsText","setNoAutoPromptBiometricsText","getOpenAtLogin","setOpenAtLogin","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","getProtectedPin","setProtectedPin","publicKeySerialized","getRememberedEmail","setRememberedEmail","getSsoCodeVerifier","setSsoCodeVerifier","getSsoOrgIdentifier","setSsoOrganizationIdentifier","getSsoState","setSsoState","getTheme","setTheme","setVaultTimeout","getVaultTimeoutAction","accountVaultTimeoutAction","globalVaultTimeoutAction","setVaultTimeoutAction","getStateVersion","setStateVersion","getWindow","setWindow","useMemory","storageLocation","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","useSecureStorage","getAccountFromMemory","getUserIdFromMemory","cachedAccount","Memory","Both","Disk","saveAccountToMemory","saveAccountToDisk","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","pruneInMemoryAccounts","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","timeoutAction","stateUpdater","updatedState","withPrototype","converter","originalResult","withPrototypeForArrayMembers","memberConstructor","memberConverter","withPrototypeForObjectValues","valuesConstructor","valuesConverter","withPrototypeForMap","StateService","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserCipherComponentState","setBrowserCipherComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","VaultFilter","selectedCollection","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","cipherType","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","buildFilter","cipherPassesFilter","DynamicTreeNode","hasId","fullList","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildNestedFolders","transformation","storedFolders","orgCiphers","oc","nestedFolders","getAllFoldersNested","nestedList","pipe","mergeMap","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","PersonalOwnership","folderCopy","getFolderNested","VaultFilterService","vaultFilter","allVaults","myVault","getVaultFilter","setVaultFilter","filterCipherForSelectedVault","VaultTimeoutService","lockedCallback","loggedOutCallback","startCheck","checkVaultTimeout","shouldLock","executeTimeoutAction","lock","allowSoftLock","pinSet","isPinLockSet","isBiometricLockSet","setVaultTimeoutOptions","action","currentAction","authStatus","vaultTimeoutSeconds","checkSafari","CommandsBackground","main","passwordGenerationService","vaultTimeoutService","messageListener","processCommand","commandToRetry","shortcut","commands","onCommand","generatePasswordToClipboard","autoFillLogin","openPopup","getTabFromCurrentWindowId","retryMessage","tabSendMessageData","collectPageDetailsForContentScript","ContextMenusBackground","noopCommandSuffix","contextMenus","onClicked","menuItemId","getClickedElement","parentMenuItemId","cipherAction","startAutofillPage","Cipher_ClientCopiedPassword","totpValue","loginToAutoFill","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","newState","onStateChanged","setDetectionInterval","pollIdle","handler","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","connect","port","connecting","connectedCallback","disconnect","sharedSecret","validatingFingerprint","showFingerprintDialog","showWrongUserDialog","onDisconnect","timestamp","postMessage","encryptMessage","secureCommunication","getResponse","rawMessage","abs","processMessage","sendUnencrypted","fingerprint","NotificationQueueMessageType","NotificationBackground","autofillService","notificationQueue","cleanupNotificationQueue","getDataForTab","responseCommand","addLogin","changedPassword","removeTabFromNotificationQueue","saveOrUpdateCredentials","saveNever","checkNotificationQueue","doNotificationQueueCheck","currentTab","expires","tabDomain","AddLogin","typeData","isVaultLocked","wasVaultLocked","ChangePassword","loginInfo","loginDomain","normalizedUsername","disabledAddLogin","allowPersonalOwnership","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","queueMessage","changePasswordMessage","getDecryptedCipherById","updateCipher","createNewCipher","addLoginMessage","loginModel","newCipher","RuntimeBackground","systemService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","onInstalled","reason","checkOnInstalled","backgroundMessageListener","isPrivateMode","bitwardenBackgroundMessageListener","closeLoginTab","focusSpecifiedTab","setIcon","refreshBadgeAndMenu","logout","expired","reseedStorage","autofillTimeout","autofillPage","vaultUrl","referrer","TabsBackground","notificationBackground","onFocusChanged","focusedWindowId","onActivated","activeInfo","onReplaced","addedTabId","removedTabId","onReplacedRan","onUpdated","changeInfo","onUpdatedRan","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","requestId","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","bitwardenMain","backgroundWindow","menuOptionsLoaded","manifest_version","nativeMessagingBackground","vaultFilterService","that","backgroundMessagingService","reloadProcess","auditService","exportService","popupUtilsService","userVerificationService","forceWindowReload","commandsBackground","tabsBackground","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","actionSetIcon","browserAction","onWindowCreated","suffix","forLocked","menuDisabled","contextMenusRemoveAll","buildContextMenu","loadMenuAndUpdateBadgeForNoAccessState","contextMenuReady","buildingContextMenu","contextMenusCreate","contexts","parentId","contextMenuEnabled","loadMenuAndUpdateBadge","actionSetBadgeBackgroundColor","loadLoginContextMenuOptions","theText","loadNoLoginsContextMenuOptions","sidebarActionSetBadgeText","browserActionSetBadgeText","getActiveTabs","loadContextMenuOptions","noLoginsMessage","idSuffix","sanitizeContextMenuTitle","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","removeAll","theAction","setBadgeBackgroundColor","color","setBadgeText","setTitle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","definition","defineProperty","enumerable","globalThis","Function","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}